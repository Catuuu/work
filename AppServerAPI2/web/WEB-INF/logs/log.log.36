[INFO][2017-07-14 15:18:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 15:26:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 15:26:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:4388
 
[INFO][2017-07-14 15:26:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 15:26:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:1302
参数3:2
参数4:0
参数5:0
参数6:10
参数7:9
参数8:0
参数9:1
参数10:1
参数11:1.0
参数12:5.900000095367432
参数13:杯
参数14:0
参数15:null
参数16:0
参数17:26
参数18:null
参数19:4388
参数20:F86A9E561BE803165E256C08086C58C4
参数21:4388
 
[INFO][2017-07-14 15:26:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 15:26:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:4386
 
[INFO][2017-07-14 15:26:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 15:26:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:1298
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:1
参数11:2.0
参数12:26.899999618530273
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:null
参数19:4386
参数20:4454DCE59CD8769F7F396C83E153B54B
参数21:4386
 
[INFO][2017-07-14 16:21:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_area
             


         WHERE parentid = ? 
         
            ORDER BY id 
[INFO][2017-07-14 16:21:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:9001
 
[INFO][2017-07-14 16:21:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE city = ? 
         
            ORDER BY stores_id 
[INFO][2017-07-14 16:21:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:9001
 
[INFO][2017-07-14 16:21:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:21:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:21:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.getStoresBrand: 
select count(0) from (select * from cds_stores_brand)  tmp_count 
[INFO][2017-07-14 16:21:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-14 16:21:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.getStoresBrand: 
select tmp.* from (select (row_number() Over(order by stores_brand_id asc)) as rownumber, * from cds_stores_brand) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-14 16:21:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-14 16:22:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:22:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
 
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-14 16:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-14 16:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-14 16:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-14 16:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-14 16:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:3
 
[INFO][2017-07-14 16:22:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:22:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 16:22:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-14 16:22:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 16:22:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-14 16:22:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 16:22:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:22:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:4388
 
[INFO][2017-07-14 16:22:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:22:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:10
参数2:1302
参数3:2
参数4:0
参数5:0
参数6:10
参数7:9
参数8:0
参数9:1
参数10:2
参数11:1.0
参数12:5.9
参数13:杯
参数14:0
参数15:null
参数16:0
参数17:26
参数18:null
参数19:4388
参数20:F86A9E561BE803165E256C08086C58C4
参数21:4388
 
[INFO][2017-07-14 16:22:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-14 16:22:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 16:22:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-14 16:22:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 16:22:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:22:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:4388
 
[INFO][2017-07-14 16:22:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:22:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:10
参数2:1302
参数3:2
参数4:0
参数5:0
参数6:10
参数7:9
参数8:0
参数9:1
参数10:1
参数11:1.0
参数12:5.9
参数13:杯
参数14:0
参数15:null
参数16:0
参数17:26
参数18:null
参数19:4388
参数20:F86A9E561BE803165E256C08086C58C4
参数21:4388
 
[INFO][2017-07-14 16:22:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-14 16:22:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:22:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-14 16:22:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:22:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-14 16:22:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 16:22:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-14 16:22:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 16:23:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-14 16:23:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-14 16:23:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:23:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
参数2:9
 
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
参数2:9
 
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:9
 
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:23:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:23:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:23:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
参数2:9
 
[INFO][2017-07-14 16:23:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:23:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
参数2:9
 
[INFO][2017-07-14 16:23:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-14 16:23:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
参数2:9
 
[INFO][2017-07-14 16:23:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:23:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:9
 
[INFO][2017-07-14 16:23:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-14 16:23:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:23:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:9
参数2:1
 
[INFO][2017-07-14 16:23:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
 
[INFO][2017-07-14 16:23:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 16:23:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 16:23:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:23:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:23:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:23:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 16:23:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:23:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:23:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:23:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
参数2:12
 
[INFO][2017-07-14 16:23:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:23:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
参数2:12
 
[INFO][2017-07-14 16:23:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 11 
[INFO][2017-07-14 16:23:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
参数2:12
 
[INFO][2017-07-14 16:23:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:23:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:12
 
[INFO][2017-07-14 16:23:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
 
[INFO][2017-07-14 16:23:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:23:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:12
参数2:1
 
[INFO][2017-07-14 16:23:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-14 16:23:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:23:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:12
参数3:29
 
[INFO][2017-07-14 16:23:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 3 
[INFO][2017-07-14 16:23:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:12
参数3:29
 
[INFO][2017-07-14 16:23:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:23:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
参数2:12
参数3:30
 
[INFO][2017-07-14 16:23:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 16:23:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
参数2:12
参数3:30
 
[INFO][2017-07-14 16:23:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:23:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
参数2:12
参数3:29
 
[INFO][2017-07-14 16:23:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 3 
[INFO][2017-07-14 16:23:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
参数2:12
参数3:29
 
[INFO][2017-07-14 16:23:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:23:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
参数2:12
 
[INFO][2017-07-14 16:23:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 11 
[INFO][2017-07-14 16:23:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
参数2:12
 
[INFO][2017-07-14 16:23:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 16:23:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:23:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 16:23:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:23:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 16:23:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE  (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:23:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:30
 
[INFO][2017-07-14 16:23:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE  (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-14 16:23:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:30
 
[INFO][2017-07-14 16:24:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:24:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:24:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:24:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:24:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:24:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:24:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:24:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
参数2:18
 
[INFO][2017-07-14 16:24:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:24:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:18
 
[INFO][2017-07-14 16:24:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 8 
[INFO][2017-07-14 16:24:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:18
 
[INFO][2017-07-14 16:24:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:24:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:18
 
[INFO][2017-07-14 16:24:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:24:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:3237
 
[INFO][2017-07-14 16:24:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:24:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:18
参数2:1218
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9196
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3237
 
[INFO][2017-07-14 16:24:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:24:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:3233
 
[INFO][2017-07-14 16:24:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:24:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:18
参数2:98
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9192
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3233
 
[INFO][2017-07-14 16:24:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:24:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:3238
 
[INFO][2017-07-14 16:24:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:24:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:18
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:1
参数11:0.0
参数12:0.0
参数13:null
参数14:9197
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3238
 
[INFO][2017-07-14 16:25:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:25:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:3239
 
[INFO][2017-07-14 16:25:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:25:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:18
参数2:1226
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:1
参数11:0.0
参数12:0.0
参数13:null
参数14:9198
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3239
 
[INFO][2017-07-14 16:26:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:26:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 16:26:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:26:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 16:26:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:26:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 16:26:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:26:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 16:26:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:26:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 16:26:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:26:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 16:26:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:26:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
 
[INFO][2017-07-14 16:26:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:26:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 16:26:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:26:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:26:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-14 16:26:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 16:26:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:26:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 16:26:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:26:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 16:26:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:26:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 16:26:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:26:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 16:26:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:26:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 16:26:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:26:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 16:26:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:26:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
 
[INFO][2017-07-14 16:26:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:26:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 16:26:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:26:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:26:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:26:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:26:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:26:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:9
 
[INFO][2017-07-14 16:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:9
 
[INFO][2017-07-14 16:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:9
 
[INFO][2017-07-14 16:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:25
 
[INFO][2017-07-14 16:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-14 16:26:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:26:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:9
参数2:2
 
[INFO][2017-07-14 16:26:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:26:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 16:27:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:27:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:4370
 
[INFO][2017-07-14 16:27:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:27:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:9
参数2:1302
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:1
参数11:0.0
参数12:5.9
参数13:份
参数14:0
参数15:null
参数16:0
参数17:25
参数18:null
参数19:null
参数20:null
参数21:4370
 
[INFO][2017-07-14 16:27:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:27:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:27:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:27:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:4370
 
[INFO][2017-07-14 16:27:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:27:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:9
参数2:1302
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:2
参数11:0.0
参数12:5.9
参数13:份
参数14:0
参数15:null
参数16:0
参数17:25
参数18:null
参数19:null
参数20:null
参数21:4370
 
[INFO][2017-07-14 16:27:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:27:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:27:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:27:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:27:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:27:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:27:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:27:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 16:27:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:27:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-14 16:27:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:27:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-14 16:27:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:27:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
 
[INFO][2017-07-14 16:27:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 16:27:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-14 16:27:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:27:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:2
 
[INFO][2017-07-14 16:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:25
 
[INFO][2017-07-14 16:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-14 16:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:9
参数2:2
 
[INFO][2017-07-14 16:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 16:27:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:27:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:27:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:27:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:27:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:27:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:27:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:27:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:27:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:25
 
[INFO][2017-07-14 16:27:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-14 16:27:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:27:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:9
参数2:2
 
[INFO][2017-07-14 16:27:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 16:27:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:27:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:27:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:27:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:27:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:27:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:27:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:27:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:27:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:25
 
[INFO][2017-07-14 16:27:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 16:27:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 16:27:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:27:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:9
参数2:2
 
[INFO][2017-07-14 16:27:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:27:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:27:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:27:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:27:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:27:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:27:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:27:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:9
 
[INFO][2017-07-14 16:27:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:27:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:25
 
[INFO][2017-07-14 16:27:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 16:27:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:27:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:9
参数2:2
 
[INFO][2017-07-14 16:27:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:27:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 16:29:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:29:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:4368
 
[INFO][2017-07-14 16:29:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:29:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:9
参数2:1300
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:2
参数11:1.0
参数12:1.0
参数13:份
参数14:0
参数15:null
参数16:0
参数17:25
参数18:null
参数19:4368
参数20:
参数21:4368
 
[INFO][2017-07-14 16:29:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:29:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:9
 
[INFO][2017-07-14 16:29:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:29:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:9
 
[INFO][2017-07-14 16:29:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:29:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:4368
 
[INFO][2017-07-14 16:29:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:29:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9
参数2:1300
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:1
参数11:1.0
参数12:1.0
参数13:份
参数14:0
参数15:null
参数16:0
参数17:25
参数18:null
参数19:4368
参数20:
参数21:4368
 
[INFO][2017-07-14 16:29:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:29:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:9
 
[INFO][2017-07-14 16:29:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:29:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:9
 
[INFO][2017-07-14 16:30:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:30:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 16:30:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:30:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 16:30:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:30:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 16:30:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:30:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 16:30:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:30:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 16:30:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:30:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 16:30:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:30:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
 
[INFO][2017-07-14 16:30:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:30:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-14 16:30:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:30:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:2
 
[INFO][2017-07-14 16:30:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:30:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 16:30:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:30:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:30:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:30:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:30:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:30:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:30:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:30:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 16:30:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:30:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 16:30:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:30:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 16:30:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:30:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
 
[INFO][2017-07-14 16:30:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:30:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 16:30:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:30:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:10
参数2:2
 
[INFO][2017-07-14 16:30:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:30:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-14 16:30:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:30:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-14 16:30:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:30:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
参数2:不好吃，我背锅
 
[INFO][2017-07-14 16:30:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:30:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-14 16:30:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:30:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-14 16:30:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:30:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
参数2:特制饮品
 
[INFO][2017-07-14 16:30:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:30:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:30:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:30:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:30:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:30:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:30:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:30:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 16:30:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:30:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 16:30:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:30:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 16:30:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:30:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
 
[INFO][2017-07-14 16:30:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:30:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-14 16:30:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:30:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:2
 
[INFO][2017-07-14 16:30:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:30:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 16:30:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_area
             


         WHERE parentid = ? 
         
            ORDER BY id 
[INFO][2017-07-14 16:30:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9001
 
[INFO][2017-07-14 16:30:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE city = ? 
         
            ORDER BY stores_id 
[INFO][2017-07-14 16:30:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9001
 
[INFO][2017-07-14 16:30:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:30:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:30:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.getStoresBrand: 
select count(0) from (select * from cds_stores_brand)  tmp_count 
[INFO][2017-07-14 16:30:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 16:30:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.getStoresBrand: 
select tmp.* from (select (row_number() Over(order by stores_brand_id asc)) as rownumber, * from cds_stores_brand) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-14 16:30:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 16:30:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.getStoresBrand2: 
select count(0) from (select * from cds_stores_brand where stores_id = ?)  tmp_count 
[INFO][2017-07-14 16:30:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
 
[INFO][2017-07-14 16:30:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.getStoresBrand2: 
select tmp.* from (select (row_number() Over(order by stores_brand_id asc)) as rownumber, * from cds_stores_brand where stores_id = ?) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 16:30:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
 
[INFO][2017-07-14 16:31:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.updateStoresBrand: 
update cds_stores_brand set  elem_restaurant_id =null where elem_restaurant_id=? 
[INFO][2017-07-14 16:31:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:156059353
 
[INFO][2017-07-14 16:31:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.updateStoresBrand2: 
update cds_stores_brand set  elem_restaurant_id =? where stores_brand_id=? 
[INFO][2017-07-14 16:31:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:156059353
参数2:26
 
[INFO][2017-07-14 16:31:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.getStoresBrand2: 
select count(0) from (select * from cds_stores_brand where stores_id = ?)  tmp_count 
[INFO][2017-07-14 16:31:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
 
[INFO][2017-07-14 16:31:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.getStoresBrand2: 
select tmp.* from (select (row_number() Over(order by stores_brand_id asc)) as rownumber, * from cds_stores_brand where stores_id = ?) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 16:31:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
 
[INFO][2017-07-14 16:31:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:31:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
参数2:9
 
[INFO][2017-07-14 16:31:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:31:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:9
 
[INFO][2017-07-14 16:31:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:31:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:9
 
[INFO][2017-07-14 16:31:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 16:31:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:29
 
[INFO][2017-07-14 16:31:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 16:31:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:30
 
[INFO][2017-07-14 16:31:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:31:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:25
 
[INFO][2017-07-14 16:31:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 16:31:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:49
 
[INFO][2017-07-14 16:31:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 16:31:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:50
 
[INFO][2017-07-14 16:31:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 16:31:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:51
 
[INFO][2017-07-14 16:31:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 16:31:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:52
 
[INFO][2017-07-14 16:31:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:31:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-14 16:31:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-14 16:31:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-14 16:31:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-14 16:31:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
 
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-14 16:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 16:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-14 16:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:3
 
[INFO][2017-07-14 16:31:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:31:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-14 16:31:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:31:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-14 16:31:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:31:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:31:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:31:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:31:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:31:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:31:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-14 16:31:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:31:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 16:31:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:31:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 16:31:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:31:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
 
[INFO][2017-07-14 16:31:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-14 16:31:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 16:31:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:31:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:2
 
[INFO][2017-07-14 16:31:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:31:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227280992
 
[INFO][2017-07-14 16:31:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:31:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227546890
 
[INFO][2017-07-14 16:31:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:31:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227537241
 
[INFO][2017-07-14 16:31:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:31:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227537242
 
[INFO][2017-07-14 16:31:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:31:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227599564
 
[INFO][2017-07-14 16:31:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:31:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227683784
 
[INFO][2017-07-14 16:31:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:31:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1228358288
 
[INFO][2017-07-14 16:31:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:31:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1228372117
 
[INFO][2017-07-14 16:31:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:31:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1228377939
 
[INFO][2017-07-14 16:31:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:31:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1233425409
 
[INFO][2017-07-14 16:31:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:31:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1233411688
 
[INFO][2017-07-14 16:31:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:31:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1233419931
 
[INFO][2017-07-14 16:31:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:31:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1233419933
 
[INFO][2017-07-14 16:31:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:31:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1228358288
 
[INFO][2017-07-14 16:31:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:31:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1228372117
 
[INFO][2017-07-14 16:31:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:31:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1228377939
 
[INFO][2017-07-14 16:31:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:31:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:31:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:31:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
 
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 16:31:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:31:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-14 16:31:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:31:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 16:31:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:31:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 16:31:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:31:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
 
[INFO][2017-07-14 16:31:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-14 16:31:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:31:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:2
 
[INFO][2017-07-14 16:31:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:31:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-14 16:31:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:31:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:32:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:32:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:32:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-14 16:32:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:32:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-14 16:32:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:32:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-14 16:32:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
 
[INFO][2017-07-14 16:32:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-14 16:32:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-14 16:32:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-14 16:32:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:3
 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
参数2:不好吃，我背锅
 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227280992
 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227546890
 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227537241
 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
参数2:特制饮品
 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227537242
 
[INFO][2017-07-14 16:32:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227599564
 
[INFO][2017-07-14 16:32:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227683784
 
[INFO][2017-07-14 16:32:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?

                
            
            
                
                    and class_id not in (49,52,51,50))  tmp_count 
[INFO][2017-07-14 16:32:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 16:32:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetClassList: 
select * from cds_class
         
         WHERE brand_id = ?

                
            
            
                
                    and class_id not in (49,52,51,50) 
[INFO][2017-07-14 16:32:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 16:32:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-14 16:32:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1034
 
[INFO][2017-07-14 16:32:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-14 16:32:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:49
参数3:1227784895
参数4:不好吃，我背锅
参数5:1
参数6:null
参数7:1034
 
[INFO][2017-07-14 16:32:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:32:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 16:32:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227280992
 
[INFO][2017-07-14 16:32:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227546890
 
[INFO][2017-07-14 16:32:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227537241
 
[INFO][2017-07-14 16:32:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227537242
 
[INFO][2017-07-14 16:32:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227599564
 
[INFO][2017-07-14 16:32:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227683784
 
[INFO][2017-07-14 16:32:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227784895
 
[INFO][2017-07-14 16:32:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-14 16:32:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1033
 
[INFO][2017-07-14 16:32:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-14 16:32:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:52
参数3:1227772954
参数4:特制饮品
参数5:1
参数6:null
参数7:1033
 
[INFO][2017-07-14 16:32:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:32:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 16:32:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227280992
 
[INFO][2017-07-14 16:32:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227546890
 
[INFO][2017-07-14 16:32:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227537241
 
[INFO][2017-07-14 16:32:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227537242
 
[INFO][2017-07-14 16:32:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227599564
 
[INFO][2017-07-14 16:32:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227683784
 
[INFO][2017-07-14 16:32:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-14 16:32:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1032
 
[INFO][2017-07-14 16:32:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227784895
 
[INFO][2017-07-14 16:32:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-14 16:32:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
参数2:51
参数3:1227772956
参数4:再加一份米饭
参数5:1
参数6:null
参数7:1032
 
[INFO][2017-07-14 16:32:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227772954
 
[INFO][2017-07-14 16:32:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:32:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 16:32:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1227280992
 
[INFO][2017-07-14 16:32:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1227546890
 
[INFO][2017-07-14 16:32:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1227537241
 
[INFO][2017-07-14 16:32:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1227537242
 
[INFO][2017-07-14 16:32:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1227599564
 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1227683784
 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1227784895
 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1031
 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:50
参数3:1227784897
参数4:不背锅套餐
参数5:1
参数6:null
参数7:1031
 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1227772954
 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1227772956
 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227280992
 
[INFO][2017-07-14 16:32:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227546890
 
[INFO][2017-07-14 16:32:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227537241
 
[INFO][2017-07-14 16:32:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227537242
 
[INFO][2017-07-14 16:32:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227599564
 
[INFO][2017-07-14 16:32:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227683784
 
[INFO][2017-07-14 16:32:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227784895
 
[INFO][2017-07-14 16:32:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227772954
 
[INFO][2017-07-14 16:32:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227772956
 
[INFO][2017-07-14 16:32:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227784897
 
[INFO][2017-07-14 16:32:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:32:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:32:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:32:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:32:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:32:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:32:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:32:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:32:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:32:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:32:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
 
[INFO][2017-07-14 16:32:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:32:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 16:32:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:32:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-14 16:32:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:32:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:10
参数2:2
 
[INFO][2017-07-14 16:32:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227280992
 
[INFO][2017-07-14 16:32:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227546890
 
[INFO][2017-07-14 16:32:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227537241
 
[INFO][2017-07-14 16:32:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227537242
 
[INFO][2017-07-14 16:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227599564
 
[INFO][2017-07-14 16:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227683784
 
[INFO][2017-07-14 16:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227784895
 
[INFO][2017-07-14 16:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227772954
 
[INFO][2017-07-14 16:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227772956
 
[INFO][2017-07-14 16:32:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:32:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227784897
 
[INFO][2017-07-14 16:32:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:32:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:32:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:32:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:32:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:32:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:32:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:32:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:32:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:32:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 16:32:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:32:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
 
[INFO][2017-07-14 16:32:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:32:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-14 16:32:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:32:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:10
参数2:2
 
[INFO][2017-07-14 16:32:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:32:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-14 16:33:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:33:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:4388
 
[INFO][2017-07-14 16:33:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:33:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:1302
参数3:2
参数4:0
参数5:0
参数6:10
参数7:9
参数8:0
参数9:1
参数10:1
参数11:1.0
参数12:5.900000095367432
参数13:杯
参数14:0
参数15:null
参数16:0
参数17:26
参数18:null
参数19:4388
参数20:F86A9E561BE803165E256C08086C58C4
参数21:4388
 
[INFO][2017-07-14 16:33:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:33:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:4386
 
[INFO][2017-07-14 16:33:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:33:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:10
参数2:1298
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:1
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234713952
参数19:4386
参数20:4454DCE59CD8769F7F396C83E153B54B
参数21:4386
 
[INFO][2017-07-14 16:33:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:33:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:33:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:33:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:4385
 
[INFO][2017-07-14 16:33:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:33:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:1299
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:0
参数11:2.0
参数12:27.9
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234725422
参数19:null
参数20:null
参数21:4385
 
[INFO][2017-07-14 16:33:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:33:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:33:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:33:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:4384
 
[INFO][2017-07-14 16:33:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:33:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:1300
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:1
参数11:1.0
参数12:1.0
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234725426
参数19:4384
参数20:B3836971876CCB5234E716F75B1973FF
参数21:4384
 
[INFO][2017-07-14 16:33:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:33:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:33:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:33:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:4383
 
[INFO][2017-07-14 16:33:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:33:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:1301
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:1
参数11:0.0
参数12:3.8
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234721513
参数19:4383
参数20:5E55899846DF34E40DCE9B9DFAE6BFE6
参数21:4383
 
[INFO][2017-07-14 16:33:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:33:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:33:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:33:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:4382
 
[INFO][2017-07-14 16:33:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:33:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:1297
参数3:2
参数4:0
参数5:0
参数6:0
参数7:8
参数8:0
参数9:1
参数10:2
参数11:0.0
参数12:0.1
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234717263
参数19:4382
参数20:FE8D66CE2E379E1D29A1F0A3405916CB
参数21:4382
 
[INFO][2017-07-14 16:33:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:33:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:33:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:33:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227280992
 
[INFO][2017-07-14 16:33:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:33:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227546890
 
[INFO][2017-07-14 16:33:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:33:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227537241
 
[INFO][2017-07-14 16:33:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:33:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227537242
 
[INFO][2017-07-14 16:33:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:33:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227599564
 
[INFO][2017-07-14 16:33:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:33:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227683784
 
[INFO][2017-07-14 16:33:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:33:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227784895
 
[INFO][2017-07-14 16:33:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:33:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227772954
 
[INFO][2017-07-14 16:33:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:33:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227772956
 
[INFO][2017-07-14 16:33:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:33:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227784897
 
[INFO][2017-07-14 16:33:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:33:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:33:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:33:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:33:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:33:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:33:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:33:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:33:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:33:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:33:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
 
[INFO][2017-07-14 16:33:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:33:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-14 16:33:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:33:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-14 16:33:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:33:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-14 16:33:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1234713952
 
[INFO][2017-07-14 16:33:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1234725422
 
[INFO][2017-07-14 16:33:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1234725426
 
[INFO][2017-07-14 16:33:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1234721513
 
[INFO][2017-07-14 16:33:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1234717263
 
[INFO][2017-07-14 16:33:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1233411688
 
[INFO][2017-07-14 16:33:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1233419931
 
[INFO][2017-07-14 16:33:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1233419933
 
[INFO][2017-07-14 16:33:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1233425409
 
[INFO][2017-07-14 16:33:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1228372117
 
[INFO][2017-07-14 16:33:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1228358288
 
[INFO][2017-07-14 16:33:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1228377939
 
[INFO][2017-07-14 16:33:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1234713952
 
[INFO][2017-07-14 16:33:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1234725422
 
[INFO][2017-07-14 16:33:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1234725426
 
[INFO][2017-07-14 16:33:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1234721513
 
[INFO][2017-07-14 16:33:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1234725426
 
[INFO][2017-07-14 16:33:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1234713952
 
[INFO][2017-07-14 16:33:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:33:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1234725422
 
[INFO][2017-07-14 16:33:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:33:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 16:33:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:33:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 16:33:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:33:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 16:33:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:33:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:33:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:33:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:33:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
 
[INFO][2017-07-14 16:33:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:33:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 16:33:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:33:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-14 16:33:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:33:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:10
参数2:2
 
[INFO][2017-07-14 16:33:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:33:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:33:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:33:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:33:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:33:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 16:33:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:33:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:33:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:33:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 16:33:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:33:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:26
 
[INFO][2017-07-14 16:33:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:33:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 16:33:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:33:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:2
 
[INFO][2017-07-14 16:33:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:33:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 16:34:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:34:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227280992
 
[INFO][2017-07-14 16:34:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:34:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227546890
 
[INFO][2017-07-14 16:34:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:34:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227537241
 
[INFO][2017-07-14 16:34:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:34:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227537242
 
[INFO][2017-07-14 16:34:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:34:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227599564
 
[INFO][2017-07-14 16:34:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:34:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227683784
 
[INFO][2017-07-14 16:34:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:34:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227784895
 
[INFO][2017-07-14 16:34:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:34:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227772954
 
[INFO][2017-07-14 16:34:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:34:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227772956
 
[INFO][2017-07-14 16:34:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:34:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227784897
 
[INFO][2017-07-14 16:34:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:34:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1234725426
 
[INFO][2017-07-14 16:34:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:34:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1234721513
 
[INFO][2017-07-14 16:34:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:34:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1234717263
 
[INFO][2017-07-14 16:34:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:34:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1233411688
 
[INFO][2017-07-14 16:34:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:34:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1233419931
 
[INFO][2017-07-14 16:34:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:34:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1233419933
 
[INFO][2017-07-14 16:34:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:34:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1233425409
 
[INFO][2017-07-14 16:34:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:34:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1228372117
 
[INFO][2017-07-14 16:34:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:34:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1228358288
 
[INFO][2017-07-14 16:34:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:34:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1228377939
 
[INFO][2017-07-14 16:34:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 16:34:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 16:34:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:34:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
 
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:34:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:34:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 16:34:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:34:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 16:34:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:34:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 16:34:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:34:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
 
[INFO][2017-07-14 16:34:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 16:34:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:34:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:2
 
[INFO][2017-07-14 16:34:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 16:34:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:34:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:34:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:34:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 16:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:9
 
[INFO][2017-07-14 16:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:9
 
[INFO][2017-07-14 16:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:9
 
[INFO][2017-07-14 16:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:25
 
[INFO][2017-07-14 16:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 16:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 16:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:9
参数2:2
 
[INFO][2017-07-14 16:34:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:34:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:34:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:34:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:34:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:34:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 16:34:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:34:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 16:34:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:34:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 16:34:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:34:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:26
 
[INFO][2017-07-14 16:34:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 16:34:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:34:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:2
 
[INFO][2017-07-14 16:34:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:34:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-14 16:34:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:34:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
参数3:51
 
[INFO][2017-07-14 16:34:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-14 16:34:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
参数3:51
 
[INFO][2017-07-14 16:34:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:34:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
参数3:50
 
[INFO][2017-07-14 16:34:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 16:34:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
参数3:50
 
[INFO][2017-07-14 16:34:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:34:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-14 16:34:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:34:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
参数2:不好吃，我背锅
 
[INFO][2017-07-14 16:34:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:34:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-14 16:34:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:34:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-14 16:34:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-14 16:34:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
参数2:特制饮品
 
[INFO][2017-07-14 16:35:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:35:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227280992
 
[INFO][2017-07-14 16:35:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:35:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227546890
 
[INFO][2017-07-14 16:35:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:35:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227537241
 
[INFO][2017-07-14 16:35:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:35:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227537242
 
[INFO][2017-07-14 16:35:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:35:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227599564
 
[INFO][2017-07-14 16:35:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:35:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227683784
 
[INFO][2017-07-14 16:35:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:35:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227784895
 
[INFO][2017-07-14 16:35:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:35:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227772954
 
[INFO][2017-07-14 16:35:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:35:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227772956
 
[INFO][2017-07-14 16:35:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:35:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227784897
 
[INFO][2017-07-14 16:35:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:35:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:35:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:35:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:35:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:35:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:35:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:35:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 16:35:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:35:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 16:35:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:35:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 16:35:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:35:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
 
[INFO][2017-07-14 16:35:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:35:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 16:35:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:35:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 16:35:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:35:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:2
 
[INFO][2017-07-14 16:35:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:35:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1228372117
 
[INFO][2017-07-14 16:35:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:35:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1228358288
 
[INFO][2017-07-14 16:35:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:35:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1228377939
 
[INFO][2017-07-14 16:35:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:35:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227280992
 
[INFO][2017-07-14 16:35:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.getGoodTree: 
select (a.sgl_id)as id,(d.good_name)as text,d.market_price,d.good_info,a.elem_count,a.box_price,a.food_id from cds_stores_goods_list a
            left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id and a.stores_id= b.stores_id
            left join cds_stores_class c on c.stores_brand_id = a.stores_brand_id
            left join cds_goods_info d on a.good_id = d.good_id and c.class_id = d.class_id
            where b.brand_id=? and b.stores_id=? and c.food_category_id=? and c.class_id=? and d.good_name is not null 
[INFO][2017-07-14 16:35:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
参数3:1227280992
参数4:47
 
[INFO][2017-07-14 16:35:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:35:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1234721513
 
[INFO][2017-07-14 16:35:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:35:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:35:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:35:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:35:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:35:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 16:35:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:35:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 16:35:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:35:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 16:35:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:35:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 16:35:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:35:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
 
[INFO][2017-07-14 16:35:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:35:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 16:35:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:35:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 16:35:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:35:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:2
 
[INFO][2017-07-14 16:36:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:36:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:4385
 
[INFO][2017-07-14 16:36:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:36:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:10
参数2:1299
参数3:2
参数4:0
参数5:0
参数6:5
参数7:0
参数8:0
参数9:1
参数10:0
参数11:2.0
参数12:27.899999618530273
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234725422
参数19:null
参数20:null
参数21:4385
 
[INFO][2017-07-14 16:37:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:37:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:4384
 
[INFO][2017-07-14 16:37:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:37:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:1300
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:1
参数11:1.0
参数12:1.0
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234725426
参数19:4384
参数20:B3836971876CCB5234E716F75B1973FF
参数21:4384
 
[INFO][2017-07-14 16:37:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:37:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:4383
 
[INFO][2017-07-14 16:37:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:37:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:10
参数2:1301
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:1
参数11:0.0
参数12:3.799999952316284
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234721513
参数19:4383
参数20:5E55899846DF34E40DCE9B9DFAE6BFE6
参数21:4383
 
[INFO][2017-07-14 16:49:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:49:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:4385
 
[INFO][2017-07-14 16:49:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:49:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:10
参数2:1299
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:0
参数11:2.0
参数12:27.9
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234725422
参数19:null
参数20:null
参数21:4385
 
[INFO][2017-07-14 16:50:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 16:50:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:4385
 
[INFO][2017-07-14 16:50:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 16:50:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:1299
参数3:2
参数4:0
参数5:0
参数6:2
参数7:0
参数8:0
参数9:1
参数10:0
参数11:2.0
参数12:27.9
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234725422
参数19:null
参数20:null
参数21:4385
 
[INFO][2017-07-14 16:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 16:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 16:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 16:52:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:52:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 16:52:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:52:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 16:52:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:52:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 16:52:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:52:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
 
[INFO][2017-07-14 16:52:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:52:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-14 16:52:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:52:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:2
 
[INFO][2017-07-14 16:52:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:52:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-14 16:52:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:52:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227280992
 
[INFO][2017-07-14 16:52:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:52:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227546890
 
[INFO][2017-07-14 16:52:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:52:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227537241
 
[INFO][2017-07-14 16:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227537242
 
[INFO][2017-07-14 16:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227599564
 
[INFO][2017-07-14 16:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227683784
 
[INFO][2017-07-14 16:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227784895
 
[INFO][2017-07-14 16:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227772954
 
[INFO][2017-07-14 16:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227772956
 
[INFO][2017-07-14 16:52:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:52:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:52:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-14 16:52:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227784897
 
[INFO][2017-07-14 16:52:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:52:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 16:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 16:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 16:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 16:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
 
[INFO][2017-07-14 16:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 16:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-14 16:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:2
 
[INFO][2017-07-14 16:52:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:52:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1234713952
 
[INFO][2017-07-14 16:52:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:52:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1234725422
 
[WARN][2017-07-14 16:56:26] org.apache.activemq.transport.failover.FailoverTransport.handleTransportFailure(FailoverTransport.java:251) ActiveMQ Transport: tcp:///127.0.0.1:61616@55571 Transport (tcp://127.0.0.1:61616) failed, reason:  java.io.EOFException, attempting to automatically reconnect 
[INFO][2017-07-14 16:56:26] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1042) ActiveMQ Task-3 Successfully reconnected to tcp://127.0.0.1:61616 
[INFO][2017-07-14 16:56:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:56:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1234713952
 
[INFO][2017-07-14 16:56:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:56:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1234725422
 
[INFO][2017-07-14 16:58:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:58:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1234713952
 
[INFO][2017-07-14 16:58:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:58:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1234725422
 
[INFO][2017-07-14 16:58:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:58:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:58:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 16:58:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:58:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 16:58:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 16:58:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 16:58:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 16:58:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 16:58:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 16:58:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 16:58:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 16:58:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 16:58:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
 
[INFO][2017-07-14 16:58:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:58:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-14 16:58:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 16:58:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-14 16:58:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 16:58:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:10
参数2:2
 
[INFO][2017-07-14 16:58:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:58:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1234713952
 
[INFO][2017-07-14 16:58:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 16:58:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1234725422
 
[WARN][2017-07-14 17:01:36] org.apache.activemq.transport.failover.FailoverTransport.handleTransportFailure(FailoverTransport.java:251) ActiveMQ Transport: tcp:///127.0.0.1:61616@58101 Transport (tcp://127.0.0.1:61616) failed, reason:  java.io.EOFException, attempting to automatically reconnect 
[INFO][2017-07-14 17:01:37] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1042) ActiveMQ Task-5 Successfully reconnected to tcp://127.0.0.1:61616 
[INFO][2017-07-14 17:01:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 17:01:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1234713952
 
[INFO][2017-07-14 17:01:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 17:01:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1234725422
 
[INFO][2017-07-14 17:07:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:07:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 17:07:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:07:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 17:07:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 17:07:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 17:07:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 17:07:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 17:07:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 17:07:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 17:07:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 17:07:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 17:07:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 17:07:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
 
[INFO][2017-07-14 17:07:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 17:07:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 17:07:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 17:07:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-14 17:07:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 17:07:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:2
 
[INFO][2017-07-14 17:08:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 17:08:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:4388
 
[INFO][2017-07-14 17:08:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 17:08:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:1302
参数3:2
参数4:0
参数5:0
参数6:10
参数7:9
参数8:0
参数9:1
参数10:1
参数11:1.0
参数12:5.900000095367432
参数13:杯
参数14:0
参数15:null
参数16:0
参数17:26
参数18:null
参数19:4388
参数20:F86A9E561BE803165E256C08086C58C4
参数21:4388
 
[INFO][2017-07-14 17:08:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 17:08:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:4386
 
[INFO][2017-07-14 17:08:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 17:08:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:1298
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:1
参数11:2.0
参数12:26.899999618530273
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234713952
参数19:4386
参数20:4454DCE59CD8769F7F396C83E153B54B
参数21:4386
 
[INFO][2017-07-14 17:09:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 17:09:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:9
 
[INFO][2017-07-14 17:09:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 17:09:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:9
 
[INFO][2017-07-14 17:09:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 17:09:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:9
 
[INFO][2017-07-14 17:09:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 17:09:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:29
 
[INFO][2017-07-14 17:09:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 17:09:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:30
 
[INFO][2017-07-14 17:09:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 17:09:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:25
 
[INFO][2017-07-14 17:09:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 17:09:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:49
 
[INFO][2017-07-14 17:09:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 17:09:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:50
 
[INFO][2017-07-14 17:09:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 17:09:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:51
 
[INFO][2017-07-14 17:09:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 17:09:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:52
 
[INFO][2017-07-14 17:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 17:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
参数2:9
 
[INFO][2017-07-14 17:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-14 17:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
参数2:9
 
[INFO][2017-07-14 17:10:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 17:10:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:3259
 
[INFO][2017-07-14 17:10:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 17:10:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-14 17:10:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 17:10:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:3157
 
[INFO][2017-07-14 17:10:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 17:10:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:9
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9112
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3157
 
[INFO][2017-07-14 17:10:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 17:10:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2959
 
[INFO][2017-07-14 17:10:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 17:10:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9
参数2:1245
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:8887
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:2959
 
[INFO][2017-07-14 17:10:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 17:10:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2953
 
[INFO][2017-07-14 17:10:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 17:10:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:9
参数2:1244
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:8881
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:2953
 
[INFO][2017-07-14 17:10:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 17:10:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2947
 
[INFO][2017-07-14 17:10:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 17:10:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:9
参数2:1243
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:8875
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:2947
 
[INFO][2017-07-14 17:11:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 17:11:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:288
 
[INFO][2017-07-14 17:11:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 17:11:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:9
参数2:100
参数3:1
参数4:80
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:8620
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:288
 
[INFO][2017-07-14 17:11:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 17:11:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2564
 
[INFO][2017-07-14 17:11:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 17:11:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:9
参数2:1184
参数3:1
参数4:16
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:8617
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:2564
 
[INFO][2017-07-14 17:11:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 17:11:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2604
 
[INFO][2017-07-14 17:11:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 17:11:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:9
参数2:1201
参数3:1
参数4:18
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:5875
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:2604
 
[INFO][2017-07-14 17:11:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 17:11:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2747
 
[INFO][2017-07-14 17:11:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 17:11:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:9
参数2:1218
参数3:1
参数4:8
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:8616
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:2747
 
[INFO][2017-07-14 17:12:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 17:12:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2776
 
[INFO][2017-07-14 17:12:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 17:12:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
参数2:1226
参数3:1
参数4:3
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:8615
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:2776
 
[INFO][2017-07-14 17:15:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:15:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 17:15:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:15:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 17:15:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 17:15:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 17:15:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:15:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 17:15:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:15:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 17:15:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 17:15:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:
 
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:15:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 17:15:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-14 17:15:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:100
 
[INFO][2017-07-14 17:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-14 17:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1176
 
[INFO][2017-07-14 17:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-14 17:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1184
 
[INFO][2017-07-14 17:56:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 17:56:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
参数2:9
 
[INFO][2017-07-14 17:56:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 17:56:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:9
 
[INFO][2017-07-14 17:56:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 17:56:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:9
 
[INFO][2017-07-14 17:56:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 17:56:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:29
 
[INFO][2017-07-14 17:57:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 17:57:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:30
 
[INFO][2017-07-14 17:57:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 17:57:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:25
 
[INFO][2017-07-14 17:57:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 17:57:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:49
 
[INFO][2017-07-14 17:57:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 17:57:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:50
 
[INFO][2017-07-14 17:57:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 17:57:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:51
 
[INFO][2017-07-14 17:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-14 17:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:52
 
[INFO][2017-07-14 17:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 17:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 17:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 17:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 17:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
 
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-14 17:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:3
 
[INFO][2017-07-14 17:57:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:57:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 17:57:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-14 17:57:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 17:57:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-14 17:57:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 17:57:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:57:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 17:57:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 17:57:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 17:57:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 17:57:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 17:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 17:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 17:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 17:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 17:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 17:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 17:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 17:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
 
[INFO][2017-07-14 17:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 17:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 17:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 17:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:2
 
[INFO][2017-07-14 17:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 17:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-14 17:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298,1302)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 17:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 17:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298,1302)
                
            
            
                
                     and c.class_id in (50,51,52,49) 
[INFO][2017-07-14 17:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 17:57:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 17:57:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:4388
 
[INFO][2017-07-14 17:57:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 17:57:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:10
参数2:1302
参数3:2
参数4:0
参数5:0
参数6:10
参数7:9
参数8:0
参数9:1
参数10:1
参数11:1.0
参数12:5.9
参数13:杯
参数14:0
参数15:null
参数16:0
参数17:26
参数18:null
参数19:
参数20:F86A9E561BE803165E256C08086C58C4
参数21:4388
 
[INFO][2017-07-14 17:57:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 17:57:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 17:57:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 17:57:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 17:57:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.deleteRecord: 
DELETE FROM cds_stores_goods_list
         WHERE sgl_id = ? 
[INFO][2017-07-14 17:57:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:4388
 
[INFO][2017-07-14 17:57:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 17:57:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:10
参数2:2
 
[INFO][2017-07-14 17:57:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 17:57:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 17:57:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-14 17:57:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 17:57:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 17:57:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 17:57:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-14 17:57:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 18:11:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:11:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 18:11:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:11:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 18:11:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 18:11:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 18:11:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 18:11:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 18:11:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:11:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 18:11:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-14 18:11:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 18:11:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 18:11:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
 
[INFO][2017-07-14 18:11:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:11:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 18:11:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:11:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-14 18:11:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:11:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 18:11:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:11:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-14 18:11:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-14 18:11:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-14 18:13:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:13:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:13:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:13:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:13:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 18:13:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:13:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 18:13:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 18:13:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:13:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 18:13:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-14 18:13:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 18:13:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 18:13:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
 
[INFO][2017-07-14 18:13:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:13:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-14 18:13:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:13:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:2
 
[INFO][2017-07-14 18:13:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:13:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 18:13:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:13:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 18:13:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-14 18:13:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 18:19:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:19:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 18:19:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-14 18:19:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 18:21:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:21:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:21:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:21:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:21:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 18:21:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:21:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 18:21:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 18:21:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:21:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 18:21:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-14 18:21:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 18:21:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 18:21:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
 
[INFO][2017-07-14 18:21:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:21:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 18:21:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:21:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:10
参数2:2
 
[INFO][2017-07-14 18:21:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:21:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-14 18:21:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:21:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 18:21:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-14 18:21:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 18:23:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:23:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 18:23:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-14 18:23:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 18:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 18:23:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 18:23:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:23:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:23:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 18:23:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 18:23:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 18:23:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:23:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 18:23:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 18:23:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 18:23:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-14 18:23:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 18:23:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 18:23:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
 
[INFO][2017-07-14 18:23:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:23:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 18:23:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:23:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:2
 
[INFO][2017-07-14 18:23:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:23:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 18:23:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:23:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 18:23:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-14 18:23:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 18:24:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:24:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 18:24:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-14 18:24:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 18:24:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:24:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-14 18:24:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-14 18:24:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[WARN][2017-07-14 18:27:36] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-4 Resolved exception caused by Handler execution: java.lang.NullPointerException 
[INFO][2017-07-14 18:27:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-14 18:27:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1234717263
 
[INFO][2017-07-14 18:27:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 18:27:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:10
参数2:1297
参数3:2
参数4:0
参数5:0
参数6:0
参数7:8
参数8:0
参数9:1
参数10:2
参数11:0.0
参数12:0.1
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:
参数19:4382
参数20:FE8D66CE2E379E1D29A1F0A3405916CB
参数21:4382
 
[INFO][2017-07-14 18:27:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:27:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 18:27:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-14 18:27:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 18:27:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-14 18:27:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:4382
 
[WARN][2017-07-14 18:27:39] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-10 Resolved exception caused by Handler execution: java.lang.NullPointerException 
[INFO][2017-07-14 18:27:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-14 18:27:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:1297
参数3:2
参数4:0
参数5:0
参数6:0
参数7:8
参数8:0
参数9:1
参数10:2
参数11:0.0
参数12:0.1
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:
参数19:
参数20:FE8D66CE2E379E1D29A1F0A3405916CB
参数21:4382
 
[INFO][2017-07-14 18:27:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:27:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 18:27:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-14 18:27:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 18:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 18:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 18:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 18:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 18:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-14 18:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 18:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 18:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
 
[INFO][2017-07-14 18:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-14 18:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:2
 
[INFO][2017-07-14 18:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-14 18:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 18:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1297,1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-14 18:27:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 18:27:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.deleteRecord: 
DELETE FROM cds_stores_goods_list
         WHERE sgl_id = ? 
[INFO][2017-07-14 18:27:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:4382
 
[INFO][2017-07-14 18:27:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:27:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-14 18:27:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:27:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 18:27:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 18:27:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 18:27:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:27:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 18:27:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 18:27:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 18:30:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:30:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 18:30:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:30:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 18:30:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 18:30:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 18:30:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 18:30:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 18:30:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:30:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 18:30:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 18:30:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
 
[INFO][2017-07-14 18:30:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 18:30:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 18:30:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:30:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-14 18:30:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:30:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:10
参数2:2
 
[INFO][2017-07-14 18:30:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:30:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-14 18:30:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:30:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 18:30:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 18:30:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 18:31:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:31:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:31:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:31:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:31:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 18:31:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 18:31:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 18:31:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 18:31:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:31:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 18:31:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 18:31:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
 
[INFO][2017-07-14 18:31:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 18:31:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 18:31:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:31:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 18:31:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:31:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-14 18:31:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:31:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:2
 
[INFO][2017-07-14 18:31:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:31:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 18:31:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 18:31:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 18:32:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:32:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 18:32:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:32:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 18:32:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 18:32:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 18:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 18:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-14 18:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 18:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 18:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 18:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
 
[INFO][2017-07-14 18:32:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 18:32:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:32:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-14 18:32:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:32:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:10
参数2:2
 
[INFO][2017-07-14 18:32:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:32:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-14 18:32:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:32:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 18:32:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 18:32:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 18:41:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:41:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 18:41:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:41:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 18:41:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 18:41:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 18:41:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 18:41:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 18:41:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:41:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 18:41:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 18:41:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 18:41:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 18:41:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
 
[INFO][2017-07-14 18:41:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:41:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 18:41:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:41:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:10
参数2:2
 
[INFO][2017-07-14 18:41:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:41:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-14 18:41:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:41:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 18:41:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 18:41:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 18:46:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:46:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 18:46:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:46:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 18:46:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 18:46:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-14 18:46:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 18:46:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 18:46:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:46:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 18:46:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 18:46:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 18:46:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 18:46:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
 
[INFO][2017-07-14 18:46:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:46:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-14 18:46:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:46:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:2
 
[INFO][2017-07-14 18:46:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:46:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 18:46:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:46:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-14 18:46:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 18:46:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-14 18:47:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:47:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 18:47:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:47:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 18:47:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 18:47:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 18:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 18:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 18:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 18:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 18:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 18:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 18:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
 
[INFO][2017-07-14 18:48:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:48:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 18:48:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:48:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-14 18:48:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:48:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-14 18:48:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:48:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 18:48:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 18:48:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 18:53:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:53:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 18:53:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:53:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 18:53:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 18:53:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-14 18:53:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 18:53:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 18:53:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:53:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 18:53:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 18:53:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 18:53:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 18:53:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
 
[INFO][2017-07-14 18:53:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:53:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 18:53:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:53:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:10
参数2:2
 
[INFO][2017-07-14 18:53:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:53:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 18:54:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:54:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 18:54:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 18:54:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 18:54:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-14 18:54:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:1297
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:0.1
参数13:份
参数14:0
参数15:null
参数16:999
参数17:26
参数18:null
参数19:null
参数20:null
 
[INFO][2017-07-14 18:54:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-14 18:54:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:1302
参数3:2
参数4:0
参数5:0
参数6:449
参数7:450
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:5.9
参数13:份
参数14:0
参数15:null
参数16:999
参数17:26
参数18:null
参数19:null
参数20:null
 
[INFO][2017-07-14 18:54:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:54:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:2
 
[INFO][2017-07-14 18:54:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:54:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-14 18:54:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 18:54:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-14 18:54:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.deleteRecord: 
DELETE FROM cds_stores_goods_list
         WHERE sgl_id = ? 
[INFO][2017-07-14 18:54:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:4389
 
[INFO][2017-07-14 18:54:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:54:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:2
 
[INFO][2017-07-14 18:54:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:54:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 18:54:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-14 18:54:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 18:54:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.deleteRecord: 
DELETE FROM cds_stores_goods_list
         WHERE sgl_id = ? 
[INFO][2017-07-14 18:54:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:4390
 
[INFO][2017-07-14 18:54:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:54:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:2
 
[INFO][2017-07-14 18:54:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:54:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 18:54:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 18:54:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 18:57:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:57:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 18:57:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 18:57:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 18:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 18:59:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 18:59:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 18:59:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 18:59:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 18:59:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 18:59:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 18:59:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 18:59:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 18:59:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 18:59:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 18:59:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 18:59:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
 
[INFO][2017-07-14 18:59:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:59:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 18:59:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 18:59:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:2
 
[INFO][2017-07-14 18:59:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 18:59:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 18:59:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 18:59:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 18:59:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 18:59:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 19:00:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:00:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 19:00:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:00:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 19:00:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 19:00:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 19:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 19:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 19:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 19:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 19:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 19:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-14 19:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 19:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
 
[INFO][2017-07-14 19:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-14 19:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 19:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:10
参数2:2
 
[INFO][2017-07-14 19:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 19:00:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 19:00:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 19:00:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 19:00:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 19:01:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:01:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 19:01:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:01:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 19:01:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 19:01:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 19:01:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 19:01:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 19:01:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 19:01:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-14 19:01:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 19:01:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-14 19:01:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 19:01:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
 
[INFO][2017-07-14 19:01:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:01:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 19:01:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 19:01:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:2
 
[INFO][2017-07-14 19:01:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:01:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-14 19:01:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 19:01:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 19:01:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 19:01:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 19:02:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 19:02:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 19:02:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 19:02:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 19:02:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:02:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 19:02:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:02:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 19:02:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 19:02:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-14 19:02:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 19:02:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 19:02:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 19:02:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-14 19:02:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 19:02:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-14 19:02:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 19:02:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
 
[INFO][2017-07-14 19:02:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:02:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 19:02:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:02:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-14 19:02:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 19:02:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:2
 
[INFO][2017-07-14 19:02:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 19:02:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 19:02:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 19:02:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 19:04:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:04:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 19:04:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:04:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 19:04:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 19:04:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-14 19:04:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 19:04:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 19:04:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 19:04:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 19:04:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 19:04:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 19:04:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 19:04:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
 
[INFO][2017-07-14 19:04:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:04:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 19:04:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 19:04:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:2
 
[INFO][2017-07-14 19:04:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:04:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-14 19:04:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 19:04:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 19:04:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 19:04:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 19:04:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:04:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 19:04:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:04:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 19:04:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 19:04:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-14 19:04:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 19:04:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-14 19:04:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 19:04:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 19:04:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-14 19:04:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-14 19:04:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 19:04:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
 
[INFO][2017-07-14 19:04:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:04:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 19:04:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 19:04:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:2
 
[INFO][2017-07-14 19:04:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:04:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 19:04:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-14 19:04:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 19:04:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-14 19:04:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-14 19:05:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-14 19:05:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:1297
参数3:2
参数4:0
参数5:0
参数6:449
参数7:450
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:0.1
参数13:份
参数14:0
参数15:null
参数16:999
参数17:26
参数18:null
参数19:null
参数20:null
 
[INFO][2017-07-14 19:05:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-14 19:05:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:1302
参数3:2
参数4:0
参数5:0
参数6:449
参数7:450
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:5.9
参数13:份
参数14:0
参数15:null
参数16:999
参数17:26
参数18:null
参数19:null
参数20:null
 
[INFO][2017-07-14 19:05:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 19:05:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:10
参数2:2
 
[INFO][2017-07-14 19:05:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 19:05:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 19:05:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 19:05:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 19:08:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:08:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 19:08:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:08:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 19:08:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 19:08:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-14 19:08:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 19:08:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-14 19:08:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 19:08:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 19:08:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 19:08:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-14 19:08:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 19:08:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
 
[INFO][2017-07-14 19:08:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:08:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-14 19:08:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 19:08:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:10
参数2:2
 
[INFO][2017-07-14 19:08:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:08:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-14 19:08:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:08:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 19:08:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:08:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 19:08:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 19:08:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-14 19:08:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 19:08:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-14 19:08:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 19:08:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 19:08:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 19:08:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-14 19:08:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 19:08:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
 
[INFO][2017-07-14 19:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-14 19:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-14 19:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 19:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:2
 
[INFO][2017-07-14 19:09:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:09:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 19:09:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-14 19:09:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 19:09:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-14 19:09:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-14 19:09:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-14 19:09:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-14 19:09:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-14 19:09:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 19:09:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-14 19:09:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
 
[INFO][2017-07-14 19:09:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-14 19:09:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-14 19:09:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:09:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-14 19:09:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-14 19:09:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-14 19:09:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-14 19:09:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:2
 
[INFO][2017-07-14 19:11:55] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing WebApplicationContext for namespace 'core-controller-servlet': startup date [Fri Jul 14 14:35:24 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-14 19:11:55] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-14 19:11:55] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:203) localhost-startStop-2 Shutting down ExecutorService 'taskExecutor' 
[INFO][2017-07-14 19:11:55] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing Root WebApplicationContext: startup date [Fri Jul 14 14:35:21 CST 2017]; root of context hierarchy 
[INFO][2017-07-14 19:11:55] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 09:22:46] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:305) RMI TCP Connection(2)-127.0.0.1 Root WebApplicationContext: initialization started 
[INFO][2017-07-15 09:22:47] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(2)-127.0.0.1 Refreshing Root WebApplicationContext: startup date [Sat Jul 15 09:22:47 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 09:22:47] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(2)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/datasource-configurer.xml] 
[INFO][2017-07-15 09:22:47] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(2)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/ActiveMQ.xml] 
[INFO][2017-07-15 09:22:47] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(2)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/redis.xml] 
[INFO][2017-07-15 09:22:47] org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:172) RMI TCP Connection(2)-127.0.0.1 Loading properties file from ServletContext resource [/WEB-INF/jdbc_sqlserver.properties] 
[INFO][2017-07-15 09:22:50] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(2)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 09:22:50] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:345) RMI TCP Connection(2)-127.0.0.1 Root WebApplicationContext: initialization completed in 3704 ms 
[INFO][2017-07-15 09:22:50] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:489) RMI TCP Connection(2)-127.0.0.1 FrameworkServlet 'core-controller': initialization started 
[INFO][2017-07-15 09:22:50] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(2)-127.0.0.1 Refreshing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 09:22:50 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 09:22:50] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(2)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/core-controller-servlet.xml] 
[INFO][2017-07-15 09:22:53] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:165) RMI TCP Connection(2)-127.0.0.1 Initializing ExecutorService  'taskExecutor' 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/CdsOutside]}" onto public java.util.Map com.controller.ApiServerController.CdsOutside(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveElemeOrder]}" onto public java.lang.String com.controller.ApiServerController.ReceiveElemeOrder(com.opensdk.eleme.vo.MessageParam) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderPay() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderConfrim]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderConfrim() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderFulfillment]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderFulfillment() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderCancel]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderCancel() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrdersendstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrdersendstatus() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack2]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack2() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderSettlement]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderSettlement() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderShopstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderShopstatus() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveBaiduOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveBaiduOrderPay(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/print],methods=[GET]}" onto public java.lang.String com.controller.ClientController.print() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/comment],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/home],methods=[GET]}" onto public java.lang.String com.controller.ClientController.home(org.springframework.ui.Model) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/doorderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.doorderlist() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/business_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.business_data() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/good_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_data() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/good_analyse],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_analyse() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/report1],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report1() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/report2],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report2() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/comment_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment_data() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/member_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.member_data() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/pack_job],methods=[GET]}" onto public java.lang.String com.controller.ClientController.pack_job() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlist() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlisthistory() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/all_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlist() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/shop_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlist() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/all_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlisthistory() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/shop_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlisthistory() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/cf_meal_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_meal_set() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/business],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.business() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/cf_task_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_task_set() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/erp],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.erp() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/goodsManage],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.goodsManage() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/GetPrintList],methods=[POST]}" onto public void com.controller.ClientSetController.print_set(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/print_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.print_set() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/GetElectronicScaleList],methods=[POST]}" onto public void com.controller.ClientSetController.GetElectronicScaleList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/saveElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveElectronicScale(com.framework.mapping.system.CdsElectronicScale,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/destroyElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyElectronicScale(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/electronicScaleToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.electronicScaleToggle(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/savePrint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePrint(com.framework.mapping.system.CdsPrints,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/destroyprint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyprint(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/toggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.toggle(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/scanner_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.scanner_set() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/GetScannerList],methods=[POST]}" onto public void com.controller.ClientSetController.GetScannerList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/saveScenner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveScenner(com.framework.mapping.system.CdsScanner,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/destroyScanner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyScanner(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/scnnerToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.scnnerToggle(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/electronic_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.electronic_set() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/dianwoda_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.dianwoda_set() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/GetDianwodaList],methods=[POST]}" onto public void com.controller.ClientSetController.GetDianwodaList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/saveDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveDianwoda(com.framework.mapping.system.CdsDianwodaPhone,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/destroyDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyDianwoda(com.framework.mapping.system.CdsDianwodaPhone) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/password_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.password_set() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/savePassword],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePassword(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/giftlist],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.giftlist() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Code/index]}" onto public void com.controller.CodeController.index(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus_bak]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus_bak() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/index],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.index() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/getUserName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.getUserName(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/updateErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErp(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/saveMsGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveMsGoods(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/GetErpGoodsLists],methods=[POST]}" onto public void com.controller.ErpGoodsController.GetErpGoodsLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveErp(java.util.HashMap,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/userIndex],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.userIndex(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/getUserList],methods=[POST]}" onto public void com.controller.ErpGoodsController.getUserList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/updateErpCount],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErpCount(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/index],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.index() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/checkName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.checkName(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsClassLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsClassLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveErp(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo2(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsInfo(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/getSigna],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.getSigna() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsClass(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/classIndex],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.classIndex() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoErp],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetErpInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/getPicAddress],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.getPicAddress(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetBrandTree() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/userExitOut]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.userExitOut() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/userLoginVerify]}" onto public java.lang.String com.controller.LoginController.userLoginVerify(com.framework.mapping.system.CdsUsers,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/adminLoginVerify]}" onto public java.lang.String com.controller.LoginController.adminLoginVerify(com.framework.mapping.system.SysUser,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/isLogon]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.isLogon() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/LoginVerify]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.LoginVerify(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/userLogin]}" onto public java.lang.String com.controller.LoginController.userLogin() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/adminLogin]}" onto public java.lang.String com.controller.LoginController.adminLogin() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/userLoginOut]}" onto public java.lang.String com.controller.LoginController.userLoginOut() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/main/index],methods=[GET]}" onto public java.lang.String com.controller.MainController.index() 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresGoodsList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetStoresGoodsList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/updateStoresGoods],methods=[POST]}" onto public void com.controller.PtGoodManageController.updateStoresGoods(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetGoodsClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindUpdate],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindUpdate(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindQuery(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindDelete],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindDelete(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/meituanClassQuery],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.meituanClassQuery(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassRemoveBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassRemoveBind(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getStoresGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getStoresGoodsClass(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.eleClassGoodsQuery(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.mtClassGoodsQuery(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetBrandTree(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetStoresTree() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetGoodsTree() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/queryGoods],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.queryGoods() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/saveStoresClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveStoresClass(java.util.HashMap) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/elemClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteMT(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindMT(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemClassList],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getElemClassList(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteElem(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindElem(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBind(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/sellStatus],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.sellStatus(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteClass(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getGood_ids],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getGood_ids(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getCombobox],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getCombobox(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/saveGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveGoods(java.util.HashMap) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteGoods(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/indexPt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexPt(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/indexElem],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexElem(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getElemGood(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/elemBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleUpdateFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleUpdateFood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleDeleteFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleDeleteFood(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/indexMt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexMt(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtDeleteGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtDeleteGood(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getMtGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getMtGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBindMt],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBindMt(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/stores_grid],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_grid() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/validateStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.validateStores(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/GetStoresList],methods=[POST]}" onto public void com.controller.StoresController.GetStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresGoodsManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresGoodsManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresGoodsManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresManageController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:54] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/test],methods=[GET]}" onto public java.lang.String com.controller.TestController.test(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/orderTest],methods=[GET]}" onto public java.util.Map com.controller.TestController.orderTest(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/orderTest2],methods=[GET]}" onto public java.lang.String com.controller.TestController.orderTest2(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/test2],methods=[GET]}" onto public java.lang.String com.controller.TestController.test2(int) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/ordermessage],methods=[GET]}" onto public java.lang.String com.controller.TestController.ordermessage(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/sendCode],methods=[GET]}" onto public java.lang.String com.controller.TestController.sendCode() throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/test3],methods=[GET]}" onto public java.lang.String com.controller.TestController.test3(java.lang.String,int) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/order],methods=[GET]}" onto public java.lang.String com.controller.TestController.test4(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Udesk/orderlist],methods=[GET]}" onto public java.lang.String com.controller.UdeskController.doorderlist(javax.servlet.http.HttpServletRequest) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/doningTaskRecord]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.doningTaskRecord(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/taskGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_add(java.util.HashMap) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/do_task_Record]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.do_task_Record(java.util.HashMap) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/storesGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_add(java.util.HashMap) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/chufanMealList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.chufanMealList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/orderlist],methods=[POST]}" onto public void com.api.GiftController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/orderlisthistory],methods=[POST]}" onto public void com.api.GiftController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/getTreeGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getGoods() 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/giftlist],methods=[POST]}" onto public void com.api.GiftController.giftlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/orderInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.orderInfo(com.framework.mapping.system.CdsOrderInfo) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/viewgiftlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.viewgiftlog(java.lang.String) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/getTableGoods],methods=[GET]}" onto public void com.api.GiftController.getTableGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/getBrandClass],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getBrandClass(com.framework.mapping.system.CdsClass) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.saveGift(java.lang.String,com.framework.mapping.system.CdsGiftRegisterList) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodAPI/getReportAnalyse],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.getReportAnalyse(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodAPI/goodReport],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.goodReport(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/homeApi/viewData],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.HomeController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/updateChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/updateChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addErpGoodsToGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoodsToGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getMealErpInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getMealErpInfo(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getStoresInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getStoresInfo() throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChufangTask(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getChuErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChuErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMealErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/delMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delMealErpGoods(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addMaterial],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMaterial(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/updateErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/saleSync],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.saleSync(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getGoodsInfo() throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoodsInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/delErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delErpGoodsInfo(com.framework.mapping.system.CdsErpGoodList) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/updateGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/business/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.businessMg(java.lang.String,com.framework.mapping.system.CdsBusinessUnit) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/userAndShop/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.usersMg(java.lang.String,java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlist],methods=[POST]}" onto public void com.api.OrderController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlisthistory],methods=[POST]}" onto public void com.api.OrderController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistorysendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistorysendlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistoryorderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistoryorderlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/printOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/sendShOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendShOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelorder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelorder(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelDwdsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelDwdsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelShsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelShsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/vieworderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.vieworderlog(java.lang.String) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/viewsendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewsendlog(java.lang.String) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/sendDwdOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendDwdOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/loginVerify],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.LoginVerify(com.framework.mapping.system.CdsStoresLogin) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/orderlist],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderList(java.util.HashMap) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/getOrderInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderInfo(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/optOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.optOrder(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/packJob],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.packJob(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/printAPI/printrEmedy],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrEmedy(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/printAPI/getConfigInfo],methods=[POST]}" onto public java.lang.String com.api.PrintController.getConfigInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/printAPI/printrSuccess],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrSuccess(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ReportAPI/report1],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report1(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ReportAPI/report2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report2(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:22:55] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/udeskAPI/orderlist],methods=[POST]}" onto public void com.api.UdeskAPIController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:22:56] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.initControllerAdviceCache(RequestMappingHandlerAdapter.java:534) RMI TCP Connection(2)-127.0.0.1 Looking for @ControllerAdvice: WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 09:22:50 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 09:22:56] org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:354) RMI TCP Connection(2)-127.0.0.1 Mapped URL path [/**] onto handler 'org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler#0' 
[INFO][2017-07-15 09:22:57] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(2)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 09:22:57] org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:311) RMI TCP Connection(2)-127.0.0.1 Established shared JMS Connection: ActiveMQConnection {id=ID:QH-20161019UENF-50960-1500081777277-1:1,clientId=null,started=false} 
[INFO][2017-07-15 09:22:57] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1040) ActiveMQ Task-1 Successfully connected to tcp://127.0.0.1:61616 
[INFO][2017-07-15 09:22:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) RMI TCP Connection(2)-127.0.0.1 sys_dict.getRecord: 
select * from cds_options where option_name=? 
[INFO][2017-07-15 09:22:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) RMI TCP Connection(2)-127.0.0.1 参数1:site_options
 
[INFO][2017-07-15 09:22:58] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:508) RMI TCP Connection(2)-127.0.0.1 FrameworkServlet 'core-controller': initialization completed in 7947 ms 
[INFO][2017-07-15 09:27:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-15 09:27:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:chenbin
 
[INFO][2017-07-15 09:27:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:27:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:351
参数2:1032
 
[INFO][2017-07-15 09:27:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:27:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:352
参数2:1032
 
[INFO][2017-07-15 09:27:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:27:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:376
参数2:1032
 
[INFO][2017-07-15 09:27:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:27:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:378
参数2:1032
 
[INFO][2017-07-15 09:27:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:27:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:382
参数2:1032
 
[INFO][2017-07-15 09:27:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:27:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:383
参数2:1032
 
[INFO][2017-07-15 09:27:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:27:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:353
参数2:1032
 
[INFO][2017-07-15 09:27:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:27:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:372
参数2:1032
 
[INFO][2017-07-15 09:27:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:27:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:354
参数2:1032
 
[INFO][2017-07-15 09:27:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:27:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:355
参数2:1032
 
[INFO][2017-07-15 09:27:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:27:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:356
参数2:1032
 
[INFO][2017-07-15 09:27:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-15 09:27:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:9
 
[INFO][2017-07-15 09:27:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-15 09:27:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:9
参数2:2017-07-15
参数3:2017-07-15
参数4:9
参数5:2017-07-15
参数6:2017-07-15
参数7:9
参数8:2017-07-15
参数9:2017-07-15
参数10:9
参数11:2017-07-15
参数12:2017-07-15
参数13:9
参数14:2017-07-15
参数15:2017-07-15
参数16:9
参数17:2017-07-15
参数18:2017-07-15
 
[INFO][2017-07-15 09:27:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-15 09:27:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2017-07-15
参数2:2017-07-15
参数3:9
参数4:2017-07-14
参数5:2017-07-14
参数6:9
参数7:2017-07-08
参数8:2017-07-08
参数9:9
 
[INFO][2017-07-15 09:27:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:27:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 09:27:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:27:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 09:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 09:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 09:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 09:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 09:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 09:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:1
 
[INFO][2017-07-15 09:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 09:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:27:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 09:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 09:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:1
 
[INFO][2017-07-15 09:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 09:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 09:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 09:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
 
[INFO][2017-07-15 09:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 09:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 09:27:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:3
 
[INFO][2017-07-15 09:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 09:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 09:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 09:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 09:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 09:28:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:28:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 09:28:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:28:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 09:28:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:28:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 09:28:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 09:28:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 09:28:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 09:28:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 09:28:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 09:28:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 09:28:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 09:28:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:26
 
[INFO][2017-07-15 09:28:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:28:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
 
[INFO][2017-07-15 09:28:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 09:28:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-15 09:28:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:28:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:2
 
[INFO][2017-07-15 09:37:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:37:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 09:37:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:37:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 09:37:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:37:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 09:37:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 09:37:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-15 09:37:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 09:37:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 09:37:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 09:37:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 09:37:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 09:37:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:26
 
[INFO][2017-07-15 09:37:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:37:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
 
[INFO][2017-07-15 09:37:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 09:37:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:10
参数2:2
 
[INFO][2017-07-15 09:37:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:37:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
 
[INFO][2017-07-15 09:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_area
             


         WHERE parentid = ? 
         
            ORDER BY id 
[INFO][2017-07-15 09:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:9001
 
[INFO][2017-07-15 09:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE city = ? 
         
            ORDER BY stores_id 
[INFO][2017-07-15 09:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:9001
 
[INFO][2017-07-15 09:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 09:48:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_stores.getStoresBrand: 
select count(0) from (select * from cds_stores_brand)  tmp_count 
[INFO][2017-07-15 09:48:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 09:48:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_stores.getStoresBrand: 
select tmp.* from (select (row_number() Over(order by stores_brand_id asc)) as rownumber, * from cds_stores_brand) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 09:48:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 09:48:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:48:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 09:48:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:48:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:1
 
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:1
 
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 09:48:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
 
[INFO][2017-07-15 09:48:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:48:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 09:48:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:48:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 09:48:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 09:48:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:3
 
[INFO][2017-07-15 09:48:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:48:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 09:48:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 09:48:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 09:48:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 09:48:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 09:48:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:48:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 09:48:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:48:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 09:48:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:48:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 09:48:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 09:48:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
参数2:12
 
[INFO][2017-07-15 09:48:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 09:48:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:12
 
[INFO][2017-07-15 09:48:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 09:48:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:12
 
[INFO][2017-07-15 09:48:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 09:48:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:27
 
[INFO][2017-07-15 09:48:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:48:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 09:48:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:48:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 09:48:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:48:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 09:48:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 09:48:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 09:48:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 09:48:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 09:48:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 09:48:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 09:48:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 09:48:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:26
 
[INFO][2017-07-15 09:48:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:48:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
 
[INFO][2017-07-15 09:48:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:48:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
 
[INFO][2017-07-15 09:48:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 09:48:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:10
参数2:2
 
[INFO][2017-07-15 09:53:03] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 09:22:50 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 09:53:03] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 09:53:04] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:203) localhost-startStop-2 Shutting down ExecutorService 'taskExecutor' 
[INFO][2017-07-15 09:53:05] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing Root WebApplicationContext: startup date [Sat Jul 15 09:22:47 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 09:53:05] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 09:53:18] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:305) RMI TCP Connection(5)-127.0.0.1 Root WebApplicationContext: initialization started 
[INFO][2017-07-15 09:53:18] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(5)-127.0.0.1 Refreshing Root WebApplicationContext: startup date [Sat Jul 15 09:53:18 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 09:53:18] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(5)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/datasource-configurer.xml] 
[INFO][2017-07-15 09:53:19] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(5)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/ActiveMQ.xml] 
[INFO][2017-07-15 09:53:19] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(5)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/redis.xml] 
[INFO][2017-07-15 09:53:19] org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:172) RMI TCP Connection(5)-127.0.0.1 Loading properties file from ServletContext resource [/WEB-INF/jdbc_sqlserver.properties] 
[INFO][2017-07-15 09:53:21] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(5)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 09:53:21] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:345) RMI TCP Connection(5)-127.0.0.1 Root WebApplicationContext: initialization completed in 2689 ms 
[INFO][2017-07-15 09:53:21] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:489) RMI TCP Connection(5)-127.0.0.1 FrameworkServlet 'core-controller': initialization started 
[INFO][2017-07-15 09:53:21] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(5)-127.0.0.1 Refreshing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 09:53:21 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 09:53:21] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(5)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/core-controller-servlet.xml] 
[INFO][2017-07-15 09:53:23] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:165) RMI TCP Connection(5)-127.0.0.1 Initializing ExecutorService  'taskExecutor' 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ApiServer/ReceiveElemeOrder]}" onto public java.lang.String com.controller.ApiServerController.ReceiveElemeOrder(com.opensdk.eleme.vo.MessageParam) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderPay() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderConfrim]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderConfrim() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderFulfillment]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderFulfillment() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderCancel]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderCancel() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrdersendstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrdersendstatus() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack2]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack2() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderSettlement]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderSettlement() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderShopstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderShopstatus() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ApiServer/ReceiveBaiduOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveBaiduOrderPay(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ApiServer/CdsOutside]}" onto public java.util.Map com.controller.ApiServerController.CdsOutside(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/print],methods=[GET]}" onto public java.lang.String com.controller.ClientController.print() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/comment],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/all_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlisthistory() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/shop_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlisthistory() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/home],methods=[GET]}" onto public java.lang.String com.controller.ClientController.home(org.springframework.ui.Model) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/doorderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.doorderlist() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/business_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.business_data() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/good_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_data() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/good_analyse],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_analyse() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/report1],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report1() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/report2],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report2() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/comment_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment_data() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/member_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.member_data() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/pack_job],methods=[GET]}" onto public java.lang.String com.controller.ClientController.pack_job() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlist() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlisthistory() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/all_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlist() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Client/shop_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlist() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/GetElectronicScaleList],methods=[POST]}" onto public void com.controller.ClientSetController.GetElectronicScaleList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/saveElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveElectronicScale(com.framework.mapping.system.CdsElectronicScale,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/destroyElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyElectronicScale(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/electronicScaleToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.electronicScaleToggle(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/cf_meal_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_meal_set() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/scanner_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.scanner_set() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/business],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.business() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/goodsManage],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.goodsManage() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/erp],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.erp() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/cf_task_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_task_set() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/toggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.toggle(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/destroyprint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyprint(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/savePrint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePrint(com.framework.mapping.system.CdsPrints,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/GetScannerList],methods=[POST]}" onto public void com.controller.ClientSetController.GetScannerList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/print_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.print_set() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/GetPrintList],methods=[POST]}" onto public void com.controller.ClientSetController.print_set(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/saveScenner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveScenner(com.framework.mapping.system.CdsScanner,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/destroyScanner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyScanner(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/scnnerToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.scnnerToggle(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/electronic_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.electronic_set() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/dianwoda_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.dianwoda_set() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/GetDianwodaList],methods=[POST]}" onto public void com.controller.ClientSetController.GetDianwodaList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/saveDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveDianwoda(com.framework.mapping.system.CdsDianwodaPhone,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/destroyDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyDianwoda(com.framework.mapping.system.CdsDianwodaPhone) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/password_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.password_set() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/savePassword],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePassword(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ClientSet/giftlist],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.giftlist() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Code/index]}" onto public void com.controller.CodeController.index(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus_bak]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus_bak() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/MsGoods/index],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.index() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/MsGoods/getUserName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.getUserName(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/MsGoods/updateErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErp(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/MsGoods/saveMsGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveMsGoods(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/MsGoods/GetErpGoodsLists],methods=[POST]}" onto public void com.controller.ErpGoodsController.GetErpGoodsLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/MsGoods/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveErp(java.util.HashMap,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/MsGoods/userIndex],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.userIndex(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/MsGoods/getUserList],methods=[POST]}" onto public void com.controller.ErpGoodsController.getUserList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/MsGoods/updateErpCount],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErpCount(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodsInfo/index],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.index() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodsInfo/checkName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.checkName(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsClassLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsClassLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodsInfo/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveErp(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo2(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsInfo(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodsInfo/getSigna],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.getSigna() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsClass(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodsInfo/classIndex],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.classIndex() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoErp],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetErpInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodsInfo/getPicAddress],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.getPicAddress(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodsInfo/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetBrandTree() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/login/userExitOut]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.userExitOut() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/login/userLoginVerify]}" onto public java.lang.String com.controller.LoginController.userLoginVerify(com.framework.mapping.system.CdsUsers,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/login/adminLoginVerify]}" onto public java.lang.String com.controller.LoginController.adminLoginVerify(com.framework.mapping.system.SysUser,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/login/isLogon]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.isLogon() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/login/LoginVerify]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.LoginVerify(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/login/userLogin]}" onto public java.lang.String com.controller.LoginController.userLogin() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/login/adminLogin]}" onto public java.lang.String com.controller.LoginController.adminLogin() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/login/userLoginOut]}" onto public java.lang.String com.controller.LoginController.userLoginOut() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/main/index],methods=[GET]}" onto public java.lang.String com.controller.MainController.index() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresGoodsList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetStoresGoodsList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/updateStoresGoods],methods=[POST]}" onto public void com.controller.PtGoodManageController.updateStoresGoods(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetGoodsClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindUpdate],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindUpdate(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindQuery(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindDelete],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindDelete(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/meituanClassQuery],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.meituanClassQuery(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassRemoveBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassRemoveBind(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/getStoresGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getStoresGoodsClass(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/eleClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.eleClassGoodsQuery(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.mtClassGoodsQuery(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetBrandTree(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetStoresTree() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetGoodsTree() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/queryGoods],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.queryGoods() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/GetClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/saveStoresClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveStoresClass(java.util.HashMap) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/elemClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteMT(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindMT(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemClassList],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getElemClassList(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteElem(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindElem(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBind(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/sellStatus],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.sellStatus(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteClass(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/getGood_ids],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getGood_ids(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/getCombobox],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getCombobox(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/saveGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveGoods(java.util.HashMap) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteGoods(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/indexPt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexPt(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/indexElem],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexElem(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getElemGood(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/elemBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/getGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/eleUpdateFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleUpdateFood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/eleDeleteFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleDeleteFood(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/indexMt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexMt(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/mtBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/mtDeleteGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtDeleteGood(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/getMtGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getMtGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBindMt],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBindMt(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/validateStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.validateStores(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/GetStoresList],methods=[POST]}" onto public void com.controller.StoresController.GetStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/stores_grid],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_grid() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Stores/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresGoodsManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresGoodsManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresGoodsManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresManageController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/StoresManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Test/test],methods=[GET]}" onto public java.lang.String com.controller.TestController.test(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Test/orderTest],methods=[GET]}" onto public java.util.Map com.controller.TestController.orderTest(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Test/orderTest2],methods=[GET]}" onto public java.lang.String com.controller.TestController.orderTest2(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Test/test2],methods=[GET]}" onto public java.lang.String com.controller.TestController.test2(int) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Test/ordermessage],methods=[GET]}" onto public java.lang.String com.controller.TestController.ordermessage(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Test/sendCode],methods=[GET]}" onto public java.lang.String com.controller.TestController.sendCode() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Test/test3],methods=[GET]}" onto public java.lang.String com.controller.TestController.test3(java.lang.String,int) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Test/order],methods=[GET]}" onto public java.lang.String com.controller.TestController.test4(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/Udesk/orderlist],methods=[GET]}" onto public java.lang.String com.controller.UdeskController.doorderlist(javax.servlet.http.HttpServletRequest) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanTask/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanTask/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanTask/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanTask/doningTaskRecord]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.doningTaskRecord(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanTask/taskGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanTask/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_add(java.util.HashMap) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanTask/do_task_Record]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.do_task_Record(java.util.HashMap) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanTask/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanTask/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanTask/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanTask/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanXiada/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanXiada/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanXiada/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanXiada/storesGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanXiada/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_add(java.util.HashMap) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanXiada/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanXiada/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanXiada/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanXiada/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ChufanXiada/chufanMealList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.chufanMealList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GiftApi/getTreeGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getGoods() 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GiftApi/orderlist],methods=[POST]}" onto public void com.api.GiftController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GiftApi/orderlisthistory],methods=[POST]}" onto public void com.api.GiftController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GiftApi/giftlist],methods=[POST]}" onto public void com.api.GiftController.giftlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GiftApi/orderInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.orderInfo(com.framework.mapping.system.CdsOrderInfo) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GiftApi/viewgiftlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.viewgiftlog(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GiftApi/getTableGoods],methods=[GET]}" onto public void com.api.GiftController.getTableGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GiftApi/getBrandClass],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getBrandClass(com.framework.mapping.system.CdsClass) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GiftApi/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.saveGift(java.lang.String,com.framework.mapping.system.CdsGiftRegisterList) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodAPI/getReportAnalyse],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.getReportAnalyse(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/GoodAPI/goodReport],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.goodReport(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/homeApi/viewData],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.HomeController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/updateChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/updateChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/addErpGoodsToGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoodsToGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/getMealErpInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getMealErpInfo(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/addChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/getStoresInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getStoresInfo() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/getChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChufangTask(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/getChuErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChuErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/addChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/addMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMealErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/delMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delMealErpGoods(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/getErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/addErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/addMaterial],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMaterial(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/updateErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/saleSync],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.saleSync(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/getGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getGoodsInfo() throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/getErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoodsInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/delErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delErpGoodsInfo(com.framework.mapping.system.CdsErpGoodList) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/addGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/updateGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/business/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.businessMg(java.lang.String,com.framework.mapping.system.CdsBusinessUnit) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ErpApi/userAndShop/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.usersMg(java.lang.String,java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistorysendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistorysendlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistoryorderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistoryorderlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlist],methods=[POST]}" onto public void com.api.OrderController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlisthistory],methods=[POST]}" onto public void com.api.OrderController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/orderSelectAPI/printOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/orderSelectAPI/sendShOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendShOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelorder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelorder(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelDwdsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelDwdsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelShsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelShsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/orderSelectAPI/vieworderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.vieworderlog(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/orderSelectAPI/viewsendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewsendlog(java.lang.String) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/orderSelectAPI/sendDwdOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendDwdOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/packApi/loginVerify],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.LoginVerify(com.framework.mapping.system.CdsStoresLogin) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/packApi/orderlist],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderList(java.util.HashMap) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/packApi/getOrderInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderInfo(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/packApi/optOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.optOrder(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/packApi/packJob],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.packJob(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/printAPI/printrEmedy],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrEmedy(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/printAPI/getConfigInfo],methods=[POST]}" onto public java.lang.String com.api.PrintController.getConfigInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/printAPI/printrSuccess],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrSuccess(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ReportAPI/report1],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report1(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/ReportAPI/report2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report2(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 09:53:24] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(5)-127.0.0.1 Mapped "{[/udeskAPI/orderlist],methods=[POST]}" onto public void com.api.UdeskAPIController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 09:53:25] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.initControllerAdviceCache(RequestMappingHandlerAdapter.java:534) RMI TCP Connection(5)-127.0.0.1 Looking for @ControllerAdvice: WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 09:53:21 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 09:53:25] org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:354) RMI TCP Connection(5)-127.0.0.1 Mapped URL path [/**] onto handler 'org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler#0' 
[INFO][2017-07-15 09:53:25] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(5)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 09:53:26] org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:311) RMI TCP Connection(5)-127.0.0.1 Established shared JMS Connection: ActiveMQConnection {id=ID:QH-20161019UENF-51999-1500083606004-1:1,clientId=null,started=false} 
[INFO][2017-07-15 09:53:26] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1040) ActiveMQ Task-1 Successfully connected to tcp://127.0.0.1:61616 
[INFO][2017-07-15 09:53:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) RMI TCP Connection(5)-127.0.0.1 sys_dict.getRecord: 
select * from cds_options where option_name=? 
[INFO][2017-07-15 09:53:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) RMI TCP Connection(5)-127.0.0.1 参数1:site_options
 
[INFO][2017-07-15 09:53:26] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:508) RMI TCP Connection(5)-127.0.0.1 FrameworkServlet 'core-controller': initialization completed in 5338 ms 
[INFO][2017-07-15 09:54:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-15 09:54:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:chenbin
 
[INFO][2017-07-15 09:54:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:351
参数2:1032
 
[INFO][2017-07-15 09:54:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:352
参数2:1032
 
[INFO][2017-07-15 09:54:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:376
参数2:1032
 
[INFO][2017-07-15 09:54:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:378
参数2:1032
 
[INFO][2017-07-15 09:54:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:382
参数2:1032
 
[INFO][2017-07-15 09:54:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:383
参数2:1032
 
[INFO][2017-07-15 09:54:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:353
参数2:1032
 
[INFO][2017-07-15 09:54:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:372
参数2:1032
 
[INFO][2017-07-15 09:54:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:354
参数2:1032
 
[INFO][2017-07-15 09:54:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:355
参数2:1032
 
[INFO][2017-07-15 09:54:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:356
参数2:1032
 
[INFO][2017-07-15 09:54:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-15 09:54:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:9
 
[INFO][2017-07-15 09:54:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-15 09:54:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:9
参数2:2017-07-15
参数3:2017-07-15
参数4:9
参数5:2017-07-15
参数6:2017-07-15
参数7:9
参数8:2017-07-15
参数9:2017-07-15
参数10:9
参数11:2017-07-15
参数12:2017-07-15
参数13:9
参数14:2017-07-15
参数15:2017-07-15
参数16:9
参数17:2017-07-15
参数18:2017-07-15
 
[INFO][2017-07-15 09:54:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-15 09:54:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:2017-07-15
参数2:2017-07-15
参数3:9
参数4:2017-07-14
参数5:2017-07-14
参数6:9
参数7:2017-07-08
参数8:2017-07-08
参数9:9
 
[INFO][2017-07-15 09:54:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 09:54:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 09:54:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:54:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 09:54:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 09:54:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 09:54:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 09:54:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:1
 
[INFO][2017-07-15 09:54:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:54:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 09:54:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 09:54:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:54:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 09:54:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 09:54:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:1
 
[INFO][2017-07-15 09:54:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 09:54:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 09:54:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 09:54:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
 
[INFO][2017-07-15 09:54:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:54:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 09:54:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 09:54:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:3
 
[INFO][2017-07-15 09:54:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 09:54:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 09:54:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 09:54:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 09:54:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 09:54:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 09:54:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 09:54:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:54:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 09:54:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 09:54:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 09:54:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 09:54:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 09:54:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 09:54:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 09:54:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 09:54:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:26
 
[INFO][2017-07-15 09:54:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
 
[INFO][2017-07-15 09:54:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 09:54:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:10
参数2:2
 
[INFO][2017-07-15 09:54:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
 
[INFO][2017-07-15 09:54:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-15 09:54:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:chenbin
 
[INFO][2017-07-15 09:54:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:351
参数2:1032
 
[INFO][2017-07-15 09:54:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:352
参数2:1032
 
[INFO][2017-07-15 09:54:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:376
参数2:1032
 
[INFO][2017-07-15 09:54:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:378
参数2:1032
 
[INFO][2017-07-15 09:54:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:382
参数2:1032
 
[INFO][2017-07-15 09:54:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:383
参数2:1032
 
[INFO][2017-07-15 09:54:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:353
参数2:1032
 
[INFO][2017-07-15 09:54:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:372
参数2:1032
 
[INFO][2017-07-15 09:54:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:354
参数2:1032
 
[INFO][2017-07-15 09:54:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:355
参数2:1032
 
[INFO][2017-07-15 09:54:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 09:54:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:356
参数2:1032
 
[INFO][2017-07-15 09:54:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-15 09:54:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
 
[INFO][2017-07-15 09:54:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-15 09:54:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:9
参数2:2017-07-15
参数3:2017-07-15
参数4:9
参数5:2017-07-15
参数6:2017-07-15
参数7:9
参数8:2017-07-15
参数9:2017-07-15
参数10:9
参数11:2017-07-15
参数12:2017-07-15
参数13:9
参数14:2017-07-15
参数15:2017-07-15
参数16:9
参数17:2017-07-15
参数18:2017-07-15
 
[INFO][2017-07-15 09:54:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-15 09:54:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2017-07-15
参数2:2017-07-15
参数3:9
参数4:2017-07-14
参数5:2017-07-14
参数6:9
参数7:2017-07-08
参数8:2017-07-08
参数9:9
 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:3
 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 09:54:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 09:54:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 09:54:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:54:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 09:54:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:54:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 09:54:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 09:54:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 09:55:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 09:55:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 09:55:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 09:55:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 09:55:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 09:55:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:26
 
[INFO][2017-07-15 09:55:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:55:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 09:55:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 09:55:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:2
 
[INFO][2017-07-15 09:55:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:55:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-15 09:55:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:55:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 09:55:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:55:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 09:55:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:55:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 09:55:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 09:55:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 09:55:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 09:55:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 09:55:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 09:55:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 09:55:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 09:55:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
 
[INFO][2017-07-15 09:55:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:55:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 09:55:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:55:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 09:55:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 09:55:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:2
 
[INFO][2017-07-15 09:57:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 09:57:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 09:57:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:57:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 09:57:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 09:57:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 09:57:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 09:57:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-15 09:57:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 09:57:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
 
[INFO][2017-07-15 09:57:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 09:57:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-15 09:57:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 09:57:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 09:57:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:2
 
[INFO][2017-07-15 09:57:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 09:57:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 09:57:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 09:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 09:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 09:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 09:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 09:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 09:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 09:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 09:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 09:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
 
[INFO][2017-07-15 09:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-15 09:57:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 09:57:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:2
 
[INFO][2017-07-15 09:57:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 09:57:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 09:57:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 09:57:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:57:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 09:57:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 09:57:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-15 09:57:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 09:57:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 09:57:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 09:57:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 09:57:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 09:57:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
 
[INFO][2017-07-15 09:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 09:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 09:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:2
 
[INFO][2017-07-15 09:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 09:57:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 09:57:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 09:57:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:57:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 09:57:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 09:57:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 09:57:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 09:57:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 09:57:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 09:57:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 09:57:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 09:57:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
 
[INFO][2017-07-15 09:57:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 09:57:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:57:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 09:57:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 09:57:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:2
 
[INFO][2017-07-15 09:58:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:58:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 09:58:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:58:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 09:58:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:58:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
 
[INFO][2017-07-15 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-15 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:2
 
[INFO][2017-07-15 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 09:59:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:59:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 09:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 09:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 09:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 09:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 09:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 09:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-15 09:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 09:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 09:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 09:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 09:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 09:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
 
[INFO][2017-07-15 09:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 09:59:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 09:59:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:2
 
[INFO][2017-07-15 09:59:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 09:59:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-15 10:00:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:00:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:00:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:00:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:00:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:00:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:00:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:00:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 10:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 10:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 10:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:26
 
[INFO][2017-07-15 10:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 10:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:2
 
[INFO][2017-07-15 10:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 10:01:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:01:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:01:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:01:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:01:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:01:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:01:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:01:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 10:01:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:01:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 10:01:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:01:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
 
[INFO][2017-07-15 10:01:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:01:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 10:01:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:01:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 10:01:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:01:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-15 10:01:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:01:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:10
参数2:2
 
[INFO][2017-07-15 10:01:57] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 09:53:21 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 10:01:57] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 10:01:58] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:203) localhost-startStop-2 Shutting down ExecutorService 'taskExecutor' 
[INFO][2017-07-15 10:01:58] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing Root WebApplicationContext: startup date [Sat Jul 15 09:53:18 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 10:01:58] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 10:02:13] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:305) RMI TCP Connection(2)-127.0.0.1 Root WebApplicationContext: initialization started 
[INFO][2017-07-15 10:02:13] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(2)-127.0.0.1 Refreshing Root WebApplicationContext: startup date [Sat Jul 15 10:02:13 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 10:02:13] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(2)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/datasource-configurer.xml] 
[INFO][2017-07-15 10:02:13] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(2)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/ActiveMQ.xml] 
[INFO][2017-07-15 10:02:13] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(2)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/redis.xml] 
[INFO][2017-07-15 10:02:13] org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:172) RMI TCP Connection(2)-127.0.0.1 Loading properties file from ServletContext resource [/WEB-INF/jdbc_sqlserver.properties] 
[INFO][2017-07-15 10:02:15] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(2)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 10:02:15] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:345) RMI TCP Connection(2)-127.0.0.1 Root WebApplicationContext: initialization completed in 2658 ms 
[INFO][2017-07-15 10:02:15] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:489) RMI TCP Connection(2)-127.0.0.1 FrameworkServlet 'core-controller': initialization started 
[INFO][2017-07-15 10:02:15] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(2)-127.0.0.1 Refreshing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 10:02:15 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 10:02:15] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(2)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/core-controller-servlet.xml] 
[INFO][2017-07-15 10:02:17] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:165) RMI TCP Connection(2)-127.0.0.1 Initializing ExecutorService  'taskExecutor' 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/CdsOutside]}" onto public java.util.Map com.controller.ApiServerController.CdsOutside(java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveElemeOrder]}" onto public java.lang.String com.controller.ApiServerController.ReceiveElemeOrder(com.opensdk.eleme.vo.MessageParam) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderPay() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderConfrim]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderConfrim() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderFulfillment]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderFulfillment() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderCancel]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderCancel() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrdersendstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrdersendstatus() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack2]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack2() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderSettlement]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderSettlement() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderShopstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderShopstatus() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveBaiduOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveBaiduOrderPay(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/print],methods=[GET]}" onto public java.lang.String com.controller.ClientController.print() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/comment],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/home],methods=[GET]}" onto public java.lang.String com.controller.ClientController.home(org.springframework.ui.Model) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/doorderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.doorderlist() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/business_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.business_data() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/good_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_data() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/good_analyse],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_analyse() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/report1],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report1() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/report2],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report2() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/comment_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment_data() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/member_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.member_data() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/pack_job],methods=[GET]}" onto public java.lang.String com.controller.ClientController.pack_job() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlist() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlisthistory() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/all_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlist() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/shop_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlist() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/all_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlisthistory() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/shop_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlisthistory() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/cf_meal_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_meal_set() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/scanner_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.scanner_set() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/business],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.business() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/goodsManage],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.goodsManage() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/erp],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.erp() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/cf_task_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_task_set() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/toggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.toggle(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/destroyprint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyprint(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/savePrint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePrint(com.framework.mapping.system.CdsPrints,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/GetScannerList],methods=[POST]}" onto public void com.controller.ClientSetController.GetScannerList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/GetPrintList],methods=[POST]}" onto public void com.controller.ClientSetController.print_set(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/print_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.print_set() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/saveScenner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveScenner(com.framework.mapping.system.CdsScanner,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/destroyScanner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyScanner(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/scnnerToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.scnnerToggle(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/electronic_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.electronic_set() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/dianwoda_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.dianwoda_set() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/GetDianwodaList],methods=[POST]}" onto public void com.controller.ClientSetController.GetDianwodaList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/saveDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveDianwoda(com.framework.mapping.system.CdsDianwodaPhone,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/destroyDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyDianwoda(com.framework.mapping.system.CdsDianwodaPhone) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/password_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.password_set() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/savePassword],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePassword(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/giftlist],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.giftlist() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/GetElectronicScaleList],methods=[POST]}" onto public void com.controller.ClientSetController.GetElectronicScaleList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/saveElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveElectronicScale(com.framework.mapping.system.CdsElectronicScale,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/destroyElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyElectronicScale(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/electronicScaleToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.electronicScaleToggle(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Code/index]}" onto public void com.controller.CodeController.index(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus_bak]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus_bak() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/index],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.index() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/getUserName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.getUserName(java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/updateErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErp(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/saveMsGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveMsGoods(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/GetErpGoodsLists],methods=[POST]}" onto public void com.controller.ErpGoodsController.GetErpGoodsLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveErp(java.util.HashMap,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/userIndex],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.userIndex(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/getUserList],methods=[POST]}" onto public void com.controller.ErpGoodsController.getUserList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/updateErpCount],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErpCount(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/index],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.index() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/checkName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.checkName(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveErp(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo2(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsInfo(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/getSigna],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.getSigna() 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsClass(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/classIndex],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.classIndex() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoErp],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetErpInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/getPicAddress],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.getPicAddress(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetBrandTree() throws java.lang.Exception 
[INFO][2017-07-15 10:02:18] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsClassLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsClassLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/userExitOut]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.userExitOut() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/userLoginVerify]}" onto public java.lang.String com.controller.LoginController.userLoginVerify(com.framework.mapping.system.CdsUsers,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/adminLoginVerify]}" onto public java.lang.String com.controller.LoginController.adminLoginVerify(com.framework.mapping.system.SysUser,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/isLogon]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.isLogon() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/LoginVerify]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.LoginVerify(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/userLogin]}" onto public java.lang.String com.controller.LoginController.userLogin() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/adminLogin]}" onto public java.lang.String com.controller.LoginController.adminLogin() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/userLoginOut]}" onto public java.lang.String com.controller.LoginController.userLoginOut() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/main/index],methods=[GET]}" onto public java.lang.String com.controller.MainController.index() 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetBrandTree(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetStoresTree() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetGoodsTree() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/queryGoods],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.queryGoods() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/saveStoresClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveStoresClass(java.util.HashMap) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/elemClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteMT(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindMT(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemClassList],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getElemClassList(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteElem(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindElem(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBind(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/sellStatus],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.sellStatus(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteClass(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getGood_ids],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getGood_ids(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getCombobox],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getCombobox(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/saveGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveGoods(java.util.HashMap) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteGoods(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/indexPt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexPt(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/indexElem],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexElem(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getElemGood(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/elemBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleUpdateFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleUpdateFood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleDeleteFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleDeleteFood(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/indexMt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexMt(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtDeleteGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtDeleteGood(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getMtGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getMtGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBindMt],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBindMt(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresGoodsList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetStoresGoodsList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/updateStoresGoods],methods=[POST]}" onto public void com.controller.PtGoodManageController.updateStoresGoods(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetGoodsClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindUpdate],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindUpdate(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindQuery(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindDelete],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindDelete(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/meituanClassQuery],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.meituanClassQuery(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassRemoveBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassRemoveBind(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getStoresGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getStoresGoodsClass(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.eleClassGoodsQuery(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.mtClassGoodsQuery(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/validateStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.validateStores(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/GetStoresList],methods=[POST]}" onto public void com.controller.StoresController.GetStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/stores_grid],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_grid() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresGoodsManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresGoodsManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresGoodsManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresManageController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/test],methods=[GET]}" onto public java.lang.String com.controller.TestController.test(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/orderTest],methods=[GET]}" onto public java.util.Map com.controller.TestController.orderTest(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/orderTest2],methods=[GET]}" onto public java.lang.String com.controller.TestController.orderTest2(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/test2],methods=[GET]}" onto public java.lang.String com.controller.TestController.test2(int) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/ordermessage],methods=[GET]}" onto public java.lang.String com.controller.TestController.ordermessage(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/sendCode],methods=[GET]}" onto public java.lang.String com.controller.TestController.sendCode() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/test3],methods=[GET]}" onto public java.lang.String com.controller.TestController.test3(java.lang.String,int) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/order],methods=[GET]}" onto public java.lang.String com.controller.TestController.test4(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Udesk/orderlist],methods=[GET]}" onto public java.lang.String com.controller.UdeskController.doorderlist(javax.servlet.http.HttpServletRequest) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/doningTaskRecord]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.doningTaskRecord(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/taskGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_add(java.util.HashMap) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/do_task_Record]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.do_task_Record(java.util.HashMap) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/storesGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_add(java.util.HashMap) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/chufanMealList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.chufanMealList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/orderlist],methods=[POST]}" onto public void com.api.GiftController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/orderlisthistory],methods=[POST]}" onto public void com.api.GiftController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/giftlist],methods=[POST]}" onto public void com.api.GiftController.giftlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/orderInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.orderInfo(com.framework.mapping.system.CdsOrderInfo) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/viewgiftlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.viewgiftlog(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/getTableGoods],methods=[GET]}" onto public void com.api.GiftController.getTableGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/getBrandClass],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getBrandClass(com.framework.mapping.system.CdsClass) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.saveGift(java.lang.String,com.framework.mapping.system.CdsGiftRegisterList) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/getTreeGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getGoods() 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodAPI/getReportAnalyse],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.getReportAnalyse(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodAPI/goodReport],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.goodReport(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/homeApi/viewData],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.HomeController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getMealErpInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getMealErpInfo(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getStoresInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getStoresInfo() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChufangTask(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getChuErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChuErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMealErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/delMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delMealErpGoods(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addMaterial],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMaterial(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/updateErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/saleSync],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.saleSync(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getGoodsInfo() throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoodsInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/delErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delErpGoodsInfo(com.framework.mapping.system.CdsErpGoodList) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/updateGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/business/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.businessMg(java.lang.String,com.framework.mapping.system.CdsBusinessUnit) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/userAndShop/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.usersMg(java.lang.String,java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/updateChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/updateChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addErpGoodsToGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoodsToGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlist],methods=[POST]}" onto public void com.api.OrderController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlisthistory],methods=[POST]}" onto public void com.api.OrderController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/printOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/sendShOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendShOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelorder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelorder(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelDwdsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelDwdsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelShsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelShsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/vieworderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.vieworderlog(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/viewsendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewsendlog(java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/sendDwdOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendDwdOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistorysendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistorysendlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistoryorderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistoryorderlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/loginVerify],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.LoginVerify(com.framework.mapping.system.CdsStoresLogin) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/orderlist],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderList(java.util.HashMap) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/getOrderInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderInfo(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/optOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.optOrder(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/packJob],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.packJob(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/printAPI/printrEmedy],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrEmedy(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/printAPI/getConfigInfo],methods=[POST]}" onto public java.lang.String com.api.PrintController.getConfigInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/printAPI/printrSuccess],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrSuccess(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ReportAPI/report1],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report1(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ReportAPI/report2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report2(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 10:02:19] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/udeskAPI/orderlist],methods=[POST]}" onto public void com.api.UdeskAPIController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 10:02:20] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.initControllerAdviceCache(RequestMappingHandlerAdapter.java:534) RMI TCP Connection(2)-127.0.0.1 Looking for @ControllerAdvice: WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 10:02:15 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 10:02:20] org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:354) RMI TCP Connection(2)-127.0.0.1 Mapped URL path [/**] onto handler 'org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler#0' 
[INFO][2017-07-15 10:02:20] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(2)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 10:02:20] org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:311) RMI TCP Connection(2)-127.0.0.1 Established shared JMS Connection: ActiveMQConnection {id=ID:QH-20161019UENF-52592-1500084140787-1:1,clientId=null,started=false} 
[INFO][2017-07-15 10:02:21] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1040) ActiveMQ Task-1 Successfully connected to tcp://127.0.0.1:61616 
[INFO][2017-07-15 10:02:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) RMI TCP Connection(2)-127.0.0.1 sys_dict.getRecord: 
select * from cds_options where option_name=? 
[INFO][2017-07-15 10:02:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) RMI TCP Connection(2)-127.0.0.1 参数1:site_options
 
[INFO][2017-07-15 10:02:21] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:508) RMI TCP Connection(2)-127.0.0.1 FrameworkServlet 'core-controller': initialization completed in 5687 ms 
[INFO][2017-07-15 10:03:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-15 10:03:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:chenbin
 
[INFO][2017-07-15 10:03:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:03:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:351
参数2:1032
 
[INFO][2017-07-15 10:03:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:03:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:352
参数2:1032
 
[INFO][2017-07-15 10:03:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:03:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:376
参数2:1032
 
[INFO][2017-07-15 10:03:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:03:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:378
参数2:1032
 
[INFO][2017-07-15 10:03:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:03:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:382
参数2:1032
 
[INFO][2017-07-15 10:03:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:03:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:383
参数2:1032
 
[INFO][2017-07-15 10:03:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:03:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:353
参数2:1032
 
[INFO][2017-07-15 10:03:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:03:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:372
参数2:1032
 
[INFO][2017-07-15 10:03:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:03:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:354
参数2:1032
 
[INFO][2017-07-15 10:03:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:03:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:355
参数2:1032
 
[INFO][2017-07-15 10:03:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:03:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:356
参数2:1032
 
[INFO][2017-07-15 10:03:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-15 10:03:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:9
 
[INFO][2017-07-15 10:03:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-15 10:03:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:9
参数2:2017-07-15
参数3:2017-07-15
参数4:9
参数5:2017-07-15
参数6:2017-07-15
参数7:9
参数8:2017-07-15
参数9:2017-07-15
参数10:9
参数11:2017-07-15
参数12:2017-07-15
参数13:9
参数14:2017-07-15
参数15:2017-07-15
参数16:9
参数17:2017-07-15
参数18:2017-07-15
 
[INFO][2017-07-15 10:03:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-15 10:03:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2017-07-15
参数2:2017-07-15
参数3:9
参数4:2017-07-14
参数5:2017-07-14
参数6:9
参数7:2017-07-08
参数8:2017-07-08
参数9:9
 
[INFO][2017-07-15 10:03:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:3
 
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 10:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:03:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 10:03:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:03:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:03:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:03:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:03:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:03:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:03:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:9
 
[INFO][2017-07-15 10:03:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:03:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:9
 
[INFO][2017-07-15 10:03:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:03:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:9
 
[INFO][2017-07-15 10:03:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:03:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:25
 
[INFO][2017-07-15 10:03:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 10:03:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:03:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:9
参数2:2
 
[INFO][2017-07-15 10:03:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-15 10:03:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:03:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:03:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:03:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:03:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:03:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 10:03:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:03:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 10:03:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:03:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 10:03:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:03:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
 
[INFO][2017-07-15 10:03:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-15 10:03:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:03:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:10
参数2:2
 
[INFO][2017-07-15 10:03:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:03:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 10:04:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:04:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:04:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:04:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:04:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:04:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:04:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:04:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 10:04:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:04:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-15 10:04:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:04:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-15 10:04:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:04:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
 
[INFO][2017-07-15 10:04:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:04:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-15 10:04:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:04:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:10
参数2:2
 
[INFO][2017-07-15 10:04:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:04:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-15 10:04:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:04:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:04:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:04:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:04:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:04:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:04:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:04:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 10:04:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:04:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 10:04:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:04:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 10:04:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:04:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
 
[INFO][2017-07-15 10:04:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:04:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 10:04:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:04:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-15 10:04:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:04:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 10:05:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:05:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:05:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:05:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:05:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:05:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:05:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:05:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 10:05:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:05:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 10:05:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:05:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
 
[INFO][2017-07-15 10:05:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:05:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 10:05:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:05:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 10:05:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:05:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:10
参数2:2
 
[INFO][2017-07-15 10:05:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:05:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 10:05:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:05:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:4392
 
[INFO][2017-07-15 10:05:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:05:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:1302
参数3:2
参数4:0
参数5:0
参数6:394
参数7:394
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:5.900000095367432
参数13:份
参数14:0
参数15:null
参数16:888
参数17:26
参数18:null
参数19:null
参数20:null
参数21:4392
 
[INFO][2017-07-15 10:05:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:05:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:05:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:05:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:05:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:05:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:05:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:05:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 10:05:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:05:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 10:05:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:05:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 10:05:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:05:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
 
[INFO][2017-07-15 10:05:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:05:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 10:05:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:05:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:2
 
[INFO][2017-07-15 10:05:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:05:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 10:06:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_stores_manage.getPageRecord: 
select count(0) from (select a.stores_brand_id,a.brand_id,c.brand_name,a.stores_name,a.elem_restaurant_id,a.meituan_restaurant_id,b.linkman,b.start_time,b.end_time,b.address,b.description,b.intro from cds_stores_brand a
            left join cds_stores b on a.stores_id = b.stores_id
            left join cds_brand c on a.brand_id = c.brand_id)  tmp_count 
[INFO][2017-07-15 10:06:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:06:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_stores_manage.getPageRecord: 
select tmp.* from (select (row_number() Over(order by a.stores_id asc)) as rownumber, a.stores_brand_id,a.brand_id,c.brand_name,a.stores_name,a.elem_restaurant_id,a.meituan_restaurant_id,b.linkman,b.start_time,b.end_time,b.address,b.description,b.intro from cds_stores_brand a
            left join cds_stores b on a.stores_id = b.stores_id
            left join cds_brand c on a.brand_id = c.brand_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 10:06:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:06:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:06:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
参数2:9
 
[INFO][2017-07-15 10:06:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:06:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:9
 
[INFO][2017-07-15 10:06:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:06:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:9
 
[INFO][2017-07-15 10:06:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:06:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:29
 
[INFO][2017-07-15 10:06:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:06:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:30
 
[INFO][2017-07-15 10:06:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:06:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:25
 
[INFO][2017-07-15 10:06:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:06:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:49
 
[INFO][2017-07-15 10:06:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:06:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:50
 
[INFO][2017-07-15 10:06:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:06:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:51
 
[INFO][2017-07-15 10:06:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:06:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:52
 
[INFO][2017-07-15 10:06:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:06:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
参数2:9
 
[INFO][2017-07-15 10:06:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:06:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
参数2:9
 
[INFO][2017-07-15 10:10:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:10:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
参数2:9
 
[INFO][2017-07-15 10:10:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:10:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:9
 
[INFO][2017-07-15 10:10:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:10:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9
 
[INFO][2017-07-15 10:10:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:10:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:29
 
[INFO][2017-07-15 10:10:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:10:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:30
 
[INFO][2017-07-15 10:10:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:10:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:25
 
[INFO][2017-07-15 10:10:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:10:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:49
 
[INFO][2017-07-15 10:10:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:10:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:50
 
[INFO][2017-07-15 10:10:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:10:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:51
 
[INFO][2017-07-15 10:10:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:10:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:52
 
[INFO][2017-07-15 10:10:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:10:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
参数2:9
 
[INFO][2017-07-15 10:10:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:10:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
参数2:9
 
[INFO][2017-07-15 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:3259
 
[INFO][2017-07-15 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:4950
参数7:4950
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[WARN][2017-07-15 10:11:05] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-80-exec-1 Resolved exception caused by Handler execution: com.framework.exception.NotLoginException: 您未登录系统或者登录已超时,请重新登录 
[INFO][2017-07-15 10:11:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-15 10:11:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:chenbin
 
[INFO][2017-07-15 10:11:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:11:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:351
参数2:1032
 
[INFO][2017-07-15 10:11:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:11:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:352
参数2:1032
 
[INFO][2017-07-15 10:11:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:11:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:376
参数2:1032
 
[INFO][2017-07-15 10:11:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:11:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:378
参数2:1032
 
[INFO][2017-07-15 10:11:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:11:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:382
参数2:1032
 
[INFO][2017-07-15 10:11:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:11:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:383
参数2:1032
 
[INFO][2017-07-15 10:11:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:11:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:353
参数2:1032
 
[INFO][2017-07-15 10:11:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:11:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:372
参数2:1032
 
[INFO][2017-07-15 10:11:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:11:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:354
参数2:1032
 
[INFO][2017-07-15 10:11:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:11:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:355
参数2:1032
 
[INFO][2017-07-15 10:11:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 10:11:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:356
参数2:1032
 
[INFO][2017-07-15 10:11:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-15 10:11:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:9
 
[INFO][2017-07-15 10:11:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-15 10:11:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:9
参数2:2017-07-15
参数3:2017-07-15
参数4:9
参数5:2017-07-15
参数6:2017-07-15
参数7:9
参数8:2017-07-15
参数9:2017-07-15
参数10:9
参数11:2017-07-15
参数12:2017-07-15
参数13:9
参数14:2017-07-15
参数15:2017-07-15
参数16:9
参数17:2017-07-15
参数18:2017-07-15
 
[INFO][2017-07-15 10:11:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-15 10:11:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:2017-07-15
参数2:2017-07-15
参数3:9
参数4:2017-07-14
参数5:2017-07-14
参数6:9
参数7:2017-07-08
参数8:2017-07-08
参数9:9
 
[INFO][2017-07-15 10:11:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:11:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-15 10:11:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:11:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:9
 
[INFO][2017-07-15 10:11:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:11:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:9
 
[INFO][2017-07-15 10:11:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:11:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:29
 
[INFO][2017-07-15 10:11:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:11:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:30
 
[INFO][2017-07-15 10:11:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:11:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:25
 
[INFO][2017-07-15 10:11:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:11:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:49
 
[INFO][2017-07-15 10:11:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:11:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:50
 
[INFO][2017-07-15 10:11:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:11:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:51
 
[INFO][2017-07-15 10:11:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:11:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:52
 
[INFO][2017-07-15 10:11:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:11:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:9
 
[INFO][2017-07-15 10:11:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:11:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:9
 
[INFO][2017-07-15 10:11:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:11:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:9
 
[INFO][2017-07-15 10:11:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:11:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:9
 
[INFO][2017-07-15 10:11:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:11:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
参数2:9
 
[INFO][2017-07-15 10:11:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:11:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
参数2:9
 
[INFO][2017-07-15 10:13:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:13:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
参数2:9
 
[INFO][2017-07-15 10:13:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:13:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:9
 
[INFO][2017-07-15 10:13:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:13:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:9
 
[INFO][2017-07-15 10:13:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:13:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:29
 
[INFO][2017-07-15 10:13:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:13:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:30
 
[INFO][2017-07-15 10:13:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:13:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:25
 
[INFO][2017-07-15 10:13:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:13:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:49
 
[INFO][2017-07-15 10:13:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:13:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:50
 
[INFO][2017-07-15 10:13:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:13:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:51
 
[INFO][2017-07-15 10:13:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:13:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:52
 
[INFO][2017-07-15 10:13:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:13:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
参数2:9
 
[INFO][2017-07-15 10:13:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:13:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
参数2:9
 
[INFO][2017-07-15 10:13:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:13:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:3259
 
[INFO][2017-07-15 10:13:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:13:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:4950
参数7:4950
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:13:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:13:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:3157
 
[INFO][2017-07-15 10:13:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:13:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:4950
参数7:4950
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9112
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3157
 
[INFO][2017-07-15 10:13:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:13:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2959
 
[INFO][2017-07-15 10:13:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:13:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:9
参数2:1245
参数3:1
参数4:0
参数5:1
参数6:4950
参数7:4950
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:8887
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:2959
 
[INFO][2017-07-15 10:14:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:14:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:9
 
[INFO][2017-07-15 10:14:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:14:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:9
 
[INFO][2017-07-15 10:14:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:14:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:9
 
[INFO][2017-07-15 10:14:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:14:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:29
 
[INFO][2017-07-15 10:14:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:14:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:30
 
[INFO][2017-07-15 10:14:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:14:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:25
 
[INFO][2017-07-15 10:14:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:14:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:49
 
[INFO][2017-07-15 10:14:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:14:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:50
 
[INFO][2017-07-15 10:14:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:14:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:51
 
[INFO][2017-07-15 10:14:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:14:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:52
 
[INFO][2017-07-15 10:14:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:14:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
参数2:9
 
[INFO][2017-07-15 10:14:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:14:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
参数2:9
 
[INFO][2017-07-15 10:14:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:14:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:3259
 
[INFO][2017-07-15 10:14:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:14:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:4950
参数7:4950
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:14:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:14:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:3157
 
[INFO][2017-07-15 10:14:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:14:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:9
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:4394
参数7:4394
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9112
参数15:是
参数16:8888
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3157
 
[INFO][2017-07-15 10:15:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:15:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:9
 
[INFO][2017-07-15 10:15:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:15:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:9
 
[INFO][2017-07-15 10:15:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:15:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:4369
 
[INFO][2017-07-15 10:15:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:15:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:9
参数2:1301
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:0
参数11:0.0
参数12:3.8
参数13:份
参数14:0
参数15:null
参数16:0
参数17:25
参数18:null
参数19:null
参数20:null
参数21:4369
 
[INFO][2017-07-15 10:15:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:15:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:4370
 
[INFO][2017-07-15 10:15:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:15:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
参数2:1302
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:0
参数9:1
参数10:2
参数11:0.0
参数12:5.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:25
参数18:null
参数19:null
参数20:null
参数21:4370
 
[INFO][2017-07-15 10:16:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:16:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:4370
 
[INFO][2017-07-15 10:16:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:16:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:9
参数2:1302
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:0
参数9:1
参数10:2
参数11:0.0
参数12:5.9
参数13:份
参数14:0
参数15:null
参数16:0
参数17:25
参数18:null
参数19:null
参数20:null
参数21:4370
 
[INFO][2017-07-15 10:16:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:16:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:9
 
[INFO][2017-07-15 10:16:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:16:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:9
 
[INFO][2017-07-15 10:16:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:16:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:9
 
[INFO][2017-07-15 10:16:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:16:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:9
 
[INFO][2017-07-15 10:18:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:18:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:18:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.getPageRecord: 
select count(0) from (select * from  cds_brand)  tmp_count 
[INFO][2017-07-15 10:18:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:18:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.getPageRecord: 
select tmp.* from (select (row_number() Over(order by brand_id asc)) as rownumber, * from  cds_brand) tmp where tmp.rownumber between 1 and 3 
[INFO][2017-07-15 10:18:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:18:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_area
             


         WHERE parentid = ? 
         
            ORDER BY id 
[INFO][2017-07-15 10:18:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9001
 
[INFO][2017-07-15 10:18:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE city = ? 
         
            ORDER BY stores_id 
[INFO][2017-07-15 10:18:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9001
 
[INFO][2017-07-15 10:19:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:19:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:19:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.getStoresBrand: 
select count(0) from (select * from cds_stores_brand)  tmp_count 
[INFO][2017-07-15 10:19:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:19:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.getStoresBrand: 
select tmp.* from (select (row_number() Over(order by stores_brand_id asc)) as rownumber, * from cds_stores_brand) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 10:19:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:19:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:19:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
参数2:9
 
[INFO][2017-07-15 10:19:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:19:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:9
 
[INFO][2017-07-15 10:19:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:19:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:9
 
[INFO][2017-07-15 10:19:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:19:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:29
 
[INFO][2017-07-15 10:19:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:19:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:30
 
[INFO][2017-07-15 10:19:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:19:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:25
 
[INFO][2017-07-15 10:19:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:19:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:49
 
[INFO][2017-07-15 10:19:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:19:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:50
 
[INFO][2017-07-15 10:19:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:19:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:51
 
[INFO][2017-07-15 10:19:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:19:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:52
 
[INFO][2017-07-15 10:19:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:19:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
参数2:9
 
[INFO][2017-07-15 10:19:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:19:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
参数2:9
 
[INFO][2017-07-15 10:19:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:19:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:3259
 
[INFO][2017-07-15 10:19:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:19:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:4950
参数7:4950
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:20:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-15 10:20:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:9
参数2:2017-07-15
参数3:2017-07-15
参数4:9
参数5:2017-07-15
参数6:2017-07-15
参数7:9
参数8:2017-07-15
参数9:2017-07-15
参数10:9
参数11:2017-07-15
参数12:2017-07-15
参数13:9
参数14:2017-07-15
参数15:2017-07-15
参数16:9
参数17:2017-07-15
参数18:2017-07-15
 
[INFO][2017-07-15 10:20:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-15 10:20:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2017-07-15
参数2:2017-07-15
参数3:9
参数4:2017-07-14
参数5:2017-07-14
参数6:9
参数7:2017-07-08
参数8:2017-07-08
参数9:9
 
[INFO][2017-07-15 10:20:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:20:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
参数2:9
 
[INFO][2017-07-15 10:20:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:20:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:9
 
[INFO][2017-07-15 10:20:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:20:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
 
[INFO][2017-07-15 10:20:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:20:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:29
 
[INFO][2017-07-15 10:20:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:20:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:30
 
[INFO][2017-07-15 10:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:25
 
[INFO][2017-07-15 10:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:49
 
[INFO][2017-07-15 10:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:50
 
[INFO][2017-07-15 10:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:51
 
[INFO][2017-07-15 10:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:52
 
[INFO][2017-07-15 10:20:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:20:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
参数2:9
 
[INFO][2017-07-15 10:20:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:20:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
参数2:9
 
[INFO][2017-07-15 10:20:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:20:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:3259
 
[INFO][2017-07-15 10:20:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:20:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:20:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:20:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:3157
 
[INFO][2017-07-15 10:20:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:20:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:9
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:4394
参数7:4394
参数8:100
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9112
参数15:是
参数16:8888
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3157
 
[INFO][2017-07-15 10:20:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:20:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:3259
 
[INFO][2017-07-15 10:20:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:20:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:4394
参数7:4394
参数8:100
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:8888
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:20:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:20:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:3259
 
[INFO][2017-07-15 10:20:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:20:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:21:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:21:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
参数2:9
 
[INFO][2017-07-15 10:21:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:21:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:9
 
[INFO][2017-07-15 10:21:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:21:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:9
 
[INFO][2017-07-15 10:21:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:21:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:29
 
[INFO][2017-07-15 10:21:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:21:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:30
 
[INFO][2017-07-15 10:21:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:21:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:25
 
[INFO][2017-07-15 10:21:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:21:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:49
 
[INFO][2017-07-15 10:21:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:21:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:50
 
[INFO][2017-07-15 10:21:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:21:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:51
 
[INFO][2017-07-15 10:21:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:21:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:52
 
[INFO][2017-07-15 10:21:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:21:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
参数2:9
 
[INFO][2017-07-15 10:21:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:21:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
参数2:9
 
[INFO][2017-07-15 10:21:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:21:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:3259
 
[INFO][2017-07-15 10:21:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:21:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:21:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:21:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:3157
 
[INFO][2017-07-15 10:21:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:21:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:9
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9112
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3157
 
[INFO][2017-07-15 10:21:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:21:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
参数2:9
 
[INFO][2017-07-15 10:21:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:21:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:9
 
[INFO][2017-07-15 10:21:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:21:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9
 
[INFO][2017-07-15 10:21:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:21:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:29
 
[INFO][2017-07-15 10:21:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:21:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:30
 
[INFO][2017-07-15 10:21:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:21:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:25
 
[INFO][2017-07-15 10:21:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:21:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:49
 
[INFO][2017-07-15 10:21:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:21:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:50
 
[INFO][2017-07-15 10:21:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:21:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:51
 
[INFO][2017-07-15 10:21:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:21:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:52
 
[INFO][2017-07-15 10:21:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:21:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:9
 
[INFO][2017-07-15 10:21:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:21:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:9
 
[INFO][2017-07-15 10:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:22:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
参数2:9
 
[INFO][2017-07-15 10:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:9
 
[INFO][2017-07-15 10:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:9
 
[INFO][2017-07-15 10:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:29
 
[INFO][2017-07-15 10:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:30
 
[INFO][2017-07-15 10:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:22:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:25
 
[INFO][2017-07-15 10:22:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:22:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:49
 
[INFO][2017-07-15 10:22:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:22:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:50
 
[INFO][2017-07-15 10:22:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:22:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:51
 
[INFO][2017-07-15 10:22:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:22:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:52
 
[INFO][2017-07-15 10:22:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:22:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
参数2:9
 
[INFO][2017-07-15 10:22:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:22:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
参数2:9
 
[INFO][2017-07-15 10:22:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:22:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2959
 
[INFO][2017-07-15 10:22:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:22:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
参数2:1245
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:8887
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:2959
 
[INFO][2017-07-15 10:22:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:22:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:3157
 
[INFO][2017-07-15 10:22:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:22:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:9
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9112
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3157
 
[INFO][2017-07-15 10:22:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:22:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
参数2:9
 
[INFO][2017-07-15 10:22:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:22:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:9
 
[INFO][2017-07-15 10:22:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:22:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:9
 
[INFO][2017-07-15 10:22:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:22:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:29
 
[INFO][2017-07-15 10:22:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:22:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:30
 
[INFO][2017-07-15 10:22:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:22:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:25
 
[INFO][2017-07-15 10:22:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:22:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:49
 
[INFO][2017-07-15 10:22:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:22:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:50
 
[INFO][2017-07-15 10:22:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:22:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:51
 
[INFO][2017-07-15 10:22:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:22:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:52
 
[INFO][2017-07-15 10:22:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:22:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-15 10:22:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:22:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-15 10:23:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-15 10:23:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:9
参数2:2017-07-15
参数3:2017-07-15
参数4:9
参数5:2017-07-15
参数6:2017-07-15
参数7:9
参数8:2017-07-15
参数9:2017-07-15
参数10:9
参数11:2017-07-15
参数12:2017-07-15
参数13:9
参数14:2017-07-15
参数15:2017-07-15
参数16:9
参数17:2017-07-15
参数18:2017-07-15
 
[INFO][2017-07-15 10:23:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-15 10:23:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2017-07-15
参数2:2017-07-15
参数3:9
参数4:2017-07-14
参数5:2017-07-14
参数6:9
参数7:2017-07-08
参数8:2017-07-08
参数9:9
 
[INFO][2017-07-15 10:23:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:23:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
参数2:9
 
[INFO][2017-07-15 10:23:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:23:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:9
 
[INFO][2017-07-15 10:23:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:23:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:9
 
[INFO][2017-07-15 10:23:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:23:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:29
 
[INFO][2017-07-15 10:23:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:23:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:30
 
[INFO][2017-07-15 10:23:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:23:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:25
 
[INFO][2017-07-15 10:23:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:23:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:49
 
[INFO][2017-07-15 10:23:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:23:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:50
 
[INFO][2017-07-15 10:23:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:23:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:51
 
[INFO][2017-07-15 10:23:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:23:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:52
 
[INFO][2017-07-15 10:23:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:23:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
参数2:9
 
[INFO][2017-07-15 10:23:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:23:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
参数2:9
 
[INFO][2017-07-15 10:23:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:23:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:3259
 
[INFO][2017-07-15 10:23:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:23:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:23:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:23:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:3157
 
[INFO][2017-07-15 10:23:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:23:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:9
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9112
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3157
 
[INFO][2017-07-15 10:23:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:23:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:3259
 
[INFO][2017-07-15 10:23:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:23:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:394
参数7:394
参数8:100
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:888
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:23:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:23:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:3259
 
[INFO][2017-07-15 10:23:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:23:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:23:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:23:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:3157
 
[INFO][2017-07-15 10:23:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:23:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:9
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:4394
参数7:4394
参数8:100
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9112
参数15:是
参数16:8888
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3157
 
[INFO][2017-07-15 10:24:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:24:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
参数2:9
 
[INFO][2017-07-15 10:24:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:24:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:9
 
[INFO][2017-07-15 10:24:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:24:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
 
[INFO][2017-07-15 10:24:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:24:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:29
 
[INFO][2017-07-15 10:24:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:24:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:30
 
[INFO][2017-07-15 10:24:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:24:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:25
 
[INFO][2017-07-15 10:24:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:24:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:49
 
[INFO][2017-07-15 10:24:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:24:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:50
 
[INFO][2017-07-15 10:24:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:24:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:51
 
[INFO][2017-07-15 10:24:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:24:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:52
 
[INFO][2017-07-15 10:24:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:24:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
参数2:9
 
[INFO][2017-07-15 10:24:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:24:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
参数2:9
 
[INFO][2017-07-15 10:24:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:24:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:3157
 
[INFO][2017-07-15 10:24:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:24:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:9
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9112
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3157
 
[INFO][2017-07-15 10:25:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:25:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:3259
 
[INFO][2017-07-15 10:25:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:25:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:394
参数7:394
参数8:100
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:888
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:33:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:33:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:9
 
[INFO][2017-07-15 10:33:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:33:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:9
 
[INFO][2017-07-15 10:33:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:33:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:4370
 
[INFO][2017-07-15 10:33:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:33:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9
参数2:1302
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:2
参数11:0.0
参数12:5.9
参数13:份
参数14:0
参数15:null
参数16:0
参数17:25
参数18:null
参数19:null
参数20:null
参数21:4370
 
[INFO][2017-07-15 10:33:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:33:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:9
 
[INFO][2017-07-15 10:33:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:33:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:9
 
[INFO][2017-07-15 10:33:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:33:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:9
 
[INFO][2017-07-15 10:33:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:33:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:9
 
[INFO][2017-07-15 10:33:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:33:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
参数2:9
 
[INFO][2017-07-15 10:33:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:33:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
参数2:9
 
[INFO][2017-07-15 10:34:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:9
 
[INFO][2017-07-15 10:34:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:34:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:9
 
[INFO][2017-07-15 10:34:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:9
参数3:49
 
[INFO][2017-07-15 10:34:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-15 10:34:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:9
参数3:49
 
[INFO][2017-07-15 10:34:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:9
参数3:50
 
[INFO][2017-07-15 10:34:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-15 10:34:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:9
参数3:50
 
[INFO][2017-07-15 10:34:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
参数2:9
参数3:50
 
[INFO][2017-07-15 10:34:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-15 10:34:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
参数2:9
参数3:50
 
[INFO][2017-07-15 10:34:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
参数2:9
参数3:29
 
[INFO][2017-07-15 10:34:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:34:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
参数2:9
参数3:29
 
[INFO][2017-07-15 10:34:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:9
参数3:29
 
[INFO][2017-07-15 10:34:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-15 10:34:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:9
参数3:29
 
[INFO][2017-07-15 10:34:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:9
参数3:49
 
[INFO][2017-07-15 10:34:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-15 10:34:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:9
参数3:49
 
[INFO][2017-07-15 10:34:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:9
参数3:50
 
[INFO][2017-07-15 10:34:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-15 10:34:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:9
参数3:50
 
[INFO][2017-07-15 10:34:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:9
参数3:52
 
[INFO][2017-07-15 10:34:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-15 10:34:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:9
参数3:52
 
[INFO][2017-07-15 10:34:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:9
参数3:51
 
[INFO][2017-07-15 10:34:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-15 10:34:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:9
参数3:51
 
[INFO][2017-07-15 10:34:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:9
 
[INFO][2017-07-15 10:34:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:34:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:9
 
[INFO][2017-07-15 10:34:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
参数2:9
 
[INFO][2017-07-15 10:34:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:34:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
参数2:9
 
[INFO][2017-07-15 10:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:9
 
[INFO][2017-07-15 10:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:34:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:9
 
[INFO][2017-07-15 10:34:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
参数2:9
 
[INFO][2017-07-15 10:34:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:34:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
参数2:9
 
[INFO][2017-07-15 10:34:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:9
 
[INFO][2017-07-15 10:34:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:34:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:9
 
[INFO][2017-07-15 10:34:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
参数2:9
 
[INFO][2017-07-15 10:34:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:34:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
参数2:9
 
[INFO][2017-07-15 10:34:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:9
参数3:29
 
[INFO][2017-07-15 10:34:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:34:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
参数2:9
参数3:29
 
[INFO][2017-07-15 10:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
参数2:9
 
[INFO][2017-07-15 10:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:34:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
参数2:9
 
[INFO][2017-07-15 10:34:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:34:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:34:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:34:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:34:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:34:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:3
 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 10:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:34:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 10:34:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:35:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:35:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:35:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:35:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:35:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:35:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:35:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:35:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-15 10:35:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:35:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 10:35:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:35:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 10:35:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:35:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
 
[INFO][2017-07-15 10:35:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:35:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 10:35:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:35:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:2
 
[INFO][2017-07-15 10:35:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:35:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 10:35:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.deleteRecord: 
DELETE FROM cds_stores_goods_list
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:35:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:4392
 
[INFO][2017-07-15 10:35:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:35:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-15 10:35:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:35:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 10:35:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-15 10:35:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 10:35:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.deleteRecord: 
DELETE FROM cds_stores_goods_list
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:35:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:4391
 
[INFO][2017-07-15 10:35:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:35:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:2
 
[INFO][2017-07-15 10:35:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:35:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 10:35:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:35:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 10:35:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-15 10:35:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 10:35:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-15 10:35:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 10:39:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:39:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
参数2:9
 
[INFO][2017-07-15 10:39:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:39:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:9
 
[INFO][2017-07-15 10:39:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:39:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:9
 
[INFO][2017-07-15 10:39:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:39:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:29
 
[INFO][2017-07-15 10:39:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:39:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:30
 
[INFO][2017-07-15 10:39:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:39:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:25
 
[INFO][2017-07-15 10:39:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:39:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:49
 
[INFO][2017-07-15 10:39:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:39:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:50
 
[INFO][2017-07-15 10:39:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:39:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:51
 
[INFO][2017-07-15 10:39:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:39:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:52
 
[INFO][2017-07-15 10:39:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:39:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
参数2:9
 
[INFO][2017-07-15 10:39:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:39:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
参数2:9
 
[INFO][2017-07-15 10:39:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:39:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:9
 
[INFO][2017-07-15 10:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:9
 
[INFO][2017-07-15 10:39:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:39:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
参数2:9
 
[INFO][2017-07-15 10:39:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:39:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
参数2:9
 
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:3
 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 10:39:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:39:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:39:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:39:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:39:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:39:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:39:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-15 10:39:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:39:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 10:39:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:39:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 10:39:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:39:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
 
[INFO][2017-07-15 10:39:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 10:39:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:39:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:2
 
[INFO][2017-07-15 10:39:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 10:39:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-15 10:39:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 10:39:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:39:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 10:39:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-15 10:39:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 10:39:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-15 10:39:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 10:39:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:39:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
 
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:2
 
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:39:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-15 10:39:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-15 10:39:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 10:39:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-15 10:39:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 10:39:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-15 10:39:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 10:39:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-15 10:39:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 10:40:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:40:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-15 10:40:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:40:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:9
 
[INFO][2017-07-15 10:40:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:40:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:9
 
[INFO][2017-07-15 10:40:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:40:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:29
 
[INFO][2017-07-15 10:40:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:40:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:30
 
[INFO][2017-07-15 10:40:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:40:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:25
 
[INFO][2017-07-15 10:40:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:40:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:49
 
[INFO][2017-07-15 10:40:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:40:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:50
 
[INFO][2017-07-15 10:40:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:40:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:51
 
[INFO][2017-07-15 10:40:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:40:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:52
 
[INFO][2017-07-15 10:40:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:40:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
参数2:9
 
[INFO][2017-07-15 10:40:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:40:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
参数2:9
 
[INFO][2017-07-15 10:40:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:40:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:9
 
[INFO][2017-07-15 10:40:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 6 
[INFO][2017-07-15 10:40:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:9
 
[INFO][2017-07-15 10:40:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:40:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
参数2:9
 
[INFO][2017-07-15 10:40:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:40:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
参数2:9
 
[INFO][2017-07-15 10:40:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:40:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:3259
 
[INFO][2017-07-15 10:40:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:40:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:394
参数7:394
参数8:100
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:888
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:40:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:40:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:3157
 
[INFO][2017-07-15 10:40:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:40:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:9
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9112
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3157
 
[INFO][2017-07-15 10:40:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:40:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2959
 
[INFO][2017-07-15 10:40:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:40:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:9
参数2:1245
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:8887
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:2959
 
[INFO][2017-07-15 10:40:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores_manage.getPageRecord: 
select count(0) from (select a.stores_brand_id,a.brand_id,c.brand_name,a.stores_name,a.elem_restaurant_id,a.meituan_restaurant_id,b.linkman,b.start_time,b.end_time,b.address,b.description,b.intro from cds_stores_brand a
            left join cds_stores b on a.stores_id = b.stores_id
            left join cds_brand c on a.brand_id = c.brand_id)  tmp_count 
[INFO][2017-07-15 10:40:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:40:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores_manage.getPageRecord: 
select tmp.* from (select (row_number() Over(order by a.stores_id asc)) as rownumber, a.stores_brand_id,a.brand_id,c.brand_name,a.stores_name,a.elem_restaurant_id,a.meituan_restaurant_id,b.linkman,b.start_time,b.end_time,b.address,b.description,b.intro from cds_stores_brand a
            left join cds_stores b on a.stores_id = b.stores_id
            left join cds_brand c on a.brand_id = c.brand_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 10:40:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:40:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:40:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
参数2:9
 
[INFO][2017-07-15 10:40:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:40:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:9
 
[INFO][2017-07-15 10:40:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:40:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9
 
[INFO][2017-07-15 10:40:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:40:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:29
 
[INFO][2017-07-15 10:40:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:40:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:30
 
[INFO][2017-07-15 10:40:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:40:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:25
 
[INFO][2017-07-15 10:40:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:40:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:49
 
[INFO][2017-07-15 10:40:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:40:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:50
 
[INFO][2017-07-15 10:40:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:40:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:51
 
[INFO][2017-07-15 10:40:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:40:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:52
 
[INFO][2017-07-15 10:40:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:40:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-15 10:40:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:40:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:3
 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 10:41:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:41:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:41:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:41:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:41:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:41:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:41:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 10:41:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:41:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 10:41:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:41:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 10:41:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:41:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
 
[INFO][2017-07-15 10:41:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-15 10:41:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:41:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:2
 
[INFO][2017-07-15 10:41:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 10:41:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:41:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:4386
 
[WARN][2017-07-15 10:41:44] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-4 Resolved exception caused by Handler execution: java.lang.NullPointerException 
[INFO][2017-07-15 10:41:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:41:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:4385
 
[INFO][2017-07-15 10:41:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:41:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:4386
 
[WARN][2017-07-15 10:41:54] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-7 Resolved exception caused by Handler execution: java.lang.NullPointerException 
[INFO][2017-07-15 10:41:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[WARN][2017-07-15 10:41:55] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-8 Resolved exception caused by Handler execution: java.lang.NullPointerException 
[INFO][2017-07-15 10:41:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:41:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:41:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:41:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:41:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 10:41:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:41:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 10:41:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:41:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 10:41:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:41:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
 
[INFO][2017-07-15 10:41:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 10:41:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:41:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:2
 
[INFO][2017-07-15 10:41:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:41:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 10:42:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:42:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
参数3:50
 
[INFO][2017-07-15 10:42:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-15 10:42:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
参数3:50
 
[INFO][2017-07-15 10:42:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:42:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 10:42:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:42:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 10:42:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:42:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:4385
 
[INFO][2017-07-15 10:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:1299
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:0
参数11:2.0
参数12:27.899999618530273
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234725422
参数19:null
参数20:null
参数21:4385
 
[INFO][2017-07-15 10:42:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:42:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:4386
 
[INFO][2017-07-15 10:42:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:42:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:10
参数2:1298
参数3:2
参数4:0
参数5:0
参数6:400
参数7:400
参数8:100
参数9:1
参数10:1
参数11:2.0
参数12:26.899999618530273
参数13:份
参数14:0
参数15:null
参数16:900
参数17:26
参数18:1234713952
参数19:4386
参数20:4454DCE59CD8769F7F396C83E153B54B
参数21:4386
 
[INFO][2017-07-15 10:42:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:42:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:42:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:42:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:42:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:42:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 10:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 10:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 10:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
 
[INFO][2017-07-15 10:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-15 10:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:2
 
[INFO][2017-07-15 10:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 10:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 10:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 10:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 10:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:26
 
[INFO][2017-07-15 10:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 10:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:10
参数2:2
 
[INFO][2017-07-15 10:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 10:42:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:42:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:4386
 
[INFO][2017-07-15 10:42:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:42:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:1298
参数3:2
参数4:0
参数5:0
参数6:400
参数7:400
参数8:100
参数9:1
参数10:1
参数11:2.0
参数12:26.899999618530273
参数13:份
参数14:0
参数15:null
参数16:100
参数17:26
参数18:1234713952
参数19:4386
参数20:4454DCE59CD8769F7F396C83E153B54B
参数21:4386
 
[INFO][2017-07-15 10:42:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:42:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:42:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:42:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:42:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:42:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:42:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:42:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 10:42:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:42:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 10:42:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:42:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 10:42:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:42:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
 
[INFO][2017-07-15 10:42:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:42:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-15 10:42:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:42:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:2
 
[INFO][2017-07-15 10:42:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:42:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-15 10:50:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:50:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:50:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:50:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:50:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:3
 
[INFO][2017-07-15 10:50:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:50:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 10:50:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:50:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 10:50:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:50:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:50:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:50:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:50:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:50:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:50:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 10:50:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:50:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 10:50:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:50:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 10:50:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:50:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
 
[INFO][2017-07-15 10:50:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 10:50:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:50:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-15 10:50:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:50:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:2
 
[INFO][2017-07-15 10:50:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:50:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:4386
 
[INFO][2017-07-15 10:50:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:50:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:10
参数2:1298
参数3:2
参数4:0
参数5:0
参数6:45
参数7:45
参数8:10
参数9:1
参数10:1
参数11:2.0
参数12:26.899999618530273
参数13:份
参数14:0
参数15:null
参数16:100
参数17:26
参数18:1234713952
参数19:4386
参数20:4454DCE59CD8769F7F396C83E153B54B
参数21:4386
 
[INFO][2017-07-15 10:50:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:50:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:4385
 
[INFO][2017-07-15 10:50:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:50:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:1299
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:0
参数11:2.0
参数12:27.899999618530273
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234725422
参数19:null
参数20:null
参数21:4385
 
[INFO][2017-07-15 10:50:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:50:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:4386
 
[WARN][2017-07-15 10:50:54] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-10 Resolved exception caused by Handler execution: java.lang.NullPointerException 
[INFO][2017-07-15 10:51:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:51:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:4386
 
[WARN][2017-07-15 10:52:00] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-5 Resolved exception caused by Handler execution: java.lang.NullPointerException 
[INFO][2017-07-15 10:52:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:52:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:52:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:52:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 10:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 10:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 10:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
 
[INFO][2017-07-15 10:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 10:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:2
 
[INFO][2017-07-15 10:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 10:52:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:52:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:4386
 
[INFO][2017-07-15 10:52:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:52:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:1298
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:1
参数11:2.0
参数12:26.899999618530273
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234713952
参数19:4386
参数20:4454DCE59CD8769F7F396C83E153B54B
参数21:4386
 
[INFO][2017-07-15 10:52:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:52:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:4385
 
[INFO][2017-07-15 10:52:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:52:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:1299
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:0
参数11:2.0
参数12:27.899999618530273
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234725422
参数19:null
参数20:null
参数21:4385
 
[INFO][2017-07-15 10:52:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:52:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:52:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:52:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:52:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:52:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 10:52:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:52:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 10:52:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:52:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 10:52:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:52:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
 
[INFO][2017-07-15 10:52:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-15 10:52:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:52:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:2
 
[INFO][2017-07-15 10:52:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-15 10:52:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:52:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:4386
 
[INFO][2017-07-15 10:52:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:52:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:1298
参数3:2
参数4:0
参数5:0
参数6:45
参数7:46
参数8:10
参数9:1
参数10:1
参数11:2.0
参数12:26.899999618530273
参数13:份
参数14:0
参数15:null
参数16:101
参数17:26
参数18:1234713952
参数19:4386
参数20:4454DCE59CD8769F7F396C83E153B54B
参数21:4386
 
[INFO][2017-07-15 10:52:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 10:52:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 10:52:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:52:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 10:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 10:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 10:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 10:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
 
[INFO][2017-07-15 10:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 10:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:2
 
[INFO][2017-07-15 10:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 10:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:52:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:4386
 
[INFO][2017-07-15 10:52:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:52:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:1298
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:1
参数11:2.0
参数12:26.899999618530273
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234713952
参数19:4386
参数20:4454DCE59CD8769F7F396C83E153B54B
参数21:4386
 
[INFO][2017-07-15 10:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 10:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:52:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 10:52:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:52:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 10:52:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:52:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
 
[INFO][2017-07-15 10:52:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-15 10:52:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:52:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 10:52:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:52:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:2
 
[INFO][2017-07-15 10:53:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:53:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
参数2:9
 
[INFO][2017-07-15 10:53:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:53:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:9
 
[INFO][2017-07-15 10:53:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:53:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9
 
[INFO][2017-07-15 10:53:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:53:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:29
 
[INFO][2017-07-15 10:53:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:53:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:30
 
[INFO][2017-07-15 10:53:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:53:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:25
 
[INFO][2017-07-15 10:53:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:53:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:49
 
[INFO][2017-07-15 10:53:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:53:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:50
 
[INFO][2017-07-15 10:53:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:53:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:51
 
[INFO][2017-07-15 10:53:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:53:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:52
 
[INFO][2017-07-15 10:53:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:53:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
参数2:9
 
[INFO][2017-07-15 10:53:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:53:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
参数2:9
 
[INFO][2017-07-15 10:53:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:53:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:3259
 
[INFO][2017-07-15 10:53:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:53:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:394
参数7:394
参数8:100
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:100
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:54:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:54:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-15 10:54:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:54:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:9
 
[INFO][2017-07-15 10:54:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:54:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:9
 
[INFO][2017-07-15 10:54:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:54:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:29
 
[INFO][2017-07-15 10:54:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:54:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:30
 
[INFO][2017-07-15 10:54:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:54:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:25
 
[INFO][2017-07-15 10:54:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:54:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:49
 
[INFO][2017-07-15 10:54:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:54:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:50
 
[INFO][2017-07-15 10:54:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:54:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:51
 
[INFO][2017-07-15 10:54:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:54:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:52
 
[INFO][2017-07-15 10:54:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:54:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
参数2:9
 
[INFO][2017-07-15 10:54:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:54:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
参数2:9
 
[INFO][2017-07-15 10:54:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:54:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:3259
 
[INFO][2017-07-15 10:54:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:54:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:45
参数7:45
参数8:10
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:100
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:54:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:54:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:3157
 
[INFO][2017-07-15 10:54:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:54:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:9
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9112
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3157
 
[INFO][2017-07-15 10:54:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:54:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:3259
 
[INFO][2017-07-15 10:54:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:54:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:45
参数7:45
参数8:9
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:99
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:54:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:54:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:3259
 
[INFO][2017-07-15 10:54:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:54:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:4
参数7:5
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:9
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:54:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:54:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:3259
 
[INFO][2017-07-15 10:54:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:54:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:1
参数7:2
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:3
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:54:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:54:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:3259
 
[INFO][2017-07-15 10:54:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:54:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:1
参数7:1
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:2
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:55:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:55:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:3259
 
[INFO][2017-07-15 10:55:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:55:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:0
参数7:1
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:1
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:56:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:56:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-15 10:56:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:56:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:9
 
[INFO][2017-07-15 10:56:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:56:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:9
 
[INFO][2017-07-15 10:56:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:56:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:29
 
[INFO][2017-07-15 10:56:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:56:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:30
 
[INFO][2017-07-15 10:56:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:56:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:25
 
[INFO][2017-07-15 10:56:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:56:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:49
 
[INFO][2017-07-15 10:56:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:56:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:50
 
[INFO][2017-07-15 10:56:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:56:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:51
 
[INFO][2017-07-15 10:56:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 10:56:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:52
 
[INFO][2017-07-15 10:56:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:56:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
参数2:9
 
[INFO][2017-07-15 10:56:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 10:56:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
参数2:9
 
[INFO][2017-07-15 10:56:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:56:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:3259
 
[INFO][2017-07-15 10:56:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:56:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:4
参数7:4
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:8
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:56:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:56:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:3157
 
[INFO][2017-07-15 10:56:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:56:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:9
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:0
参数7:0
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9112
参数15:是
参数16:0
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3157
 
[INFO][2017-07-15 10:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:3259
 
[INFO][2017-07-15 10:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:4
参数7:5
参数8:1
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:10
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:57:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:57:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:3259
 
[INFO][2017-07-15 10:57:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:57:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:405
参数7:405
参数8:90
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:900
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:3259
 
[INFO][2017-07-15 10:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:4500
参数7:4500
参数8:1000
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 10:57:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:57:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:3157
 
[INFO][2017-07-15 10:57:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:57:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:9
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:4500
参数7:4500
参数8:1000
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9112
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3157
 
[INFO][2017-07-15 10:57:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:57:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2959
 
[INFO][2017-07-15 10:57:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:57:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
参数2:1245
参数3:1
参数4:0
参数5:1
参数6:4500
参数7:4500
参数8:1000
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:8887
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:2959
 
[INFO][2017-07-15 10:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 10:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2953
 
[INFO][2017-07-15 10:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 10:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:9
参数2:1244
参数3:1
参数4:0
参数5:1
参数6:4500
参数7:4500
参数8:1000
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:8881
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:2953
 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:3
 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 10:57:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 10:57:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:57:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:57:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 10:57:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 10:57:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 10:57:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 10:57:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 10:57:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 10:57:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 10:57:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 10:57:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 10:57:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
 
[INFO][2017-07-15 10:57:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-15 10:57:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 10:57:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:2
 
[INFO][2017-07-15 10:57:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 10:57:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 10:57:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49))  tmp_count 
[INFO][2017-07-15 10:57:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 10:57:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1301,1300,1299,1298)
                
            
            
                
                     and c.class_id in (50,51,52,49)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-15 10:57:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 11:00:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 11:00:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 11:00:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 11:00:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:3
 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 11:00:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 11:00:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 11:00:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 11:00:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 11:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 11:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 11:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 11:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 11:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 11:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 11:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 11:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 11:00:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 11:00:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 11:00:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 11:00:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
 
[INFO][2017-07-15 11:00:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-15 11:00:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 11:00:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-15 11:00:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 11:00:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-15 11:00:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 11:00:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:4386
 
[INFO][2017-07-15 11:00:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 11:00:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:1298
参数3:2
参数4:0
参数5:0
参数6:4
参数7:5
参数8:1
参数9:1
参数10:1
参数11:2.0
参数12:26.899999618530273
参数13:份
参数14:0
参数15:null
参数16:10
参数17:26
参数18:1234713952
参数19:4386
参数20:4454DCE59CD8769F7F396C83E153B54B
参数21:4386
 
[INFO][2017-07-15 11:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 11:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:4385
 
[INFO][2017-07-15 11:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 11:00:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:1299
参数3:2
参数4:0
参数5:0
参数6:0
参数7:0
参数8:0
参数9:1
参数10:0
参数11:2.0
参数12:27.899999618530273
参数13:份
参数14:0
参数15:null
参数16:0
参数17:26
参数18:1234725422
参数19:null
参数20:null
参数21:4385
 
[INFO][2017-07-15 11:00:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 11:00:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:4386
 
[WARN][2017-07-15 11:00:41] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-7 Resolved exception caused by Handler execution: java.lang.NullPointerException 
[INFO][2017-07-15 11:00:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 11:00:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:4386
 
[WARN][2017-07-15 11:00:49] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-6 Resolved exception caused by Handler execution: java.lang.NullPointerException 
[INFO][2017-07-15 15:28:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-15 15:28:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:chenbin
 
[INFO][2017-07-15 15:28:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 15:28:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:351
参数2:1032
 
[INFO][2017-07-15 15:28:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 15:28:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:352
参数2:1032
 
[INFO][2017-07-15 15:28:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 15:28:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:376
参数2:1032
 
[INFO][2017-07-15 15:28:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 15:28:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:378
参数2:1032
 
[INFO][2017-07-15 15:28:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 15:28:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:382
参数2:1032
 
[INFO][2017-07-15 15:28:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 15:28:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:383
参数2:1032
 
[INFO][2017-07-15 15:28:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 15:28:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:353
参数2:1032
 
[INFO][2017-07-15 15:28:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 15:28:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:372
参数2:1032
 
[INFO][2017-07-15 15:28:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 15:28:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:354
参数2:1032
 
[INFO][2017-07-15 15:28:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 15:28:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:355
参数2:1032
 
[INFO][2017-07-15 15:28:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 15:28:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:356
参数2:1032
 
[INFO][2017-07-15 15:28:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-15 15:28:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:9
 
[INFO][2017-07-15 15:28:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-15 15:28:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:9
参数2:2017-07-15
参数3:2017-07-15
参数4:9
参数5:2017-07-15
参数6:2017-07-15
参数7:9
参数8:2017-07-15
参数9:2017-07-15
参数10:9
参数11:2017-07-15
参数12:2017-07-15
参数13:9
参数14:2017-07-15
参数15:2017-07-15
参数16:9
参数17:2017-07-15
参数18:2017-07-15
 
[INFO][2017-07-15 15:28:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-15 15:28:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2017-07-15
参数2:2017-07-15
参数3:9
参数4:2017-07-14
参数5:2017-07-14
参数6:9
参数7:2017-07-08
参数8:2017-07-08
参数9:9
 
[INFO][2017-07-15 15:28:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_stores_manage.getPageRecord: 
select count(0) from (select a.stores_brand_id,a.brand_id,c.brand_name,a.stores_name,a.elem_restaurant_id,a.meituan_restaurant_id,b.linkman,b.start_time,b.end_time,b.address,b.description,b.intro from cds_stores_brand a
            left join cds_stores b on a.stores_id = b.stores_id
            left join cds_brand c on a.brand_id = c.brand_id)  tmp_count 
[INFO][2017-07-15 15:28:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 15:28:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_stores_manage.getPageRecord: 
select tmp.* from (select (row_number() Over(order by a.stores_id asc)) as rownumber, a.stores_brand_id,a.brand_id,c.brand_name,a.stores_name,a.elem_restaurant_id,a.meituan_restaurant_id,b.linkman,b.start_time,b.end_time,b.address,b.description,b.intro from cds_stores_brand a
            left join cds_stores b on a.stores_id = b.stores_id
            left join cds_brand c on a.brand_id = c.brand_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 15:28:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 15:28:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 15:28:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:1
参数2:9
 
[INFO][2017-07-15 15:28:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 15:28:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:9
 
[INFO][2017-07-15 15:28:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 15:28:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:9
 
[INFO][2017-07-15 15:28:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 15:28:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:29
 
[INFO][2017-07-15 15:28:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 15:28:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:30
 
[INFO][2017-07-15 15:28:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 15:28:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:25
 
[INFO][2017-07-15 15:28:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 15:28:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:49
 
[INFO][2017-07-15 15:28:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 15:28:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:50
 
[INFO][2017-07-15 15:28:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 15:28:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:51
 
[INFO][2017-07-15 15:28:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 15:28:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:52
 
[INFO][2017-07-15 15:28:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 15:28:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-15 15:28:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 15:28:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-15 15:28:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 15:28:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:3259
 
[INFO][2017-07-15 15:28:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 15:28:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:45
参数7:45
参数8:10
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:100
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 15:28:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 15:28:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:3157
 
[INFO][2017-07-15 15:28:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 15:28:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:9
参数2:1225
参数3:1
参数4:0
参数5:1
参数6:4500
参数7:4500
参数8:1000
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9112
参数15:是
参数16:10000
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3157
 
[INFO][2017-07-15 15:28:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 15:28:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:3259
 
[INFO][2017-07-15 15:28:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 15:28:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:4
参数7:5
参数8:1
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:10
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 15:28:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 15:28:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:3259
 
[INFO][2017-07-15 15:28:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 15:28:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:4
参数7:5
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:9
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 15:28:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-15 15:28:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:3259
 
[INFO][2017-07-15 15:28:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-15 15:28:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:9
参数2:1258
参数3:1
参数4:0
参数5:1
参数6:0
参数7:1
参数8:0
参数9:0
参数10:0
参数11:0.0
参数12:0.0
参数13:null
参数14:9218
参数15:是
参数16:1
参数17:0
参数18:null
参数19:null
参数20:null
参数21:3259
 
[INFO][2017-07-15 15:28:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:28:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 15:28:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:28:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 15:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 15:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 15:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 15:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 15:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 15:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 15:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:1
 
[INFO][2017-07-15 15:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 15:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 15:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 15:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 15:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 15:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:1
 
[INFO][2017-07-15 15:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 15:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 15:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 15:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
 
[INFO][2017-07-15 15:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 15:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 15:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 15:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:3
 
[INFO][2017-07-15 15:28:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:28:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 15:28:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 15:28:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 15:28:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 15:28:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 15:28:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:28:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 15:28:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:28:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 15:28:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 15:28:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 15:28:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 15:28:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 15:28:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 15:28:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 15:29:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 15:29:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 15:29:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 15:29:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:26
 
[INFO][2017-07-15 15:29:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 15:29:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:2
 
[INFO][2017-07-15 15:29:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 15:29:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:10
参数2:2
 
[INFO][2017-07-15 15:29:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 15:29:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
 
[INFO][2017-07-15 15:29:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 15:29:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:1
参数2:9
 
[INFO][2017-07-15 15:29:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 15:29:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
参数2:9
 
[INFO][2017-07-15 15:29:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 15:29:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:9
 
[INFO][2017-07-15 15:29:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 15:29:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:29
 
[INFO][2017-07-15 15:29:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 15:29:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:30
 
[INFO][2017-07-15 15:29:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 15:29:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:25
 
[INFO][2017-07-15 15:29:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 15:29:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:49
 
[INFO][2017-07-15 15:29:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 15:29:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:50
 
[INFO][2017-07-15 15:29:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 15:29:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:51
 
[INFO][2017-07-15 15:29:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-15 15:29:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:52
 
[INFO][2017-07-15 15:29:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 15:29:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1
参数2:9
 
[INFO][2017-07-15 15:29:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 12 
[INFO][2017-07-15 15:29:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1
参数2:9
 
[INFO][2017-07-15 15:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 15:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:31:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:1
 
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:1
 
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:31:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 15:31:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:31:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 15:31:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 15:31:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
 
[INFO][2017-07-15 15:31:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 15:31:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 15:31:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 15:31:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:3
 
[INFO][2017-07-15 15:31:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:31:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 15:31:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 15:31:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 15:31:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 15:31:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 15:55:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:55:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 15:55:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 15:55:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 15:55:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 15:55:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 15:55:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 15:55:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 15:55:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 15:55:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 15:55:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 15:55:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 15:55:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 15:55:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:26
 
[INFO][2017-07-15 15:55:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 15:55:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
 
[INFO][2017-07-15 15:55:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 15:55:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-15 15:55:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 15:55:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
 
[INFO][2017-07-15 15:56:06] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 10:02:15 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 15:56:06] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 15:56:08] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:203) localhost-startStop-2 Shutting down ExecutorService 'taskExecutor' 
[INFO][2017-07-15 15:56:08] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing Root WebApplicationContext: startup date [Sat Jul 15 10:02:13 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 15:56:08] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 15:56:21] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:305) RMI TCP Connection(3)-127.0.0.1 Root WebApplicationContext: initialization started 
[INFO][2017-07-15 15:56:21] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(3)-127.0.0.1 Refreshing Root WebApplicationContext: startup date [Sat Jul 15 15:56:21 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 15:56:21] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/datasource-configurer.xml] 
[INFO][2017-07-15 15:56:21] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/ActiveMQ.xml] 
[INFO][2017-07-15 15:56:22] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/redis.xml] 
[INFO][2017-07-15 15:56:22] org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:172) RMI TCP Connection(3)-127.0.0.1 Loading properties file from ServletContext resource [/WEB-INF/jdbc_sqlserver.properties] 
[INFO][2017-07-15 15:56:24] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(3)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 15:56:24] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:345) RMI TCP Connection(3)-127.0.0.1 Root WebApplicationContext: initialization completed in 2784 ms 
[INFO][2017-07-15 15:56:24] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:489) RMI TCP Connection(3)-127.0.0.1 FrameworkServlet 'core-controller': initialization started 
[INFO][2017-07-15 15:56:24] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(3)-127.0.0.1 Refreshing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 15:56:24 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 15:56:24] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/core-controller-servlet.xml] 
[INFO][2017-07-15 15:56:26] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:165) RMI TCP Connection(3)-127.0.0.1 Initializing ExecutorService  'taskExecutor' 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveElemeOrder]}" onto public java.lang.String com.controller.ApiServerController.ReceiveElemeOrder(com.opensdk.eleme.vo.MessageParam) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderPay() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderConfrim]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderConfrim() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderFulfillment]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderFulfillment() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderCancel]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderCancel() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrdersendstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrdersendstatus() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack2]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack2() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderSettlement]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderSettlement() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderShopstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderShopstatus() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveBaiduOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveBaiduOrderPay(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/CdsOutside]}" onto public java.util.Map com.controller.ApiServerController.CdsOutside(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/print],methods=[GET]}" onto public java.lang.String com.controller.ClientController.print() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/comment],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/home],methods=[GET]}" onto public java.lang.String com.controller.ClientController.home(org.springframework.ui.Model) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/all_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlisthistory() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/shop_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlisthistory() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/doorderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.doorderlist() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/business_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.business_data() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/good_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_data() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/good_analyse],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_analyse() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/report1],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report1() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/report2],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report2() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/comment_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment_data() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/member_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.member_data() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/pack_job],methods=[GET]}" onto public java.lang.String com.controller.ClientController.pack_job() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlist() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlisthistory() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/all_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlist() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/shop_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlist() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetElectronicScaleList],methods=[POST]}" onto public void com.controller.ClientSetController.GetElectronicScaleList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveElectronicScale(com.framework.mapping.system.CdsElectronicScale,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyElectronicScale(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/electronicScaleToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.electronicScaleToggle(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/cf_meal_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_meal_set() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/scanner_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.scanner_set() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/business],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.business() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/goodsManage],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.goodsManage() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/erp],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.erp() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/cf_task_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_task_set() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/toggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.toggle(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyprint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyprint(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/savePrint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePrint(com.framework.mapping.system.CdsPrints,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetScannerList],methods=[POST]}" onto public void com.controller.ClientSetController.GetScannerList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/print_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.print_set() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetPrintList],methods=[POST]}" onto public void com.controller.ClientSetController.print_set(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveScenner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveScenner(com.framework.mapping.system.CdsScanner,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyScanner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyScanner(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/scnnerToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.scnnerToggle(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/electronic_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.electronic_set() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/dianwoda_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.dianwoda_set() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetDianwodaList],methods=[POST]}" onto public void com.controller.ClientSetController.GetDianwodaList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveDianwoda(com.framework.mapping.system.CdsDianwodaPhone,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyDianwoda(com.framework.mapping.system.CdsDianwodaPhone) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/password_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.password_set() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/savePassword],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePassword(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/giftlist],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.giftlist() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Code/index]}" onto public void com.controller.CodeController.index(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus_bak]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus_bak() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/index],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.index() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/getUserName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.getUserName(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/updateErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErp(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/saveMsGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveMsGoods(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/GetErpGoodsLists],methods=[POST]}" onto public void com.controller.ErpGoodsController.GetErpGoodsLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveErp(java.util.HashMap,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/userIndex],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.userIndex(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/getUserList],methods=[POST]}" onto public void com.controller.ErpGoodsController.getUserList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/updateErpCount],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErpCount(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/index],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.index() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/checkName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.checkName(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsClassLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsClassLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveErp(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo2(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsInfo(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/getSigna],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.getSigna() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsClass(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/classIndex],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.classIndex() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoErp],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetErpInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/getPicAddress],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.getPicAddress(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetBrandTree() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userExitOut]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.userExitOut() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLoginVerify]}" onto public java.lang.String com.controller.LoginController.userLoginVerify(com.framework.mapping.system.CdsUsers,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/adminLoginVerify]}" onto public java.lang.String com.controller.LoginController.adminLoginVerify(com.framework.mapping.system.SysUser,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/isLogon]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.isLogon() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/LoginVerify]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.LoginVerify(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLogin]}" onto public java.lang.String com.controller.LoginController.userLogin() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/adminLogin]}" onto public java.lang.String com.controller.LoginController.adminLogin() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLoginOut]}" onto public java.lang.String com.controller.LoginController.userLoginOut() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/main/index],methods=[GET]}" onto public java.lang.String com.controller.MainController.index() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetBrandTree(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetStoresTree() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetGoodsTree() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/queryGoods],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.queryGoods() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/saveStoresClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveStoresClass(java.util.HashMap) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/elemClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteMT(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindMT(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemClassList],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getElemClassList(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteElem(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindElem(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBind(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/sellStatus],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.sellStatus(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteClass(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getGood_ids],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getGood_ids(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getCombobox],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getCombobox(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/saveGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveGoods(java.util.HashMap) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteGoods(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexPt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexPt(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexElem],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexElem(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getElemGood(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/elemBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleUpdateFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleUpdateFood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleDeleteFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleDeleteFood(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexMt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexMt(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtDeleteGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtDeleteGood(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getMtGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getMtGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBindMt],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBindMt(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresGoodsList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetStoresGoodsList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/updateStoresGoods],methods=[POST]}" onto public void com.controller.PtGoodManageController.updateStoresGoods(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetGoodsClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindUpdate],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindUpdate(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindQuery(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindDelete],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindDelete(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/meituanClassQuery],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.meituanClassQuery(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassRemoveBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassRemoveBind(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getStoresGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getStoresGoodsClass(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.eleClassGoodsQuery(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.mtClassGoodsQuery(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/validateStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.validateStores(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/GetStoresList],methods=[POST]}" onto public void com.controller.StoresController.GetStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_grid],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_grid() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresGoodsManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresGoodsManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresGoodsManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresManageController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test],methods=[GET]}" onto public java.lang.String com.controller.TestController.test(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/orderTest],methods=[GET]}" onto public java.util.Map com.controller.TestController.orderTest(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/orderTest2],methods=[GET]}" onto public java.lang.String com.controller.TestController.orderTest2(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test2],methods=[GET]}" onto public java.lang.String com.controller.TestController.test2(int) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/ordermessage],methods=[GET]}" onto public java.lang.String com.controller.TestController.ordermessage(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/sendCode],methods=[GET]}" onto public java.lang.String com.controller.TestController.sendCode() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test3],methods=[GET]}" onto public java.lang.String com.controller.TestController.test3(java.lang.String,int) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/order],methods=[GET]}" onto public java.lang.String com.controller.TestController.test4(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Udesk/orderlist],methods=[GET]}" onto public java.lang.String com.controller.UdeskController.doorderlist(javax.servlet.http.HttpServletRequest) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/doningTaskRecord]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.doningTaskRecord(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/taskGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_add(java.util.HashMap) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/do_task_Record]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.do_task_Record(java.util.HashMap) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/storesGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_add(java.util.HashMap) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/chufanMealList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.chufanMealList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getTreeGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getGoods() 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderlist],methods=[POST]}" onto public void com.api.GiftController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderlisthistory],methods=[POST]}" onto public void com.api.GiftController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/giftlist],methods=[POST]}" onto public void com.api.GiftController.giftlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.orderInfo(com.framework.mapping.system.CdsOrderInfo) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/viewgiftlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.viewgiftlog(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getTableGoods],methods=[GET]}" onto public void com.api.GiftController.getTableGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getBrandClass],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getBrandClass(com.framework.mapping.system.CdsClass) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.saveGift(java.lang.String,com.framework.mapping.system.CdsGiftRegisterList) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodAPI/getReportAnalyse],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.getReportAnalyse(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodAPI/goodReport],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.goodReport(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/homeApi/viewData],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.HomeController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getMealErpInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getMealErpInfo(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getStoresInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getStoresInfo() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChufangTask(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getChuErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChuErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMealErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/delMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delMealErpGoods(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addMaterial],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMaterial(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/saleSync],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.saleSync(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getGoodsInfo() throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoodsInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/delErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delErpGoodsInfo(com.framework.mapping.system.CdsErpGoodList) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/business/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.businessMg(java.lang.String,com.framework.mapping.system.CdsBusinessUnit) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/userAndShop/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.usersMg(java.lang.String,java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addErpGoodsToGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoodsToGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlist],methods=[POST]}" onto public void com.api.OrderController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlisthistory],methods=[POST]}" onto public void com.api.OrderController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/printOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/sendShOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendShOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelorder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelorder(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelDwdsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelDwdsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelShsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelShsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/vieworderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.vieworderlog(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewsendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewsendlog(java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/sendDwdOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendDwdOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistorysendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistorysendlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistoryorderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistoryorderlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/loginVerify],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.LoginVerify(com.framework.mapping.system.CdsStoresLogin) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/orderlist],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderList(java.util.HashMap) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/getOrderInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderInfo(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/optOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.optOrder(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/packJob],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.packJob(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/printrEmedy],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrEmedy(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/getConfigInfo],methods=[POST]}" onto public java.lang.String com.api.PrintController.getConfigInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/printrSuccess],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrSuccess(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ReportAPI/report1],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report1(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ReportAPI/report2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report2(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 15:56:27] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/udeskAPI/orderlist],methods=[POST]}" onto public void com.api.UdeskAPIController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 15:56:28] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.initControllerAdviceCache(RequestMappingHandlerAdapter.java:534) RMI TCP Connection(3)-127.0.0.1 Looking for @ControllerAdvice: WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 15:56:24 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 15:56:29] org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:354) RMI TCP Connection(3)-127.0.0.1 Mapped URL path [/**] onto handler 'org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler#0' 
[INFO][2017-07-15 15:56:29] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(3)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 15:56:29] org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:311) RMI TCP Connection(3)-127.0.0.1 Established shared JMS Connection: ActiveMQConnection {id=ID:QH-20161019UENF-60879-1500105389430-1:1,clientId=null,started=false} 
[INFO][2017-07-15 15:56:29] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1040) ActiveMQ Task-1 Successfully connected to tcp://127.0.0.1:61616 
[INFO][2017-07-15 15:56:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) RMI TCP Connection(3)-127.0.0.1 sys_dict.getRecord: 
select * from cds_options where option_name=? 
[INFO][2017-07-15 15:56:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) RMI TCP Connection(3)-127.0.0.1 参数1:site_options
 
[INFO][2017-07-15 15:56:30] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:508) RMI TCP Connection(3)-127.0.0.1 FrameworkServlet 'core-controller': initialization completed in 5820 ms 
[INFO][2017-07-15 15:57:34] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 15:56:24 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 15:57:34] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 15:57:35] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:203) localhost-startStop-2 Shutting down ExecutorService 'taskExecutor' 
[INFO][2017-07-15 15:57:35] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing Root WebApplicationContext: startup date [Sat Jul 15 15:56:21 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 15:57:35] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 16:14:53] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:305) RMI TCP Connection(3)-127.0.0.1 Root WebApplicationContext: initialization started 
[INFO][2017-07-15 16:14:53] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(3)-127.0.0.1 Refreshing Root WebApplicationContext: startup date [Sat Jul 15 16:14:53 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 16:14:53] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/datasource-configurer.xml] 
[INFO][2017-07-15 16:14:53] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/ActiveMQ.xml] 
[INFO][2017-07-15 16:14:53] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/redis.xml] 
[INFO][2017-07-15 16:14:53] org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:172) RMI TCP Connection(3)-127.0.0.1 Loading properties file from ServletContext resource [/WEB-INF/jdbc_sqlserver.properties] 
[INFO][2017-07-15 16:14:55] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(3)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 16:14:55] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:345) RMI TCP Connection(3)-127.0.0.1 Root WebApplicationContext: initialization completed in 2754 ms 
[INFO][2017-07-15 16:14:55] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:489) RMI TCP Connection(3)-127.0.0.1 FrameworkServlet 'core-controller': initialization started 
[INFO][2017-07-15 16:14:55] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(3)-127.0.0.1 Refreshing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 16:14:55 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 16:14:55] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/core-controller-servlet.xml] 
[INFO][2017-07-15 16:14:57] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:165) RMI TCP Connection(3)-127.0.0.1 Initializing ExecutorService  'taskExecutor' 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveElemeOrder]}" onto public java.lang.String com.controller.ApiServerController.ReceiveElemeOrder(com.opensdk.eleme.vo.MessageParam) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderPay() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderConfrim]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderConfrim() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderFulfillment]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderFulfillment() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderCancel]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderCancel() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrdersendstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrdersendstatus() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack2]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack2() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderSettlement]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderSettlement() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderShopstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderShopstatus() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveBaiduOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveBaiduOrderPay(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/CdsOutside]}" onto public java.util.Map com.controller.ApiServerController.CdsOutside(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/print],methods=[GET]}" onto public java.lang.String com.controller.ClientController.print() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/comment],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/home],methods=[GET]}" onto public java.lang.String com.controller.ClientController.home(org.springframework.ui.Model) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/doorderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.doorderlist() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/business_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.business_data() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/good_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_data() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/good_analyse],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_analyse() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/report1],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report1() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/report2],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report2() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/comment_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment_data() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/member_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.member_data() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/pack_job],methods=[GET]}" onto public java.lang.String com.controller.ClientController.pack_job() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlist() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlisthistory() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/all_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlist() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/shop_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlist() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/all_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlisthistory() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/shop_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlisthistory() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/cf_meal_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_meal_set() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/scanner_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.scanner_set() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/business],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.business() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/goodsManage],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.goodsManage() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/erp],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.erp() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/cf_task_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_task_set() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/toggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.toggle(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyprint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyprint(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/savePrint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePrint(com.framework.mapping.system.CdsPrints,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetScannerList],methods=[POST]}" onto public void com.controller.ClientSetController.GetScannerList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetPrintList],methods=[POST]}" onto public void com.controller.ClientSetController.print_set(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/print_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.print_set() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveScenner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveScenner(com.framework.mapping.system.CdsScanner,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyScanner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyScanner(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/scnnerToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.scnnerToggle(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/electronic_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.electronic_set() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/dianwoda_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.dianwoda_set() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetDianwodaList],methods=[POST]}" onto public void com.controller.ClientSetController.GetDianwodaList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveDianwoda(com.framework.mapping.system.CdsDianwodaPhone,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyDianwoda(com.framework.mapping.system.CdsDianwodaPhone) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/password_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.password_set() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/savePassword],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePassword(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/giftlist],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.giftlist() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetElectronicScaleList],methods=[POST]}" onto public void com.controller.ClientSetController.GetElectronicScaleList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveElectronicScale(com.framework.mapping.system.CdsElectronicScale,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyElectronicScale(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/electronicScaleToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.electronicScaleToggle(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Code/index]}" onto public void com.controller.CodeController.index(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus_bak]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus_bak() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/index],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.index() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/getUserName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.getUserName(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/updateErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErp(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/saveMsGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveMsGoods(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/GetErpGoodsLists],methods=[POST]}" onto public void com.controller.ErpGoodsController.GetErpGoodsLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveErp(java.util.HashMap,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/userIndex],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.userIndex(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/getUserList],methods=[POST]}" onto public void com.controller.ErpGoodsController.getUserList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/updateErpCount],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErpCount(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/index],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.index() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/checkName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.checkName(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveErp(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo2(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsInfo(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/getSigna],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.getSigna() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsClass(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/classIndex],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.classIndex() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoErp],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetErpInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/getPicAddress],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.getPicAddress(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetBrandTree() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsClassLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsClassLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userExitOut]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.userExitOut() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLoginVerify]}" onto public java.lang.String com.controller.LoginController.userLoginVerify(com.framework.mapping.system.CdsUsers,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/adminLoginVerify]}" onto public java.lang.String com.controller.LoginController.adminLoginVerify(com.framework.mapping.system.SysUser,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/isLogon]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.isLogon() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/LoginVerify]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.LoginVerify(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLogin]}" onto public java.lang.String com.controller.LoginController.userLogin() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/adminLogin]}" onto public java.lang.String com.controller.LoginController.adminLogin() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLoginOut]}" onto public java.lang.String com.controller.LoginController.userLoginOut() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/main/index],methods=[GET]}" onto public java.lang.String com.controller.MainController.index() 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetBrandTree(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetStoresTree() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetGoodsTree() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/queryGoods],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.queryGoods() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/saveStoresClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveStoresClass(java.util.HashMap) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/elemClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteMT(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindMT(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemClassList],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getElemClassList(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteElem(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindElem(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBind(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/sellStatus],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.sellStatus(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteClass(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getGood_ids],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getGood_ids(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getCombobox],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getCombobox(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/saveGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveGoods(java.util.HashMap) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteGoods(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexPt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexPt(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexElem],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexElem(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getElemGood(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/elemBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleUpdateFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleUpdateFood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleDeleteFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleDeleteFood(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexMt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexMt(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtDeleteGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtDeleteGood(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getMtGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getMtGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBindMt],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBindMt(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresGoodsList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetStoresGoodsList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/updateStoresGoods],methods=[POST]}" onto public void com.controller.PtGoodManageController.updateStoresGoods(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetGoodsClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindUpdate],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindUpdate(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindQuery(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindDelete],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindDelete(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/meituanClassQuery],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.meituanClassQuery(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassRemoveBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassRemoveBind(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getStoresGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getStoresGoodsClass(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.eleClassGoodsQuery(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.mtClassGoodsQuery(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/validateStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.validateStores(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/GetStoresList],methods=[POST]}" onto public void com.controller.StoresController.GetStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_grid],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_grid() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresGoodsManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresGoodsManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresGoodsManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresManageController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test],methods=[GET]}" onto public java.lang.String com.controller.TestController.test(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/orderTest],methods=[GET]}" onto public java.util.Map com.controller.TestController.orderTest(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/orderTest2],methods=[GET]}" onto public java.lang.String com.controller.TestController.orderTest2(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test2],methods=[GET]}" onto public java.lang.String com.controller.TestController.test2(int) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/ordermessage],methods=[GET]}" onto public java.lang.String com.controller.TestController.ordermessage(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/sendCode],methods=[GET]}" onto public java.lang.String com.controller.TestController.sendCode() throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test3],methods=[GET]}" onto public java.lang.String com.controller.TestController.test3(java.lang.String,int) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/order],methods=[GET]}" onto public java.lang.String com.controller.TestController.test4(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Udesk/orderlist],methods=[GET]}" onto public java.lang.String com.controller.UdeskController.doorderlist(javax.servlet.http.HttpServletRequest) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/doningTaskRecord]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.doningTaskRecord(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/taskGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_add(java.util.HashMap) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/do_task_Record]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.do_task_Record(java.util.HashMap) 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:58] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/storesGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_add(java.util.HashMap) 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/chufanMealList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.chufanMealList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getTreeGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getGoods() 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderlist],methods=[POST]}" onto public void com.api.GiftController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderlisthistory],methods=[POST]}" onto public void com.api.GiftController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/giftlist],methods=[POST]}" onto public void com.api.GiftController.giftlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.orderInfo(com.framework.mapping.system.CdsOrderInfo) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/viewgiftlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.viewgiftlog(java.lang.String) 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getTableGoods],methods=[GET]}" onto public void com.api.GiftController.getTableGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getBrandClass],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getBrandClass(com.framework.mapping.system.CdsClass) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.saveGift(java.lang.String,com.framework.mapping.system.CdsGiftRegisterList) 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodAPI/getReportAnalyse],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.getReportAnalyse(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodAPI/goodReport],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.goodReport(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/homeApi/viewData],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.HomeController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getMealErpInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getMealErpInfo(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getStoresInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getStoresInfo() throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChufangTask(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getChuErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChuErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMealErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/delMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delMealErpGoods(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addMaterial],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMaterial(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/saleSync],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.saleSync(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getGoodsInfo() throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoodsInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/delErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delErpGoodsInfo(com.framework.mapping.system.CdsErpGoodList) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/business/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.businessMg(java.lang.String,com.framework.mapping.system.CdsBusinessUnit) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/userAndShop/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.usersMg(java.lang.String,java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addErpGoodsToGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoodsToGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlist],methods=[POST]}" onto public void com.api.OrderController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlisthistory],methods=[POST]}" onto public void com.api.OrderController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/printOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/sendShOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendShOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelorder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelorder(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelDwdsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelDwdsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelShsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelShsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/vieworderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.vieworderlog(java.lang.String) 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewsendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewsendlog(java.lang.String) 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/sendDwdOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendDwdOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistorysendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistorysendlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistoryorderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistoryorderlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/loginVerify],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.LoginVerify(com.framework.mapping.system.CdsStoresLogin) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/orderlist],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderList(java.util.HashMap) 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/getOrderInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderInfo(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/optOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.optOrder(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/packJob],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.packJob(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/printrEmedy],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrEmedy(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/getConfigInfo],methods=[POST]}" onto public java.lang.String com.api.PrintController.getConfigInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/printrSuccess],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrSuccess(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ReportAPI/report1],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report1(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ReportAPI/report2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report2(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 16:14:59] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/udeskAPI/orderlist],methods=[POST]}" onto public void com.api.UdeskAPIController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 16:15:00] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.initControllerAdviceCache(RequestMappingHandlerAdapter.java:534) RMI TCP Connection(3)-127.0.0.1 Looking for @ControllerAdvice: WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 16:14:55 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 16:15:00] org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:354) RMI TCP Connection(3)-127.0.0.1 Mapped URL path [/**] onto handler 'org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler#0' 
[INFO][2017-07-15 16:15:00] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(3)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 16:15:00] org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:311) RMI TCP Connection(3)-127.0.0.1 Established shared JMS Connection: ActiveMQConnection {id=ID:QH-20161019UENF-61270-1500106500634-1:1,clientId=null,started=false} 
[INFO][2017-07-15 16:15:00] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1040) ActiveMQ Task-1 Successfully connected to tcp://127.0.0.1:61616 
[INFO][2017-07-15 16:15:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) RMI TCP Connection(3)-127.0.0.1 sys_dict.getRecord: 
select * from cds_options where option_name=? 
[INFO][2017-07-15 16:15:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) RMI TCP Connection(3)-127.0.0.1 参数1:site_options
 
[INFO][2017-07-15 16:15:01] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:508) RMI TCP Connection(3)-127.0.0.1 FrameworkServlet 'core-controller': initialization completed in 5466 ms 
[WARN][2017-07-15 16:24:05] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-80-exec-1 Resolved exception caused by Handler execution: com.framework.exception.NotLoginException: 您未登录系统或者登录已超时,请重新登录 
[INFO][2017-07-15 16:24:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-15 16:24:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:chenbin
 
[INFO][2017-07-15 16:24:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 16:24:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:351
参数2:1032
 
[INFO][2017-07-15 16:24:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 16:24:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:352
参数2:1032
 
[INFO][2017-07-15 16:24:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 16:24:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:375
参数2:1032
 
[INFO][2017-07-15 16:24:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 16:24:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:376
参数2:1032
 
[INFO][2017-07-15 16:24:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 16:24:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:355
参数2:1032
 
[INFO][2017-07-15 16:24:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 16:24:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:356
参数2:1032
 
[INFO][2017-07-15 16:24:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-15 16:24:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:9
 
[INFO][2017-07-15 16:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-15 16:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:9
参数2:2017-07-15
参数3:2017-07-15
参数4:9
参数5:2017-07-15
参数6:2017-07-15
参数7:9
参数8:2017-07-15
参数9:2017-07-15
参数10:9
参数11:2017-07-15
参数12:2017-07-15
参数13:9
参数14:2017-07-15
参数15:2017-07-15
参数16:9
参数17:2017-07-15
参数18:2017-07-15
 
[INFO][2017-07-15 16:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-15 16:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:2017-07-15
参数2:2017-07-15
参数3:9
参数4:2017-07-14
参数5:2017-07-14
参数6:9
参数7:2017-07-08
参数8:2017-07-08
参数9:9
 
[INFO][2017-07-15 16:24:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_area
             


         WHERE parentid = ? 
         
            ORDER BY id 
[INFO][2017-07-15 16:24:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:9001
 
[INFO][2017-07-15 16:24:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE city = ? 
         
            ORDER BY stores_id 
[INFO][2017-07-15 16:24:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:9001
 
[INFO][2017-07-15 16:24:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:24:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:24:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_stores.getStoresBrand: 
select count(0) from (select * from cds_stores_brand)  tmp_count 
[INFO][2017-07-15 16:24:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 16:24:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_stores.getStoresBrand: 
select tmp.* from (select (row_number() Over(order by stores_brand_id asc)) as rownumber, * from cds_stores_brand) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 16:24:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 16:24:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:24:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 16:24:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:24:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 16:24:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:24:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:
 
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:1
 
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:1
 
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:1
 
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:1
 
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:24:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:37:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_chufan_task
             


         WHERE stores_id = ? 
         
            ORDER BY es_id 
[INFO][2017-07-15 16:37:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:null
 
[INFO][2017-07-15 16:37:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT
                  
                    stores_id
                 , 
                    name
                 
                FROM cds_stores
             


         WHERE status = ? 
         
            ORDER BY stores_id 
[INFO][2017-07-15 16:37:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:1
 
[INFO][2017-07-15 16:37:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_kefu.getClassType: 
select class_name,class_id from cds_class_type 
[INFO][2017-07-15 16:37:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:37:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_kefu.getClass: 
select class_name,class_id,class_nick_name from cds_class 
[INFO][2017-07-15 16:37:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:37:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_kefu.getUsers: 
select user_login,id,user_nicename from cds_users 
[INFO][2017-07-15 16:37:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:37:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT
                  
                    stores_id
                 , 
                    name
                 
                FROM cds_stores
             


         WHERE status = ? 
         
            ORDER BY stores_id 
[INFO][2017-07-15 16:37:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:1
 
[INFO][2017-07-15 16:37:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_kefu.getClassType: 
select class_name,class_id from cds_class_type 
[INFO][2017-07-15 16:37:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:37:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_kefu.getClass: 
select class_name,class_id,class_nick_name from cds_class 
[INFO][2017-07-15 16:37:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:37:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_kefu.getUsers: 
select user_login,id,user_nicename from cds_users 
[INFO][2017-07-15 16:37:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:37:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_area
             


         WHERE parentid = ? 
         
            ORDER BY id 
[INFO][2017-07-15 16:37:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:9001
 
[INFO][2017-07-15 16:37:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE city = ? 
         
            ORDER BY stores_id 
[INFO][2017-07-15 16:37:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:9001
 
[INFO][2017-07-15 16:37:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:37:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:37:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_stores.getStoresBrand: 
select count(0) from (select * from cds_stores_brand)  tmp_count 
[INFO][2017-07-15 16:37:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:37:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_stores.getStoresBrand: 
select tmp.* from (select (row_number() Over(order by stores_brand_id asc)) as rownumber, * from cds_stores_brand) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 16:37:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:37:48] org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:96) http-nio-80-exec-6 I/O exception (org.apache.http.NoHttpResponseException) caught when processing request to {}->http://v2.openapi.ele.me:80: The target server failed to respond 
[INFO][2017-07-15 16:37:48] org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:112) http-nio-80-exec-6 Retrying request to {}->http://v2.openapi.ele.me:80 
[INFO][2017-07-15 16:37:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:37:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:37:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:37:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:37:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:37:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:37:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:37:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:37:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:37:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:1
 
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:1
 
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
 
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:37:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:37:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:37:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:37:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 16:37:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:37:56] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) http-nio-80-exec-3 Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml] 
[INFO][2017-07-15 16:37:56] org.springframework.jdbc.support.SQLErrorCodesFactory.<init>(SQLErrorCodesFactory.java:127) http-nio-80-exec-3 SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase, Hana] 
[WARN][2017-07-15 16:37:57] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-80-exec-3 Resolved exception caused by Handler execution: org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
### The error may exist in file [G:\work2\AppServerAPI2\web\WEB-INF\classes\sqlserver\cds_ptstores_manage.xml]
### The error may involve cds_ptstores_manage.GetStoresGoodsList-Inline
### The error occurred while setting parameters
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
; bad SQL grammar []; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。 
[INFO][2017-07-15 16:38:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:38:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:38:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:38:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:38:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:1
 
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:1
 
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
 
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:38:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:38:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 16:38:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[WARN][2017-07-15 16:38:05] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-80-exec-8 Resolved exception caused by Handler execution: org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
### The error may exist in file [G:\work2\AppServerAPI2\web\WEB-INF\classes\sqlserver\cds_ptstores_manage.xml]
### The error may involve cds_ptstores_manage.GetStoresGoodsList-Inline
### The error occurred while setting parameters
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
; bad SQL grammar []; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。 
[INFO][2017-07-15 16:38:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_area
             


         WHERE parentid = ? 
         
            ORDER BY id 
[INFO][2017-07-15 16:38:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:9001
 
[INFO][2017-07-15 16:38:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE city = ? 
         
            ORDER BY stores_id 
[INFO][2017-07-15 16:38:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:9001
 
[INFO][2017-07-15 16:38:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:38:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_stores.getStoresBrand: 
select count(0) from (select * from cds_stores_brand)  tmp_count 
[INFO][2017-07-15 16:38:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:38:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_stores.getStoresBrand: 
select tmp.* from (select (row_number() Over(order by stores_brand_id asc)) as rownumber, * from cds_stores_brand) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 16:38:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:38:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:38:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:38:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:1
 
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:1
 
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
 
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:38:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 16:38:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 16:38:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[WARN][2017-07-15 16:38:28] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-80-exec-8 Resolved exception caused by Handler execution: org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
### The error may exist in file [G:\work2\AppServerAPI2\web\WEB-INF\classes\sqlserver\cds_ptstores_manage.xml]
### The error may involve cds_ptstores_manage.GetStoresGoodsList-Inline
### The error occurred while setting parameters
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
; bad SQL grammar []; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。 
[INFO][2017-07-15 16:38:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:38:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:38:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:38:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:38:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:38:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:38:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:
 
[INFO][2017-07-15 16:38:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 16:38:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1
 
[INFO][2017-07-15 16:38:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-15 16:38:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:1
 
[INFO][2017-07-15 16:38:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 16:38:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1
 
[INFO][2017-07-15 16:38:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 16:38:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:1
 
[INFO][2017-07-15 16:38:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:38:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:38:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:38:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:38:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:1
 
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:1
 
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:38:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:38:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
 
[INFO][2017-07-15 16:38:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:38:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:38:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:38:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 16:38:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 16:38:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[WARN][2017-07-15 16:38:40] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-80-exec-8 Resolved exception caused by Handler execution: org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
### The error may exist in file [G:\work2\AppServerAPI2\web\WEB-INF\classes\sqlserver\cds_ptstores_manage.xml]
### The error may involve cds_ptstores_manage.GetStoresGoodsList-Inline
### The error occurred while setting parameters
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
; bad SQL grammar []; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。 
[INFO][2017-07-15 16:39:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:39:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:39:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:1
 
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:1
 
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 16:39:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:39:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
 
[INFO][2017-07-15 16:39:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 16:39:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:39:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 16:39:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[WARN][2017-07-15 16:39:07] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-80-exec-10 Resolved exception caused by Handler execution: org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
### The error may exist in file [G:\work2\AppServerAPI2\web\WEB-INF\classes\sqlserver\cds_ptstores_manage.xml]
### The error may involve cds_ptstores_manage.GetStoresGoodsList-Inline
### The error occurred while setting parameters
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
; bad SQL grammar []; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。 
[INFO][2017-07-15 16:39:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:39:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:39:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:39:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:39:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:1
 
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:1
 
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
 
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:39:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:39:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 16:39:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[WARN][2017-07-15 16:39:21] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-80-exec-8 Resolved exception caused by Handler execution: org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
### The error may exist in file [G:\work2\AppServerAPI2\web\WEB-INF\classes\sqlserver\cds_ptstores_manage.xml]
### The error may involve cds_ptstores_manage.GetStoresGoodsList-Inline
### The error occurred while setting parameters
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
; bad SQL grammar []; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。 
[INFO][2017-07-15 16:39:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:39:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:39:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:39:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:39:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:39:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:39:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:
 
[INFO][2017-07-15 16:39:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 16:39:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:1
 
[INFO][2017-07-15 16:39:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-15 16:39:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:1
 
[INFO][2017-07-15 16:39:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 16:39:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:1
 
[INFO][2017-07-15 16:39:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 16:39:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:1
 
[INFO][2017-07-15 16:39:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:39:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:39:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:39:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:39:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:39:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:39:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:1
 
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:1
 
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
 
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:39:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:39:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:39:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 16:39:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 16:39:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[WARN][2017-07-15 16:39:34] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-80-exec-1 Resolved exception caused by Handler execution: org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
### The error may exist in file [G:\work2\AppServerAPI2\web\WEB-INF\classes\sqlserver\cds_ptstores_manage.xml]
### The error may involve cds_ptstores_manage.GetStoresGoodsList-Inline
### The error occurred while setting parameters
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
; bad SQL grammar []; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。 
[INFO][2017-07-15 16:41:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-15 16:41:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:chenbin
 
[INFO][2017-07-15 16:41:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 16:41:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:351
参数2:1032
 
[INFO][2017-07-15 16:41:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 16:41:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:352
参数2:1032
 
[INFO][2017-07-15 16:41:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 16:41:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:375
参数2:1032
 
[INFO][2017-07-15 16:41:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 16:41:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:376
参数2:1032
 
[INFO][2017-07-15 16:41:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 16:41:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:355
参数2:1032
 
[INFO][2017-07-15 16:41:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 16:41:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:356
参数2:1032
 
[INFO][2017-07-15 16:41:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-15 16:41:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:9
 
[INFO][2017-07-15 16:41:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-15 16:41:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:9
参数2:2017-07-15
参数3:2017-07-15
参数4:9
参数5:2017-07-15
参数6:2017-07-15
参数7:9
参数8:2017-07-15
参数9:2017-07-15
参数10:9
参数11:2017-07-15
参数12:2017-07-15
参数13:9
参数14:2017-07-15
参数15:2017-07-15
参数16:9
参数17:2017-07-15
参数18:2017-07-15
 
[INFO][2017-07-15 16:41:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-15 16:41:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2017-07-15
参数2:2017-07-15
参数3:9
参数4:2017-07-14
参数5:2017-07-14
参数6:9
参数7:2017-07-08
参数8:2017-07-08
参数9:9
 
[INFO][2017-07-15 16:41:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 16:41:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:41:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 16:41:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:41:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 16:41:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:41:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 16:41:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:41:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 16:41:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:41:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 16:41:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 16:41:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[WARN][2017-07-15 16:41:11] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-9 Resolved exception caused by Handler execution: org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
### The error may exist in file [G:\work2\AppServerAPI2\web\WEB-INF\classes\sqlserver\cds_ptstores_manage.xml]
### The error may involve cds_ptstores_manage.GetStoresGoodsList-Inline
### The error occurred while setting parameters
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
; bad SQL grammar []; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。 
[INFO][2017-07-15 16:42:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 16:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 16:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 16:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 16:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 16:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 16:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 16:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 16:42:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
 
[INFO][2017-07-15 16:42:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-15 16:42:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
 
[INFO][2017-07-15 16:42:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:42:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:
 
[INFO][2017-07-15 16:42:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 16:42:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
 
[INFO][2017-07-15 16:42:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 16:42:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
 
[INFO][2017-07-15 16:42:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 16:42:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:42:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 16:42:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:42:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 16:42:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:42:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 16:42:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:42:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 16:42:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:42:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 16:42:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:42:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 16:42:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:42:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 16:42:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 16:42:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[WARN][2017-07-15 16:42:31] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-1 Resolved exception caused by Handler execution: org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
### The error may exist in file [G:\work2\AppServerAPI2\web\WEB-INF\classes\sqlserver\cds_ptstores_manage.xml]
### The error may involve cds_ptstores_manage.GetStoresGoodsList-Inline
### The error occurred while setting parameters
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。
; bad SQL grammar []; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'stores_brand_id' 无效。 
[INFO][2017-07-15 16:53:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:53:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 16:53:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:53:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 16:53:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:53:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:
 
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 16:53:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 16:53:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:53:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 16:53:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-15 16:53:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
 
[INFO][2017-07-15 16:53:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 16:53:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
 
[INFO][2017-07-15 16:53:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:53:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 16:53:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:53:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:
 
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 16:53:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 16:53:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:53:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 16:53:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:53:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
 
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:
 
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 16:53:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
 
[INFO][2017-07-15 16:53:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:53:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:67
 
[INFO][2017-07-15 16:53:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:53:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:73
 
[INFO][2017-07-15 16:53:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:53:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:78
 
[INFO][2017-07-15 16:53:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:53:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:79
 
[INFO][2017-07-15 16:53:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:53:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:82
 
[INFO][2017-07-15 16:53:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:53:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:85
 
[INFO][2017-07-15 16:53:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:53:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:126
 
[INFO][2017-07-15 16:53:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 16:53:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-15 16:53:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 16 and 30 
[INFO][2017-07-15 16:53:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-15 16:54:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 16:54:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
 
[INFO][2017-07-15 16:54:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 31 and 45 
[INFO][2017-07-15 16:54:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
 
[INFO][2017-07-15 16:54:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 16:54:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-15 16:54:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 46 and 60 
[INFO][2017-07-15 16:54:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-15 16:54:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 16:54:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
 
[INFO][2017-07-15 16:54:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 61 and 61 
[INFO][2017-07-15 16:54:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
 
[INFO][2017-07-15 16:54:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 16:54:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-15 16:54:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 46 and 60 
[INFO][2017-07-15 16:54:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-15 16:54:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 16:54:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-15 16:54:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 31 and 45 
[INFO][2017-07-15 16:54:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-15 16:54:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 16:54:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-15 16:54:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 16 and 30 
[INFO][2017-07-15 16:54:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-15 16:54:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 16:54:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1225
 
[INFO][2017-07-15 16:56:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:56:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:56:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:56:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:56:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:56:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1
 
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:1
 
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
 
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:56:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 16:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 16:56:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 16:56:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 16:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:57:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 16:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 16:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 16:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 16:57:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 16:57:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 16:57:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:26
 
[INFO][2017-07-15 16:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:57:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 16:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 16:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 16:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 16:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 16:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 16:57:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:26
 
[WARN][2017-07-15 16:57:12] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-80-exec-2 Resolved exception caused by Handler execution: java.lang.NullPointerException 
[INFO][2017-07-15 16:57:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id)  tmp_count 
[INFO][2017-07-15 16:57:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:57:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 16:57:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:57:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 16:57:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 16:57:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:57:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 16:57:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 16:57:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 16:57:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:57:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 16:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 16:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 16:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 16:57:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:26
 
[INFO][2017-07-15 16:57:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id)  tmp_count 
[INFO][2017-07-15 16:57:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:57:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 16:57:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-15 16:57:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:1
 
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:1
 
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
 
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:57:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:57:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 16:57:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 16:57:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:57:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 16:57:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-15 16:57:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:57:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:57:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:57:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:57:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 16:57:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 16:57:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 16:57:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:57:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 16:57:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 16:57:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 16:57:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 16:57:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:26
 
[INFO][2017-07-15 16:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id)  tmp_count 
[INFO][2017-07-15 16:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 16:57:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:57:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:57:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 16:57:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:57:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 16:57:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-15 16:57:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:57:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-15 16:57:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:57:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:57:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:1
 
[INFO][2017-07-15 16:57:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 16:57:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetGoodsClassList: 
select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ) 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1227280992
 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1227546890
 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1227537241
 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 16:57:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:26
参数2:特制饮品
 
[INFO][2017-07-15 16:57:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 16:57:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1227537242
 
[INFO][2017-07-15 16:57:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 16:57:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1227599564
 
[INFO][2017-07-15 16:57:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 16:57:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1227683784
 
[INFO][2017-07-15 16:57:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 16:57:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1227784895
 
[INFO][2017-07-15 16:57:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 16:57:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1227772954
 
[INFO][2017-07-15 16:57:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 16:57:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1227784897
 
[INFO][2017-07-15 16:57:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 16:57:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:1227772956
 
[INFO][2017-07-15 16:57:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-15 16:57:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
 
[INFO][2017-07-15 16:57:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 16:57:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
 
[WARN][2017-07-15 16:57:56] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-80-exec-9 Resolved exception caused by Handler execution: java.lang.NullPointerException 
[ERROR][2017-07-15 16:58:02] com.framework.util.BeanUtil.createBean(BeanUtil.java:43) http-nio-80-exec-1 Indexed or mapped properties are not supported on objects of type Map: rows[0] 
[INFO][2017-07-15 16:58:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_class(
          
            stores_brand_id
         , 
            class_id
         , 
            food_category_id
         , 
            meituan_cat_id
         , 
            type
         , 
            baidu_cat_id
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 16:58:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:26
参数2:38
参数3:null
参数4:null
参数5:1
参数6:null
 
[INFO][2017-07-15 16:58:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_class(
          
            stores_brand_id
         , 
            class_id
         , 
            food_category_id
         , 
            meituan_cat_id
         , 
            type
         , 
            baidu_cat_id
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 16:58:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:26
参数2:39
参数3:null
参数4:null
参数5:1
参数6:null
 
[INFO][2017-07-15 16:58:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_class(
          
            stores_brand_id
         , 
            class_id
         , 
            food_category_id
         , 
            meituan_cat_id
         , 
            type
         , 
            baidu_cat_id
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 16:58:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:26
参数2:40
参数3:null
参数4:null
参数5:1
参数6:null
 
[INFO][2017-07-15 16:58:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_class(
          
            stores_brand_id
         , 
            class_id
         , 
            food_category_id
         , 
            meituan_cat_id
         , 
            type
         , 
            baidu_cat_id
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 16:58:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:26
参数2:43
参数3:null
参数4:null
参数5:1
参数6:null
 
[INFO][2017-07-15 16:58:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:58:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 16:58:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 16:58:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 16:58:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:58:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:58:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:58:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:58:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:58:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 16:58:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 16:58:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 16:58:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:58:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 16:58:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 16:58:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 16:58:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 16:58:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:26
 
[INFO][2017-07-15 16:58:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 16:58:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
 
[INFO][2017-07-15 16:58:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 16:58:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:10
参数2:2
 
[INFO][2017-07-15 16:58:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 16:58:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
 
[INFO][2017-07-15 16:58:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43))  tmp_count 
[INFO][2017-07-15 16:58:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:2
 
[INFO][2017-07-15 16:58:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43)) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 16:58:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:2
 
[INFO][2017-07-15 16:58:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:58:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:58:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:58:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:58:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:58:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 16:58:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 16:58:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:12
 
[INFO][2017-07-15 16:58:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:58:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:2
参数2:12
 
[INFO][2017-07-15 16:58:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 16:58:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:2
参数2:12
 
[INFO][2017-07-15 16:58:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 16:58:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:27
 
[INFO][2017-07-15 16:58:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id)  tmp_count 
[INFO][2017-07-15 16:58:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:58:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 16:58:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 16:58:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:58:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:58:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:58:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:58:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:58:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:58:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 16:58:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 16:58:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:58:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 16:58:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 16:58:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 16:58:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 16:58:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:26
 
[INFO][2017-07-15 16:58:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 16:58:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
 
[INFO][2017-07-15 16:58:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 16:58:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:10
参数2:2
 
[INFO][2017-07-15 16:58:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 16:58:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
 
[INFO][2017-07-15 16:58:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:58:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
参数2:10
参数3:38
 
[INFO][2017-07-15 16:58:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-15 16:58:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
参数2:10
参数3:38
 
[INFO][2017-07-15 16:58:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:58:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-15 16:58:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-15 16:58:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-15 16:59:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:59:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:10
参数3:40
 
[INFO][2017-07-15 16:59:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-15 16:59:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:10
参数3:40
 
[INFO][2017-07-15 16:59:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:59:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:10
参数3:43
 
[INFO][2017-07-15 16:59:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-15 16:59:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:10
参数3:43
 
[INFO][2017-07-15 16:59:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:59:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
参数2:10
参数3:38
 
[INFO][2017-07-15 16:59:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-15 16:59:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
参数2:10
参数3:38
 
[INFO][2017-07-15 16:59:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:59:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:59:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 16:59:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:59:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 16:59:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 16:59:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 16:59:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 16:59:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 16:59:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 16:59:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 16:59:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 16:59:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 16:59:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:26
 
[INFO][2017-07-15 16:59:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 16:59:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
 
[INFO][2017-07-15 16:59:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 16:59:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:10
参数2:2
 
[INFO][2017-07-15 16:59:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 16:59:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
 
[INFO][2017-07-15 16:59:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43))  tmp_count 
[INFO][2017-07-15 16:59:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
 
[INFO][2017-07-15 16:59:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43)) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 16:59:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
 
[INFO][2017-07-15 17:00:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:00:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4500
参数7:4500
参数8:1000
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[WARN][2017-07-15 17:00:15] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-80-exec-3 Resolved exception caused by Handler execution: org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'mt_image_hash' 无效。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'mt_image_hash' 无效。
; bad SQL grammar []; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'mt_image_hash' 无效。 
[INFO][2017-07-15 17:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:03:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4500
参数7:4500
参数8:1000
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[WARN][2017-07-15 17:03:56] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-80-exec-2 Resolved exception caused by Handler execution: org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'mt_image_hash' 无效。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'mt_image_hash' 无效。
; bad SQL grammar []; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 列名 'mt_image_hash' 无效。 
[INFO][2017-07-15 17:07:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:07:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:07:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:07:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:07:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:07:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:07:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:07:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:
 
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:07:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-15 17:07:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:07:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:07:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:07:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:07:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:07:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:07:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 17:07:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:07:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 17:07:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:07:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:07:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:07:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:07:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:07:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 17:07:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 17:07:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:07:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 17:07:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 17:07:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 17:07:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 17:07:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
 
[INFO][2017-07-15 17:07:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-15 17:07:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 17:07:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:2
 
[INFO][2017-07-15 17:07:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:07:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 17:07:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43))  tmp_count 
[INFO][2017-07-15 17:07:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 17:07:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43)) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:07:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 17:08:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:08:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[WARN][2017-07-15 17:08:01] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-9 Resolved exception caused by Handler execution: org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
; uncategorized SQLException for SQL []; SQL state [S0001]; error code [245]; 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。 
[WARN][2017-07-15 17:18:40] org.apache.activemq.transport.failover.FailoverTransport.handleTransportFailure(FailoverTransport.java:251) ActiveMQ Transport: tcp:///127.0.0.1:61616@61271 Transport (tcp://127.0.0.1:61616) failed, reason:  java.io.EOFException, attempting to automatically reconnect 
[INFO][2017-07-15 17:18:40] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1042) ActiveMQ Task-3 Successfully reconnected to tcp://127.0.0.1:61616 
[INFO][2017-07-15 17:18:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:18:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[WARN][2017-07-15 17:18:40] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-3 Resolved exception caused by Handler execution: org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
; uncategorized SQLException for SQL []; SQL state [S0001]; error code [245]; 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。 
[INFO][2017-07-15 17:18:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:18:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[WARN][2017-07-15 17:18:47] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-10 Resolved exception caused by Handler execution: org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
; uncategorized SQLException for SQL []; SQL state [S0001]; error code [245]; 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。 
[INFO][2017-07-15 17:18:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:18:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:18:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:18:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:18:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:18:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:18:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 17:18:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-15 17:18:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:18:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 17:18:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 17:18:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-15 17:18:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 17:18:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
 
[INFO][2017-07-15 17:18:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:18:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-15 17:18:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 17:18:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:2
 
[INFO][2017-07-15 17:18:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:18:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 17:18:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43))  tmp_count 
[INFO][2017-07-15 17:18:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 17:18:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43)) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:18:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 17:19:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:19:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[WARN][2017-07-15 17:19:05] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-1 Resolved exception caused by Handler execution: org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
; uncategorized SQLException for SQL []; SQL state [S0001]; error code [245]; 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。 
[INFO][2017-07-15 17:19:12] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 16:14:55 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 17:19:12] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 17:19:12] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:203) localhost-startStop-2 Shutting down ExecutorService 'taskExecutor' 
[INFO][2017-07-15 17:19:12] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing Root WebApplicationContext: startup date [Sat Jul 15 16:14:53 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 17:19:12] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 17:19:25] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:305) RMI TCP Connection(3)-127.0.0.1 Root WebApplicationContext: initialization started 
[INFO][2017-07-15 17:19:25] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(3)-127.0.0.1 Refreshing Root WebApplicationContext: startup date [Sat Jul 15 17:19:25 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 17:19:25] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/datasource-configurer.xml] 
[INFO][2017-07-15 17:19:25] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/ActiveMQ.xml] 
[INFO][2017-07-15 17:19:26] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/redis.xml] 
[INFO][2017-07-15 17:19:26] org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:172) RMI TCP Connection(3)-127.0.0.1 Loading properties file from ServletContext resource [/WEB-INF/jdbc_sqlserver.properties] 
[INFO][2017-07-15 17:19:28] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(3)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 17:19:28] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:345) RMI TCP Connection(3)-127.0.0.1 Root WebApplicationContext: initialization completed in 2849 ms 
[INFO][2017-07-15 17:19:28] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:489) RMI TCP Connection(3)-127.0.0.1 FrameworkServlet 'core-controller': initialization started 
[INFO][2017-07-15 17:19:28] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(3)-127.0.0.1 Refreshing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 17:19:28 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 17:19:28] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/core-controller-servlet.xml] 
[INFO][2017-07-15 17:19:30] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:165) RMI TCP Connection(3)-127.0.0.1 Initializing ExecutorService  'taskExecutor' 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveElemeOrder]}" onto public java.lang.String com.controller.ApiServerController.ReceiveElemeOrder(com.opensdk.eleme.vo.MessageParam) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderPay() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderConfrim]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderConfrim() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderFulfillment]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderFulfillment() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderCancel]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderCancel() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrdersendstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrdersendstatus() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack2]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack2() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderSettlement]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderSettlement() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderShopstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderShopstatus() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveBaiduOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveBaiduOrderPay(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/CdsOutside]}" onto public java.util.Map com.controller.ApiServerController.CdsOutside(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/print],methods=[GET]}" onto public java.lang.String com.controller.ClientController.print() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/comment],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/home],methods=[GET]}" onto public java.lang.String com.controller.ClientController.home(org.springframework.ui.Model) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/all_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlisthistory() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/shop_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlisthistory() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/doorderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.doorderlist() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/business_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.business_data() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/good_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_data() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/good_analyse],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_analyse() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/report1],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report1() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/report2],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report2() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/comment_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment_data() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/member_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.member_data() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/pack_job],methods=[GET]}" onto public java.lang.String com.controller.ClientController.pack_job() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlist() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlisthistory() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/all_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlist() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/shop_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlist() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetElectronicScaleList],methods=[POST]}" onto public void com.controller.ClientSetController.GetElectronicScaleList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveElectronicScale(com.framework.mapping.system.CdsElectronicScale,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyElectronicScale(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/electronicScaleToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.electronicScaleToggle(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/cf_meal_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_meal_set() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/scanner_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.scanner_set() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/business],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.business() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/goodsManage],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.goodsManage() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/erp],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.erp() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/cf_task_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_task_set() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/toggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.toggle(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyprint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyprint(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/savePrint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePrint(com.framework.mapping.system.CdsPrints,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetScannerList],methods=[POST]}" onto public void com.controller.ClientSetController.GetScannerList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/print_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.print_set() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetPrintList],methods=[POST]}" onto public void com.controller.ClientSetController.print_set(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveScenner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveScenner(com.framework.mapping.system.CdsScanner,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyScanner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyScanner(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/scnnerToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.scnnerToggle(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/electronic_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.electronic_set() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/dianwoda_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.dianwoda_set() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetDianwodaList],methods=[POST]}" onto public void com.controller.ClientSetController.GetDianwodaList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveDianwoda(com.framework.mapping.system.CdsDianwodaPhone,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyDianwoda(com.framework.mapping.system.CdsDianwodaPhone) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/password_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.password_set() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/savePassword],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePassword(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/giftlist],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.giftlist() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Code/index]}" onto public void com.controller.CodeController.index(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus_bak]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus_bak() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/index],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/getUserName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.getUserName(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/updateErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErp(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/saveMsGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveMsGoods(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/GetErpGoodsLists],methods=[POST]}" onto public void com.controller.ErpGoodsController.GetErpGoodsLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveErp(java.util.HashMap,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/userIndex],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.userIndex(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/getUserList],methods=[POST]}" onto public void com.controller.ErpGoodsController.getUserList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/updateErpCount],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErpCount(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/index],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/checkName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.checkName(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsClassLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsClassLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveErp(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo2(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsInfo(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/getSigna],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.getSigna() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsClass(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/classIndex],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.classIndex() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoErp],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetErpInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/getPicAddress],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.getPicAddress(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetBrandTree() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userExitOut]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.userExitOut() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLoginVerify]}" onto public java.lang.String com.controller.LoginController.userLoginVerify(com.framework.mapping.system.CdsUsers,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/adminLoginVerify]}" onto public java.lang.String com.controller.LoginController.adminLoginVerify(com.framework.mapping.system.SysUser,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/isLogon]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.isLogon() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/LoginVerify]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.LoginVerify(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLogin]}" onto public java.lang.String com.controller.LoginController.userLogin() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/adminLogin]}" onto public java.lang.String com.controller.LoginController.adminLogin() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLoginOut]}" onto public java.lang.String com.controller.LoginController.userLoginOut() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/main/index],methods=[GET]}" onto public java.lang.String com.controller.MainController.index() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresGoodsList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetStoresGoodsList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/updateStoresGoods],methods=[POST]}" onto public void com.controller.PtGoodManageController.updateStoresGoods(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetGoodsClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindUpdate],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindUpdate(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindQuery(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindDelete],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindDelete(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/meituanClassQuery],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.meituanClassQuery(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassRemoveBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassRemoveBind(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getStoresGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getStoresGoodsClass(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.eleClassGoodsQuery(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.mtClassGoodsQuery(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetBrandTree(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetStoresTree() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetGoodsTree() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/queryGoods],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.queryGoods() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/saveStoresClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveStoresClass(java.util.HashMap) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/elemClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteMT(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindMT(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemClassList],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getElemClassList(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteElem(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindElem(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBind(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/sellStatus],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.sellStatus(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteClass(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getGood_ids],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getGood_ids(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getCombobox],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getCombobox(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/saveGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveGoods(java.util.HashMap) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteGoods(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexPt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexPt(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexElem],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexElem(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getElemGood(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/elemBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleUpdateFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleUpdateFood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleDeleteFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleDeleteFood(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexMt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexMt(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtDeleteGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtDeleteGood(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getMtGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getMtGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBindMt],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBindMt(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/validateStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.validateStores(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/GetStoresList],methods=[POST]}" onto public void com.controller.StoresController.GetStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_grid],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_grid() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresGoodsManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresGoodsManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresGoodsManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresManageController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test],methods=[GET]}" onto public java.lang.String com.controller.TestController.test(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/orderTest],methods=[GET]}" onto public java.util.Map com.controller.TestController.orderTest(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/orderTest2],methods=[GET]}" onto public java.lang.String com.controller.TestController.orderTest2(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test2],methods=[GET]}" onto public java.lang.String com.controller.TestController.test2(int) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/ordermessage],methods=[GET]}" onto public java.lang.String com.controller.TestController.ordermessage(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/sendCode],methods=[GET]}" onto public java.lang.String com.controller.TestController.sendCode() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test3],methods=[GET]}" onto public java.lang.String com.controller.TestController.test3(java.lang.String,int) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/order],methods=[GET]}" onto public java.lang.String com.controller.TestController.test4(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Udesk/orderlist],methods=[GET]}" onto public java.lang.String com.controller.UdeskController.doorderlist(javax.servlet.http.HttpServletRequest) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/doningTaskRecord]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.doningTaskRecord(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/taskGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_add(java.util.HashMap) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/do_task_Record]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.do_task_Record(java.util.HashMap) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/storesGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_add(java.util.HashMap) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/chufanMealList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.chufanMealList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderlist],methods=[POST]}" onto public void com.api.GiftController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderlisthistory],methods=[POST]}" onto public void com.api.GiftController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/giftlist],methods=[POST]}" onto public void com.api.GiftController.giftlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.orderInfo(com.framework.mapping.system.CdsOrderInfo) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/viewgiftlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.viewgiftlog(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getTableGoods],methods=[GET]}" onto public void com.api.GiftController.getTableGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getBrandClass],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getBrandClass(com.framework.mapping.system.CdsClass) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.saveGift(java.lang.String,com.framework.mapping.system.CdsGiftRegisterList) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getTreeGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getGoods() 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodAPI/getReportAnalyse],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.getReportAnalyse(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodAPI/goodReport],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.goodReport(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/homeApi/viewData],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.HomeController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addErpGoodsToGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoodsToGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getMealErpInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getMealErpInfo(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getStoresInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getStoresInfo() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChufangTask(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getChuErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChuErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMealErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/delMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delMealErpGoods(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addMaterial],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMaterial(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/saleSync],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.saleSync(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getGoodsInfo() throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoodsInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/delErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delErpGoodsInfo(com.framework.mapping.system.CdsErpGoodList) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/business/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.businessMg(java.lang.String,com.framework.mapping.system.CdsBusinessUnit) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/userAndShop/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.usersMg(java.lang.String,java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlist],methods=[POST]}" onto public void com.api.OrderController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlisthistory],methods=[POST]}" onto public void com.api.OrderController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/printOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/sendShOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendShOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelorder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelorder(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelDwdsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelDwdsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelShsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelShsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/vieworderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.vieworderlog(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewsendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewsendlog(java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/sendDwdOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendDwdOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistorysendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistorysendlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistoryorderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistoryorderlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/loginVerify],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.LoginVerify(com.framework.mapping.system.CdsStoresLogin) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/orderlist],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderList(java.util.HashMap) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/getOrderInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderInfo(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/optOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.optOrder(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/packJob],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.packJob(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/printrEmedy],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrEmedy(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/getConfigInfo],methods=[POST]}" onto public java.lang.String com.api.PrintController.getConfigInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/printrSuccess],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrSuccess(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ReportAPI/report1],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report1(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ReportAPI/report2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report2(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:19:31] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/udeskAPI/orderlist],methods=[POST]}" onto public void com.api.UdeskAPIController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:19:33] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.initControllerAdviceCache(RequestMappingHandlerAdapter.java:534) RMI TCP Connection(3)-127.0.0.1 Looking for @ControllerAdvice: WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 17:19:28 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 17:19:33] org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:354) RMI TCP Connection(3)-127.0.0.1 Mapped URL path [/**] onto handler 'org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler#0' 
[INFO][2017-07-15 17:19:33] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(3)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 17:19:33] org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:311) RMI TCP Connection(3)-127.0.0.1 Established shared JMS Connection: ActiveMQConnection {id=ID:QH-20161019UENF-64544-1500110373542-1:1,clientId=null,started=false} 
[INFO][2017-07-15 17:19:33] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1040) ActiveMQ Task-1 Successfully connected to tcp://127.0.0.1:61616 
[INFO][2017-07-15 17:19:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) RMI TCP Connection(3)-127.0.0.1 sys_dict.getRecord: 
select * from cds_options where option_name=? 
[INFO][2017-07-15 17:19:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) RMI TCP Connection(3)-127.0.0.1 参数1:site_options
 
[INFO][2017-07-15 17:19:34] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:508) RMI TCP Connection(3)-127.0.0.1 FrameworkServlet 'core-controller': initialization completed in 6053 ms 
[INFO][2017-07-15 17:20:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-15 17:20:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:chenbin
 
[INFO][2017-07-15 17:20:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:20:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:351
参数2:1032
 
[INFO][2017-07-15 17:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:352
参数2:1032
 
[INFO][2017-07-15 17:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:375
参数2:1032
 
[INFO][2017-07-15 17:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:376
参数2:1032
 
[INFO][2017-07-15 17:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:355
参数2:1032
 
[INFO][2017-07-15 17:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:20:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:356
参数2:1032
 
[INFO][2017-07-15 17:20:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-15 17:20:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:9
 
[INFO][2017-07-15 17:20:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-15 17:20:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:9
参数2:2017-07-15
参数3:2017-07-15
参数4:9
参数5:2017-07-15
参数6:2017-07-15
参数7:9
参数8:2017-07-15
参数9:2017-07-15
参数10:9
参数11:2017-07-15
参数12:2017-07-15
参数13:9
参数14:2017-07-15
参数15:2017-07-15
参数16:9
参数17:2017-07-15
参数18:2017-07-15
 
[INFO][2017-07-15 17:20:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-15 17:20:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2017-07-15
参数2:2017-07-15
参数3:9
参数4:2017-07-14
参数5:2017-07-14
参数6:9
参数7:2017-07-08
参数8:2017-07-08
参数9:9
 
[INFO][2017-07-15 17:20:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:20:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:20:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:20:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:20:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 17:20:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:20:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 17:20:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:20:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:20:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:20:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:20:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:20:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 17:20:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-15 17:20:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:20:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 17:20:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 17:20:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 17:20:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 17:20:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
 
[INFO][2017-07-15 17:20:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 17:20:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 17:20:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:2
 
[INFO][2017-07-15 17:20:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:20:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-15 17:20:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43))  tmp_count 
[INFO][2017-07-15 17:20:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 17:20:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43)) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:20:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 17:20:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43))  tmp_count 
[INFO][2017-07-15 17:20:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-15 17:20:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43)) tmp where tmp.rownumber between 11 and 13 
[INFO][2017-07-15 17:20:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-15 17:21:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:21:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[INFO][2017-07-15 17:21:07] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) http-nio-8001-exec-8 Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml] 
[INFO][2017-07-15 17:21:07] org.springframework.jdbc.support.SQLErrorCodesFactory.<init>(SQLErrorCodesFactory.java:127) http-nio-8001-exec-8 SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase, Hana] 
[WARN][2017-07-15 17:21:07] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-8 Resolved exception caused by Handler execution: org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
; uncategorized SQLException for SQL []; SQL state [S0001]; error code [245]; 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。 
[WARN][2017-07-15 17:27:44] org.apache.activemq.transport.failover.FailoverTransport.handleTransportFailure(FailoverTransport.java:251) ActiveMQ Transport: tcp:///127.0.0.1:61616@64545 Transport (tcp://127.0.0.1:61616) failed, reason:  java.io.EOFException, attempting to automatically reconnect 
[INFO][2017-07-15 17:27:44] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1042) ActiveMQ Task-3 Successfully reconnected to tcp://127.0.0.1:61616 
[INFO][2017-07-15 17:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:27:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[WARN][2017-07-15 17:27:44] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-2 Resolved exception caused by Handler execution: org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
; uncategorized SQLException for SQL []; SQL state [S0001]; error code [245]; 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。 
[INFO][2017-07-15 17:34:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43))  tmp_count 
[INFO][2017-07-15 17:34:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 17:34:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43)) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:34:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 17:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:34:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[WARN][2017-07-15 17:34:55] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-1 Resolved exception caused by Handler execution: org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
; uncategorized SQLException for SQL []; SQL state [S0001]; error code [245]; 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。 
[INFO][2017-07-15 17:40:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:40:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:40:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:40:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:40:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:40:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:40:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:40:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:40:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:40:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:40:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:40:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-15 17:40:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-15 17:40:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:40:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:40:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 17:40:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-15 17:40:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227280992
 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227546890
 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:40:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-15 17:40:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227537241
 
[INFO][2017-07-15 17:40:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:40:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
参数2:特制饮品
 
[INFO][2017-07-15 17:40:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227537242
 
[INFO][2017-07-15 17:40:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227599564
 
[INFO][2017-07-15 17:40:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227683784
 
[INFO][2017-07-15 17:40:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227784895
 
[INFO][2017-07-15 17:40:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227772954
 
[INFO][2017-07-15 17:40:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227784897
 
[INFO][2017-07-15 17:40:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?

                
            
            
                
                    and class_id not in (43,40,39,38))  tmp_count 
[INFO][2017-07-15 17:40:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-15 17:40:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetClassList: 
select * from cds_class
         
         WHERE brand_id = ?

                
            
            
                
                    and class_id not in (43,40,39,38) 
[INFO][2017-07-15 17:40:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-15 17:40:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227772956
 
[INFO][2017-07-15 17:40:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:40:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 17:40:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-15 17:40:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 17:40:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:40:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-15 17:40:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 17:40:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 17:40:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 17:40:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 17:40:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227280992
 
[INFO][2017-07-15 17:40:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:40:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227546890
 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227537241
 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:特制饮品
 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227537242
 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227599564
 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227683784
 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227784895
 
[INFO][2017-07-15 17:40:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227772954
 
[INFO][2017-07-15 17:40:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227784897
 
[INFO][2017-07-15 17:40:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:40:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227772956
 
[INFO][2017-07-15 17:40:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:40:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:40:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:40:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:40:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:40:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:40:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 17:40:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-15 17:40:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:40:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 17:40:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 17:40:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 17:40:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 17:40:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
 
[INFO][2017-07-15 17:40:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:40:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 17:40:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 17:40:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-15 17:40:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:40:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-15 17:40:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43))  tmp_count 
[INFO][2017-07-15 17:40:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 17:40:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43)) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:40:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 17:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
 
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:
 
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:41:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
 
[INFO][2017-07-15 17:41:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:41:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:41:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_stores.GetGoodsClassLists: 
select count(0) from (select * from  cds_class)  tmp_count 
[INFO][2017-07-15 17:41:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:41:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_stores.GetGoodsClassLists: 
select tmp.* from (select (row_number() Over(order by listorder asc)) as rownumber, * from  cds_class) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:41:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:41:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsClassLists: 
select count(0) from (select * from  cds_class)  tmp_count 
[INFO][2017-07-15 17:41:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:41:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsClassLists: 
select tmp.* from (select (row_number() Over(order by listorder asc)) as rownumber, * from  cds_class) tmp where tmp.rownumber between 11 and 14 
[INFO][2017-07-15 17:41:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:41:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsClassLists: 
select count(0) from (select * from  cds_class
         
         WHERE  (
                         brand_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:41:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-15 17:41:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsClassLists: 
select tmp.* from (select (row_number() Over(order by listorder asc)) as rownumber, * from  cds_class
         
         WHERE  (
                         brand_id = ?
                      )) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:41:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-15 17:41:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsClassLists: 
select count(0) from (select * from  cds_class
         
         WHERE  (
                         brand_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:41:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 17:41:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsClassLists: 
select tmp.* from (select (row_number() Over(order by listorder asc)) as rownumber, * from  cds_class
         
         WHERE  (
                         brand_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 17:41:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-15 17:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:
 
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:42:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-15 17:42:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_area
             


         WHERE parentid = ? 
         
            ORDER BY id 
[INFO][2017-07-15 17:42:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:9001
 
[INFO][2017-07-15 17:42:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE city = ? 
         
            ORDER BY stores_id 
[INFO][2017-07-15 17:42:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:9001
 
[INFO][2017-07-15 17:42:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:42:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.getStoresBrand: 
select count(0) from (select * from cds_stores_brand)  tmp_count 
[INFO][2017-07-15 17:42:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:42:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.getStoresBrand: 
select tmp.* from (select (row_number() Over(order by stores_brand_id asc)) as rownumber, * from cds_stores_brand) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 17:42:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-11 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-11  
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-12 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-12  
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-11 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-11  
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-12 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-12  
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-11 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-11  
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-12 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-12  
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 17:42:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:42:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:42:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:42:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:42:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:42:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-15 17:42:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-15 17:42:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:42:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-15 17:42:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:42:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:42:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 17:42:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:42:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 17:42:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-15 17:42:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 17:42:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:42:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-15 17:42:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 17:42:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 17:42:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 17:42:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 17:42:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:42:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227280992
 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227546890
 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227537241
 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
参数2:特制饮品
 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227537242
 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227599564
 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227683784
 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:42:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227784895
 
[INFO][2017-07-15 17:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227772954
 
[INFO][2017-07-15 17:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227784897
 
[INFO][2017-07-15 17:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:42:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227772956
 
[INFO][2017-07-15 17:42:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-11 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-11  
[INFO][2017-07-15 17:42:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-11 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-11  
[INFO][2017-07-15 17:42:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-11 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-11  
[INFO][2017-07-15 17:42:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:42:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 17:42:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:42:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 17:42:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:42:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:42:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:42:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:42:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:42:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 17:42:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-15 17:42:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:42:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-15 17:42:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 17:42:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-15 17:42:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 17:42:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
 
[INFO][2017-07-15 17:42:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-15 17:42:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 17:42:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:10
参数2:2
 
[INFO][2017-07-15 17:42:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-12 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:42:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-12 参数1:2
 
[INFO][2017-07-15 17:42:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:42:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
参数3:40
 
[INFO][2017-07-15 17:42:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-15 17:42:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
参数3:40
 
[INFO][2017-07-15 17:42:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:42:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-15 17:42:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-15 17:42:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-15 17:42:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:42:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
参数3:38
 
[INFO][2017-07-15 17:42:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-15 17:42:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
参数3:38
 
[INFO][2017-07-15 17:43:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43))  tmp_count 
[INFO][2017-07-15 17:43:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 17:43:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43)) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:43:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[WARN][2017-07-15 17:45:12] org.apache.activemq.transport.failover.FailoverTransport.handleTransportFailure(FailoverTransport.java:251) ActiveMQ Transport: tcp:///127.0.0.1:61616@64936 Transport (tcp://127.0.0.1:61616) failed, reason:  java.io.EOFException, attempting to automatically reconnect 
[INFO][2017-07-15 17:45:12] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1042) ActiveMQ Task-5 Successfully reconnected to tcp://127.0.0.1:61616 
[INFO][2017-07-15 17:45:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:45:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[WARN][2017-07-15 17:45:15] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-2 Resolved exception caused by Handler execution: org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
; uncategorized SQLException for SQL []; SQL state [S0001]; error code [245]; 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。 
[INFO][2017-07-15 17:45:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:45:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[WARN][2017-07-15 17:45:23] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-7 Resolved exception caused by Handler execution: org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
; uncategorized SQLException for SQL []; SQL state [S0001]; error code [245]; 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。 
[INFO][2017-07-15 17:45:47] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 17:19:28 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 17:45:47] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 17:45:47] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:203) localhost-startStop-2 Shutting down ExecutorService 'taskExecutor' 
[INFO][2017-07-15 17:45:47] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing Root WebApplicationContext: startup date [Sat Jul 15 17:19:25 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 17:45:47] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 17:45:58] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:305) RMI TCP Connection(3)-127.0.0.1 Root WebApplicationContext: initialization started 
[INFO][2017-07-15 17:45:58] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(3)-127.0.0.1 Refreshing Root WebApplicationContext: startup date [Sat Jul 15 17:45:58 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 17:45:58] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/datasource-configurer.xml] 
[INFO][2017-07-15 17:45:58] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/ActiveMQ.xml] 
[INFO][2017-07-15 17:45:59] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/redis.xml] 
[INFO][2017-07-15 17:45:59] org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:172) RMI TCP Connection(3)-127.0.0.1 Loading properties file from ServletContext resource [/WEB-INF/jdbc_sqlserver.properties] 
[INFO][2017-07-15 17:46:01] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(3)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 17:46:01] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:345) RMI TCP Connection(3)-127.0.0.1 Root WebApplicationContext: initialization completed in 2937 ms 
[INFO][2017-07-15 17:46:01] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:489) RMI TCP Connection(3)-127.0.0.1 FrameworkServlet 'core-controller': initialization started 
[INFO][2017-07-15 17:46:01] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(3)-127.0.0.1 Refreshing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 17:46:01 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 17:46:01] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/core-controller-servlet.xml] 
[INFO][2017-07-15 17:46:03] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:165) RMI TCP Connection(3)-127.0.0.1 Initializing ExecutorService  'taskExecutor' 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/CdsOutside]}" onto public java.util.Map com.controller.ApiServerController.CdsOutside(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveElemeOrder]}" onto public java.lang.String com.controller.ApiServerController.ReceiveElemeOrder(com.opensdk.eleme.vo.MessageParam) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderPay() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderConfrim]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderConfrim() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderFulfillment]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderFulfillment() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderCancel]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderCancel() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrdersendstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrdersendstatus() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack2]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack2() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderSettlement]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderSettlement() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderShopstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderShopstatus() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveBaiduOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveBaiduOrderPay(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/print],methods=[GET]}" onto public java.lang.String com.controller.ClientController.print() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/comment],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/home],methods=[GET]}" onto public java.lang.String com.controller.ClientController.home(org.springframework.ui.Model) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/doorderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.doorderlist() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/business_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.business_data() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/good_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_data() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/good_analyse],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_analyse() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/report1],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report1() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/report2],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report2() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/comment_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment_data() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/member_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.member_data() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/pack_job],methods=[GET]}" onto public java.lang.String com.controller.ClientController.pack_job() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlist() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlisthistory() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/all_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlist() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/shop_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlist() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/all_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlisthistory() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/shop_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlisthistory() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/cf_meal_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_meal_set() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/scanner_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.scanner_set() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/business],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.business() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/goodsManage],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.goodsManage() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/erp],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.erp() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/cf_task_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_task_set() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/toggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.toggle(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyprint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyprint(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/savePrint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePrint(com.framework.mapping.system.CdsPrints,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetScannerList],methods=[POST]}" onto public void com.controller.ClientSetController.GetScannerList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetPrintList],methods=[POST]}" onto public void com.controller.ClientSetController.print_set(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/print_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.print_set() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveScenner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveScenner(com.framework.mapping.system.CdsScanner,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyScanner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyScanner(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/scnnerToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.scnnerToggle(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/electronic_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.electronic_set() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/dianwoda_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.dianwoda_set() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetDianwodaList],methods=[POST]}" onto public void com.controller.ClientSetController.GetDianwodaList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveDianwoda(com.framework.mapping.system.CdsDianwodaPhone,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyDianwoda(com.framework.mapping.system.CdsDianwodaPhone) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/password_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.password_set() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/savePassword],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePassword(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/giftlist],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.giftlist() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetElectronicScaleList],methods=[POST]}" onto public void com.controller.ClientSetController.GetElectronicScaleList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveElectronicScale(com.framework.mapping.system.CdsElectronicScale,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyElectronicScale(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/electronicScaleToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.electronicScaleToggle(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Code/index]}" onto public void com.controller.CodeController.index(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus_bak]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus_bak() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/index],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/getUserName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.getUserName(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/updateErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErp(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/saveMsGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveMsGoods(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/GetErpGoodsLists],methods=[POST]}" onto public void com.controller.ErpGoodsController.GetErpGoodsLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveErp(java.util.HashMap,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/userIndex],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.userIndex(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/getUserList],methods=[POST]}" onto public void com.controller.ErpGoodsController.getUserList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/updateErpCount],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErpCount(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/index],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/checkName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.checkName(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveErp(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo2(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsInfo(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/getSigna],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.getSigna() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsClass(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/classIndex],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.classIndex() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoErp],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetErpInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/getPicAddress],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.getPicAddress(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetBrandTree() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsClassLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsClassLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userExitOut]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.userExitOut() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLoginVerify]}" onto public java.lang.String com.controller.LoginController.userLoginVerify(com.framework.mapping.system.CdsUsers,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/adminLoginVerify]}" onto public java.lang.String com.controller.LoginController.adminLoginVerify(com.framework.mapping.system.SysUser,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/isLogon]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.isLogon() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/LoginVerify]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.LoginVerify(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLogin]}" onto public java.lang.String com.controller.LoginController.userLogin() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/adminLogin]}" onto public java.lang.String com.controller.LoginController.adminLogin() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLoginOut]}" onto public java.lang.String com.controller.LoginController.userLoginOut() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/main/index],methods=[GET]}" onto public java.lang.String com.controller.MainController.index() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetBrandTree(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetStoresTree() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetGoodsTree() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/queryGoods],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.queryGoods() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/saveStoresClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveStoresClass(java.util.HashMap) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/elemClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteMT(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindMT(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemClassList],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getElemClassList(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteElem(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindElem(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBind(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/sellStatus],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.sellStatus(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteClass(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getGood_ids],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getGood_ids(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getCombobox],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getCombobox(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/saveGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveGoods(java.util.HashMap) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteGoods(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexPt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexPt(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexElem],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexElem(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getElemGood(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/elemBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleUpdateFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleUpdateFood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleDeleteFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleDeleteFood(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexMt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexMt(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtDeleteGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtDeleteGood(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getMtGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getMtGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBindMt],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBindMt(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresGoodsList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetStoresGoodsList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/updateStoresGoods],methods=[POST]}" onto public void com.controller.PtGoodManageController.updateStoresGoods(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetGoodsClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindUpdate],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindUpdate(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindQuery(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindDelete],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindDelete(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/meituanClassQuery],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.meituanClassQuery(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassRemoveBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassRemoveBind(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getStoresGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getStoresGoodsClass(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.eleClassGoodsQuery(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.mtClassGoodsQuery(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/validateStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.validateStores(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/GetStoresList],methods=[POST]}" onto public void com.controller.StoresController.GetStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_grid],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_grid() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresGoodsManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresGoodsManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresGoodsManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresManageController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test],methods=[GET]}" onto public java.lang.String com.controller.TestController.test(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/orderTest],methods=[GET]}" onto public java.util.Map com.controller.TestController.orderTest(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/orderTest2],methods=[GET]}" onto public java.lang.String com.controller.TestController.orderTest2(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test2],methods=[GET]}" onto public java.lang.String com.controller.TestController.test2(int) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/ordermessage],methods=[GET]}" onto public java.lang.String com.controller.TestController.ordermessage(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/sendCode],methods=[GET]}" onto public java.lang.String com.controller.TestController.sendCode() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test3],methods=[GET]}" onto public java.lang.String com.controller.TestController.test3(java.lang.String,int) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/order],methods=[GET]}" onto public java.lang.String com.controller.TestController.test4(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Udesk/orderlist],methods=[GET]}" onto public java.lang.String com.controller.UdeskController.doorderlist(javax.servlet.http.HttpServletRequest) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/doningTaskRecord]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.doningTaskRecord(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/taskGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_add(java.util.HashMap) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/do_task_Record]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.do_task_Record(java.util.HashMap) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/storesGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_add(java.util.HashMap) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/chufanMealList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.chufanMealList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getTreeGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getGoods() 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderlist],methods=[POST]}" onto public void com.api.GiftController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderlisthistory],methods=[POST]}" onto public void com.api.GiftController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/giftlist],methods=[POST]}" onto public void com.api.GiftController.giftlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.orderInfo(com.framework.mapping.system.CdsOrderInfo) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/viewgiftlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.viewgiftlog(java.lang.String) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getTableGoods],methods=[GET]}" onto public void com.api.GiftController.getTableGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getBrandClass],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getBrandClass(com.framework.mapping.system.CdsClass) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.saveGift(java.lang.String,com.framework.mapping.system.CdsGiftRegisterList) 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodAPI/getReportAnalyse],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.getReportAnalyse(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodAPI/goodReport],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.goodReport(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/homeApi/viewData],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.HomeController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getMealErpInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getMealErpInfo(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getStoresInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getStoresInfo() throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChufangTask(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 17:46:04] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getChuErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChuErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMealErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/delMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delMealErpGoods(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addMaterial],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMaterial(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/saleSync],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.saleSync(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getGoodsInfo() throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoodsInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/delErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delErpGoodsInfo(com.framework.mapping.system.CdsErpGoodList) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/business/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.businessMg(java.lang.String,com.framework.mapping.system.CdsBusinessUnit) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/userAndShop/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.usersMg(java.lang.String,java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addErpGoodsToGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoodsToGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlist],methods=[POST]}" onto public void com.api.OrderController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlisthistory],methods=[POST]}" onto public void com.api.OrderController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/printOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/sendShOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendShOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelorder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelorder(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelDwdsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelDwdsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelShsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelShsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/vieworderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.vieworderlog(java.lang.String) 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewsendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewsendlog(java.lang.String) 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/sendDwdOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendDwdOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistorysendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistorysendlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistoryorderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistoryorderlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/loginVerify],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.LoginVerify(com.framework.mapping.system.CdsStoresLogin) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/orderlist],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderList(java.util.HashMap) 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/getOrderInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderInfo(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/optOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.optOrder(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/packJob],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.packJob(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/printrEmedy],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrEmedy(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/getConfigInfo],methods=[POST]}" onto public java.lang.String com.api.PrintController.getConfigInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/printrSuccess],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrSuccess(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ReportAPI/report1],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report1(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ReportAPI/report2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report2(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:46:05] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/udeskAPI/orderlist],methods=[POST]}" onto public void com.api.UdeskAPIController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:46:06] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.initControllerAdviceCache(RequestMappingHandlerAdapter.java:534) RMI TCP Connection(3)-127.0.0.1 Looking for @ControllerAdvice: WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 17:46:01 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 17:46:06] org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:354) RMI TCP Connection(3)-127.0.0.1 Mapped URL path [/**] onto handler 'org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler#0' 
[INFO][2017-07-15 17:46:06] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(3)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 17:46:06] org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:311) RMI TCP Connection(3)-127.0.0.1 Established shared JMS Connection: ActiveMQConnection {id=ID:QH-20161019UENF-49297-1500111966789-1:1,clientId=null,started=false} 
[INFO][2017-07-15 17:46:06] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1040) ActiveMQ Task-1 Successfully connected to tcp://127.0.0.1:61616 
[INFO][2017-07-15 17:46:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) RMI TCP Connection(3)-127.0.0.1 sys_dict.getRecord: 
select * from cds_options where option_name=? 
[INFO][2017-07-15 17:46:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) RMI TCP Connection(3)-127.0.0.1 参数1:site_options
 
[INFO][2017-07-15 17:46:07] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:508) RMI TCP Connection(3)-127.0.0.1 FrameworkServlet 'core-controller': initialization completed in 6049 ms 
[INFO][2017-07-15 17:46:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-15 17:46:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:chenbin
 
[INFO][2017-07-15 17:46:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:46:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:351
参数2:1032
 
[INFO][2017-07-15 17:46:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:46:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:352
参数2:1032
 
[INFO][2017-07-15 17:46:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:46:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:375
参数2:1032
 
[INFO][2017-07-15 17:46:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:46:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:376
参数2:1032
 
[INFO][2017-07-15 17:46:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:46:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:355
参数2:1032
 
[INFO][2017-07-15 17:46:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:46:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:356
参数2:1032
 
[INFO][2017-07-15 17:46:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-15 17:46:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
 
[INFO][2017-07-15 17:46:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-15 17:46:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:9
参数2:2017-07-15
参数3:2017-07-15
参数4:9
参数5:2017-07-15
参数6:2017-07-15
参数7:9
参数8:2017-07-15
参数9:2017-07-15
参数10:9
参数11:2017-07-15
参数12:2017-07-15
参数13:9
参数14:2017-07-15
参数15:2017-07-15
参数16:9
参数17:2017-07-15
参数18:2017-07-15
 
[INFO][2017-07-15 17:46:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-15 17:46:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2017-07-15
参数2:2017-07-15
参数3:9
参数4:2017-07-14
参数5:2017-07-14
参数6:9
参数7:2017-07-08
参数8:2017-07-08
参数9:9
 
[INFO][2017-07-15 17:46:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:46:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:46:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:46:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:46:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:46:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:46:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:46:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:46:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:46:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:46:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-15 17:46:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
 
[INFO][2017-07-15 17:46:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-15 17:46:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-15 17:46:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-15 17:46:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:
 
[INFO][2017-07-15 17:46:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 17:46:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
 
[INFO][2017-07-15 17:46:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:46:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
 
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:46:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:46:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 17:46:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:46:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 17:46:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:46:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:46:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:46:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:46:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:46:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 17:46:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 17:46:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:46:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 17:46:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 17:46:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 17:46:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 17:46:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:26
 
[INFO][2017-07-15 17:46:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 17:46:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 17:46:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:2
 
[INFO][2017-07-15 17:46:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:46:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 17:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43))  tmp_count 
[INFO][2017-07-15 17:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 17:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43)) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 17:47:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:47:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[INFO][2017-07-15 17:47:07] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) http-nio-8001-exec-3 Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml] 
[INFO][2017-07-15 17:47:07] org.springframework.jdbc.support.SQLErrorCodesFactory.<init>(SQLErrorCodesFactory.java:127) http-nio-8001-exec-3 SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase, Hana] 
[WARN][2017-07-15 17:47:07] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-3 Resolved exception caused by Handler execution: org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
; uncategorized SQLException for SQL []; SQL state [S0001]; error code [245]; 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。 
[INFO][2017-07-15 17:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[WARN][2017-07-15 17:47:52] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-5 Resolved exception caused by Handler execution: org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
; uncategorized SQLException for SQL []; SQL state [S0001]; error code [245]; 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。 
[INFO][2017-07-15 17:48:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43))  tmp_count 
[INFO][2017-07-15 17:48:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-15 17:48:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43)) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:48:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-15 17:48:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:48:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[WARN][2017-07-15 17:48:10] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-8001-exec-9 Resolved exception caused by Handler execution: org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
; uncategorized SQLException for SQL []; SQL state [S0001]; error code [245]; 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。 
[INFO][2017-07-15 17:50:20] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 17:46:01 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 17:50:20] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 17:50:21] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:203) localhost-startStop-2 Shutting down ExecutorService 'taskExecutor' 
[INFO][2017-07-15 17:50:21] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing Root WebApplicationContext: startup date [Sat Jul 15 17:45:58 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 17:50:21] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 17:50:57] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:305) RMI TCP Connection(3)-127.0.0.1 Root WebApplicationContext: initialization started 
[INFO][2017-07-15 17:50:57] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(3)-127.0.0.1 Refreshing Root WebApplicationContext: startup date [Sat Jul 15 17:50:57 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 17:50:57] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/datasource-configurer.xml] 
[INFO][2017-07-15 17:50:57] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/ActiveMQ.xml] 
[INFO][2017-07-15 17:50:57] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/redis.xml] 
[INFO][2017-07-15 17:50:58] org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:172) RMI TCP Connection(3)-127.0.0.1 Loading properties file from ServletContext resource [/WEB-INF/jdbc_sqlserver.properties] 
[INFO][2017-07-15 17:51:00] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(3)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 17:51:00] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:345) RMI TCP Connection(3)-127.0.0.1 Root WebApplicationContext: initialization completed in 2899 ms 
[INFO][2017-07-15 17:51:00] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:489) RMI TCP Connection(3)-127.0.0.1 FrameworkServlet 'core-controller': initialization started 
[INFO][2017-07-15 17:51:00] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(3)-127.0.0.1 Refreshing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 17:51:00 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 17:51:00] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/core-controller-servlet.xml] 
[INFO][2017-07-15 17:51:02] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:165) RMI TCP Connection(3)-127.0.0.1 Initializing ExecutorService  'taskExecutor' 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/CdsOutside]}" onto public java.util.Map com.controller.ApiServerController.CdsOutside(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveElemeOrder]}" onto public java.lang.String com.controller.ApiServerController.ReceiveElemeOrder(com.opensdk.eleme.vo.MessageParam) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderPay() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderConfrim]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderConfrim() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderFulfillment]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderFulfillment() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderCancel]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderCancel() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrdersendstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrdersendstatus() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack2]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack2() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderSettlement]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderSettlement() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderShopstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderShopstatus() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveBaiduOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveBaiduOrderPay(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/print],methods=[GET]}" onto public java.lang.String com.controller.ClientController.print() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/comment],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/home],methods=[GET]}" onto public java.lang.String com.controller.ClientController.home(org.springframework.ui.Model) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/report2],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report2() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/member_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.member_data() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/pack_job],methods=[GET]}" onto public java.lang.String com.controller.ClientController.pack_job() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlisthistory() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/all_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlist() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlist() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/comment_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment_data() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/good_analyse],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_analyse() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/report1],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report1() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/doorderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.doorderlist() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/business_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.business_data() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/good_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_data() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/shop_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlist() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/all_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlisthistory() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/shop_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlisthistory() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/cf_meal_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_meal_set() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/scanner_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.scanner_set() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/business],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.business() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/goodsManage],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.goodsManage() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/erp],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.erp() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/cf_task_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_task_set() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/toggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.toggle(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyprint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyprint(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/savePrint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePrint(com.framework.mapping.system.CdsPrints,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetScannerList],methods=[POST]}" onto public void com.controller.ClientSetController.GetScannerList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetPrintList],methods=[POST]}" onto public void com.controller.ClientSetController.print_set(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/print_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.print_set() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveScenner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveScenner(com.framework.mapping.system.CdsScanner,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyScanner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyScanner(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/scnnerToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.scnnerToggle(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/electronic_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.electronic_set() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/dianwoda_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.dianwoda_set() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetDianwodaList],methods=[POST]}" onto public void com.controller.ClientSetController.GetDianwodaList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveDianwoda(com.framework.mapping.system.CdsDianwodaPhone,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyDianwoda(com.framework.mapping.system.CdsDianwodaPhone) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/password_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.password_set() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/savePassword],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePassword(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/giftlist],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.giftlist() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetElectronicScaleList],methods=[POST]}" onto public void com.controller.ClientSetController.GetElectronicScaleList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveElectronicScale(com.framework.mapping.system.CdsElectronicScale,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyElectronicScale(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/electronicScaleToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.electronicScaleToggle(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Code/index]}" onto public void com.controller.CodeController.index(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus_bak]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus_bak() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/index],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/getUserName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.getUserName(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/updateErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErp(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/saveMsGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveMsGoods(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/GetErpGoodsLists],methods=[POST]}" onto public void com.controller.ErpGoodsController.GetErpGoodsLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveErp(java.util.HashMap,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/userIndex],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.userIndex(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/getUserList],methods=[POST]}" onto public void com.controller.ErpGoodsController.getUserList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/updateErpCount],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErpCount(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/index],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/checkName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.checkName(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveErp(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo2(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsInfo(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/getSigna],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.getSigna() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsClass(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/classIndex],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.classIndex() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoErp],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetErpInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/getPicAddress],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.getPicAddress(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetBrandTree() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsClassLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsClassLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userExitOut]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.userExitOut() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLoginVerify]}" onto public java.lang.String com.controller.LoginController.userLoginVerify(com.framework.mapping.system.CdsUsers,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/adminLoginVerify]}" onto public java.lang.String com.controller.LoginController.adminLoginVerify(com.framework.mapping.system.SysUser,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/isLogon]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.isLogon() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/LoginVerify]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.LoginVerify(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLogin]}" onto public java.lang.String com.controller.LoginController.userLogin() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/adminLogin]}" onto public java.lang.String com.controller.LoginController.adminLogin() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLoginOut]}" onto public java.lang.String com.controller.LoginController.userLoginOut() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/main/index],methods=[GET]}" onto public java.lang.String com.controller.MainController.index() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetBrandTree(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetStoresTree() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetGoodsTree() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/queryGoods],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.queryGoods() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/saveStoresClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveStoresClass(java.util.HashMap) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/elemClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteMT(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindMT(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemClassList],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getElemClassList(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteElem(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindElem(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBind(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/sellStatus],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.sellStatus(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteClass(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getGood_ids],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getGood_ids(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getCombobox],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getCombobox(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/saveGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveGoods(java.util.HashMap) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteGoods(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexPt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexPt(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexElem],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexElem(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getElemGood(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/elemBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleUpdateFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleUpdateFood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleDeleteFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleDeleteFood(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexMt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexMt(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtDeleteGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtDeleteGood(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getMtGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getMtGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBindMt],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBindMt(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresGoodsList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetStoresGoodsList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/updateStoresGoods],methods=[POST]}" onto public void com.controller.PtGoodManageController.updateStoresGoods(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetGoodsClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindUpdate],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindUpdate(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindQuery(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindDelete],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindDelete(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/meituanClassQuery],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.meituanClassQuery(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassRemoveBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassRemoveBind(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getStoresGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getStoresGoodsClass(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.eleClassGoodsQuery(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.mtClassGoodsQuery(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/validateStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.validateStores(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/GetStoresList],methods=[POST]}" onto public void com.controller.StoresController.GetStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_grid],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_grid() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresGoodsManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresGoodsManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresGoodsManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresManageController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test],methods=[GET]}" onto public java.lang.String com.controller.TestController.test(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/orderTest],methods=[GET]}" onto public java.util.Map com.controller.TestController.orderTest(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/orderTest2],methods=[GET]}" onto public java.lang.String com.controller.TestController.orderTest2(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test2],methods=[GET]}" onto public java.lang.String com.controller.TestController.test2(int) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/ordermessage],methods=[GET]}" onto public java.lang.String com.controller.TestController.ordermessage(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/sendCode],methods=[GET]}" onto public java.lang.String com.controller.TestController.sendCode() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test3],methods=[GET]}" onto public java.lang.String com.controller.TestController.test3(java.lang.String,int) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/order],methods=[GET]}" onto public java.lang.String com.controller.TestController.test4(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Udesk/orderlist],methods=[GET]}" onto public java.lang.String com.controller.UdeskController.doorderlist(javax.servlet.http.HttpServletRequest) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/doningTaskRecord]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.doningTaskRecord(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/taskGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_add(java.util.HashMap) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/do_task_Record]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.do_task_Record(java.util.HashMap) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/storesGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_add(java.util.HashMap) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/chufanMealList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.chufanMealList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderlisthistory],methods=[POST]}" onto public void com.api.GiftController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderlist],methods=[POST]}" onto public void com.api.GiftController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getTreeGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getGoods() 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/giftlist],methods=[POST]}" onto public void com.api.GiftController.giftlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.orderInfo(com.framework.mapping.system.CdsOrderInfo) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/viewgiftlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.viewgiftlog(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getTableGoods],methods=[GET]}" onto public void com.api.GiftController.getTableGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getBrandClass],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getBrandClass(com.framework.mapping.system.CdsClass) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.saveGift(java.lang.String,com.framework.mapping.system.CdsGiftRegisterList) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodAPI/getReportAnalyse],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.getReportAnalyse(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodAPI/goodReport],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.goodReport(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/homeApi/viewData],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.HomeController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addErpGoodsToGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoodsToGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getMealErpInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getMealErpInfo(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getStoresInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getStoresInfo() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChufangTask(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getChuErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChuErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMealErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/delMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delMealErpGoods(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addMaterial],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMaterial(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/saleSync],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.saleSync(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getGoodsInfo() throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoodsInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/delErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delErpGoodsInfo(com.framework.mapping.system.CdsErpGoodList) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/business/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.businessMg(java.lang.String,com.framework.mapping.system.CdsBusinessUnit) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/userAndShop/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.usersMg(java.lang.String,java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlisthistory],methods=[POST]}" onto public void com.api.OrderController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlist],methods=[POST]}" onto public void com.api.OrderController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistorysendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistorysendlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistoryorderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistoryorderlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/printOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/sendShOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendShOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelorder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelorder(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelDwdsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelDwdsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelShsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelShsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/vieworderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.vieworderlog(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewsendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewsendlog(java.lang.String) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/sendDwdOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendDwdOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/loginVerify],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.LoginVerify(com.framework.mapping.system.CdsStoresLogin) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/orderlist],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderList(java.util.HashMap) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/getOrderInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderInfo(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/optOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.optOrder(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/packJob],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.packJob(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/printrEmedy],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrEmedy(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/getConfigInfo],methods=[POST]}" onto public java.lang.String com.api.PrintController.getConfigInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/printrSuccess],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrSuccess(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ReportAPI/report2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report2(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ReportAPI/report1],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report1(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:51:03] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/udeskAPI/orderlist],methods=[POST]}" onto public void com.api.UdeskAPIController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:51:04] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.initControllerAdviceCache(RequestMappingHandlerAdapter.java:534) RMI TCP Connection(3)-127.0.0.1 Looking for @ControllerAdvice: WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 17:51:00 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 17:51:05] org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:354) RMI TCP Connection(3)-127.0.0.1 Mapped URL path [/**] onto handler 'org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler#0' 
[INFO][2017-07-15 17:51:05] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(3)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 17:51:05] org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:311) RMI TCP Connection(3)-127.0.0.1 Established shared JMS Connection: ActiveMQConnection {id=ID:QH-20161019UENF-49503-1500112265461-1:1,clientId=null,started=false} 
[INFO][2017-07-15 17:51:05] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1040) ActiveMQ Task-1 Successfully connected to tcp://127.0.0.1:61616 
[INFO][2017-07-15 17:51:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) RMI TCP Connection(3)-127.0.0.1 sys_dict.getRecord: 
select * from cds_options where option_name=? 
[INFO][2017-07-15 17:51:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) RMI TCP Connection(3)-127.0.0.1 参数1:site_options
 
[INFO][2017-07-15 17:51:06] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:508) RMI TCP Connection(3)-127.0.0.1 FrameworkServlet 'core-controller': initialization completed in 5877 ms 
[INFO][2017-07-15 17:51:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-15 17:51:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:chenbin
 
[INFO][2017-07-15 17:51:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:51:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:351
参数2:1032
 
[INFO][2017-07-15 17:51:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:51:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:352
参数2:1032
 
[INFO][2017-07-15 17:51:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:51:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:375
参数2:1032
 
[INFO][2017-07-15 17:51:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:51:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:376
参数2:1032
 
[INFO][2017-07-15 17:51:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:51:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:355
参数2:1032
 
[INFO][2017-07-15 17:51:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:51:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:356
参数2:1032
 
[INFO][2017-07-15 17:51:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-15 17:51:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:9
 
[INFO][2017-07-15 17:51:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-15 17:51:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:9
参数2:2017-07-15
参数3:2017-07-15
参数4:9
参数5:2017-07-15
参数6:2017-07-15
参数7:9
参数8:2017-07-15
参数9:2017-07-15
参数10:9
参数11:2017-07-15
参数12:2017-07-15
参数13:9
参数14:2017-07-15
参数15:2017-07-15
参数16:9
参数17:2017-07-15
参数18:2017-07-15
 
[INFO][2017-07-15 17:51:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-15 17:51:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2017-07-15
参数2:2017-07-15
参数3:9
参数4:2017-07-14
参数5:2017-07-14
参数6:9
参数7:2017-07-08
参数8:2017-07-08
参数9:9
 
[INFO][2017-07-15 17:51:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:51:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 17:51:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:51:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 17:51:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:51:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-15 17:51:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:51:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 17:51:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:51:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:1
 
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:1
 
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
 
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:51:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-15 17:51:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:51:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-15 17:51:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 17:51:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 17:51:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 17:51:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-15 17:51:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:51:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 17:51:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:51:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 17:51:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:51:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-15 17:52:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 17:52:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 17:52:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:52:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 17:52:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 17:52:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 17:52:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 17:52:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:26
 
[INFO][2017-07-15 17:52:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:52:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
 
[INFO][2017-07-15 17:52:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:52:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:2
 
[INFO][2017-07-15 17:52:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 17:52:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:10
参数2:2
 
[INFO][2017-07-15 17:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43))  tmp_count 
[INFO][2017-07-15 17:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:2
 
[INFO][2017-07-15 17:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43)) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:52:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:2
 
[INFO][2017-07-15 17:52:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:52:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:10
参数2:1280
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:27.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[INFO][2017-07-15 17:52:15] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) http-nio-80-exec-1 Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml] 
[INFO][2017-07-15 17:52:15] org.springframework.jdbc.support.SQLErrorCodesFactory.<init>(SQLErrorCodesFactory.java:127) http-nio-80-exec-1 SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase, Hana] 
[WARN][2017-07-15 17:52:15] org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.logException(AbstractHandlerExceptionResolver.java:189) http-nio-80-exec-1 Resolved exception caused by Handler execution: org.springframework.jdbc.UncategorizedSQLException: 
### Error updating database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
### The error may involve baseSqlMap.insertRecord-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO cds_stores_goods_list(                        stores_id          ,              good_id          ,              brand_id          ,              good_number          ,              type          ,              elem_count          ,              mt_count          ,              wx_count          ,              box_count          ,              status          ,              box_price          ,              market_price          ,              unit          ,              default_standrad_id          ,              isdefault          ,              all_count          ,              stores_brand_id          ,              food_id          ,              mt_isband          ,              mt_image_hash
### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。
; uncategorized SQLException for SQL []; SQL state [S0001]; error code [245]; 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: 在将 nvarchar 值 '份' 转换成数据类型 int 时失败。 
[INFO][2017-07-15 17:54:31] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 17:51:00 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 17:54:31] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 17:54:31] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:203) localhost-startStop-2 Shutting down ExecutorService 'taskExecutor' 
[INFO][2017-07-15 17:54:31] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing Root WebApplicationContext: startup date [Sat Jul 15 17:50:57 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 17:54:31] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[WARN][2017-07-15 17:54:32] org.apache.activemq.transport.failover.FailoverTransport.handleTransportFailure(FailoverTransport.java:251) ActiveMQ Transport: tcp:///127.0.0.1:61616@49504 Transport (tcp://127.0.0.1:61616) failed, reason:  java.io.EOFException, not attempting to automatically reconnect 
[INFO][2017-07-15 17:58:45] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:305) RMI TCP Connection(4)-127.0.0.1 Root WebApplicationContext: initialization started 
[INFO][2017-07-15 17:58:45] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(4)-127.0.0.1 Refreshing Root WebApplicationContext: startup date [Sat Jul 15 17:58:45 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 17:58:45] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(4)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/datasource-configurer.xml] 
[INFO][2017-07-15 17:58:45] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(4)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/ActiveMQ.xml] 
[INFO][2017-07-15 17:58:45] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(4)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/redis.xml] 
[INFO][2017-07-15 17:58:46] org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:172) RMI TCP Connection(4)-127.0.0.1 Loading properties file from ServletContext resource [/WEB-INF/jdbc_sqlserver.properties] 
[INFO][2017-07-15 17:58:48] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(4)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 17:58:48] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:345) RMI TCP Connection(4)-127.0.0.1 Root WebApplicationContext: initialization completed in 2863 ms 
[INFO][2017-07-15 17:58:48] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:489) RMI TCP Connection(4)-127.0.0.1 FrameworkServlet 'core-controller': initialization started 
[INFO][2017-07-15 17:58:48] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(4)-127.0.0.1 Refreshing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 17:58:48 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 17:58:48] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(4)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/core-controller-servlet.xml] 
[INFO][2017-07-15 17:58:50] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:165) RMI TCP Connection(4)-127.0.0.1 Initializing ExecutorService  'taskExecutor' 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ApiServer/CdsOutside]}" onto public java.util.Map com.controller.ApiServerController.CdsOutside(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ApiServer/ReceiveElemeOrder]}" onto public java.lang.String com.controller.ApiServerController.ReceiveElemeOrder(com.opensdk.eleme.vo.MessageParam) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderPay() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderConfrim]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderConfrim() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderFulfillment]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderFulfillment() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderCancel]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderCancel() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrdersendstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrdersendstatus() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack2]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack2() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderSettlement]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderSettlement() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderShopstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderShopstatus() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ApiServer/ReceiveBaiduOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveBaiduOrderPay(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/print],methods=[GET]}" onto public java.lang.String com.controller.ClientController.print() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/comment],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/home],methods=[GET]}" onto public java.lang.String com.controller.ClientController.home(org.springframework.ui.Model) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/doorderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.doorderlist() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/business_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.business_data() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/good_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_data() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/good_analyse],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_analyse() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/report1],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report1() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/report2],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report2() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/comment_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment_data() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/member_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.member_data() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/pack_job],methods=[GET]}" onto public java.lang.String com.controller.ClientController.pack_job() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlist() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlisthistory() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/all_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlist() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/shop_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlist() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/all_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlisthistory() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Client/shop_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlisthistory() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/cf_meal_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_meal_set() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/scanner_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.scanner_set() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/business],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.business() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/goodsManage],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.goodsManage() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/erp],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.erp() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/cf_task_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_task_set() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/toggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.toggle(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/destroyprint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyprint(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/savePrint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePrint(com.framework.mapping.system.CdsPrints,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/GetScannerList],methods=[POST]}" onto public void com.controller.ClientSetController.GetScannerList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/GetPrintList],methods=[POST]}" onto public void com.controller.ClientSetController.print_set(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/print_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.print_set() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/saveScenner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveScenner(com.framework.mapping.system.CdsScanner,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/destroyScanner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyScanner(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/scnnerToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.scnnerToggle(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/electronic_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.electronic_set() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/dianwoda_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.dianwoda_set() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/GetDianwodaList],methods=[POST]}" onto public void com.controller.ClientSetController.GetDianwodaList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/saveDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveDianwoda(com.framework.mapping.system.CdsDianwodaPhone,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/destroyDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyDianwoda(com.framework.mapping.system.CdsDianwodaPhone) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/password_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.password_set() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/savePassword],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePassword(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/giftlist],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.giftlist() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/GetElectronicScaleList],methods=[POST]}" onto public void com.controller.ClientSetController.GetElectronicScaleList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/saveElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveElectronicScale(com.framework.mapping.system.CdsElectronicScale,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/destroyElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyElectronicScale(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ClientSet/electronicScaleToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.electronicScaleToggle(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Code/index]}" onto public void com.controller.CodeController.index(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus_bak]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus_bak() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/MsGoods/index],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/MsGoods/getUserName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.getUserName(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/MsGoods/updateErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErp(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/MsGoods/saveMsGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveMsGoods(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/MsGoods/GetErpGoodsLists],methods=[POST]}" onto public void com.controller.ErpGoodsController.GetErpGoodsLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/MsGoods/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveErp(java.util.HashMap,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/MsGoods/userIndex],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.userIndex(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/MsGoods/getUserList],methods=[POST]}" onto public void com.controller.ErpGoodsController.getUserList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/MsGoods/updateErpCount],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErpCount(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodsInfo/index],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodsInfo/checkName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.checkName(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodsInfo/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveErp(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo2(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsInfo(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodsInfo/getSigna],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.getSigna() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsClass(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodsInfo/classIndex],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.classIndex() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoErp],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetErpInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodsInfo/getPicAddress],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.getPicAddress(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodsInfo/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetBrandTree() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsClassLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsClassLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/login/userExitOut]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.userExitOut() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/login/userLoginVerify]}" onto public java.lang.String com.controller.LoginController.userLoginVerify(com.framework.mapping.system.CdsUsers,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/login/adminLoginVerify]}" onto public java.lang.String com.controller.LoginController.adminLoginVerify(com.framework.mapping.system.SysUser,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/login/isLogon]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.isLogon() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/login/LoginVerify]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.LoginVerify(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/login/userLogin]}" onto public java.lang.String com.controller.LoginController.userLogin() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/login/adminLogin]}" onto public java.lang.String com.controller.LoginController.adminLogin() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/login/userLoginOut]}" onto public java.lang.String com.controller.LoginController.userLoginOut() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/main/index],methods=[GET]}" onto public java.lang.String com.controller.MainController.index() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetBrandTree(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetStoresTree() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetGoodsTree() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/queryGoods],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.queryGoods() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/GetClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/saveStoresClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveStoresClass(java.util.HashMap) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/elemClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteMT(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindMT(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemClassList],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getElemClassList(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteElem(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindElem(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBind(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/sellStatus],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.sellStatus(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteClass(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/getGood_ids],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getGood_ids(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/getCombobox],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getCombobox(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/saveGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveGoods(java.util.HashMap) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteGoods(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/indexPt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexPt(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/indexElem],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexElem(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getElemGood(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/elemBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/getGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/eleUpdateFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleUpdateFood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/eleDeleteFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleDeleteFood(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/indexMt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexMt(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/mtBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/mtDeleteGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtDeleteGood(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/getMtGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getMtGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBindMt],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBindMt(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresGoodsList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetStoresGoodsList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/updateStoresGoods],methods=[POST]}" onto public void com.controller.PtGoodManageController.updateStoresGoods(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetGoodsClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindUpdate],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindUpdate(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindQuery(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindDelete],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindDelete(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/meituanClassQuery],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.meituanClassQuery(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassRemoveBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassRemoveBind(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/getStoresGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getStoresGoodsClass(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/eleClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.eleClassGoodsQuery(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.mtClassGoodsQuery(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/validateStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.validateStores(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/GetStoresList],methods=[POST]}" onto public void com.controller.StoresController.GetStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/stores_grid],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_grid() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Stores/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresGoodsManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresGoodsManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresGoodsManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.index() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_login() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresManageController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/StoresManage/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Test/test],methods=[GET]}" onto public java.lang.String com.controller.TestController.test(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Test/orderTest],methods=[GET]}" onto public java.util.Map com.controller.TestController.orderTest(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Test/orderTest2],methods=[GET]}" onto public java.lang.String com.controller.TestController.orderTest2(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Test/test2],methods=[GET]}" onto public java.lang.String com.controller.TestController.test2(int) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Test/ordermessage],methods=[GET]}" onto public java.lang.String com.controller.TestController.ordermessage(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Test/sendCode],methods=[GET]}" onto public java.lang.String com.controller.TestController.sendCode() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Test/test3],methods=[GET]}" onto public java.lang.String com.controller.TestController.test3(java.lang.String,int) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Test/order],methods=[GET]}" onto public java.lang.String com.controller.TestController.test4(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/Udesk/orderlist],methods=[GET]}" onto public java.lang.String com.controller.UdeskController.doorderlist(javax.servlet.http.HttpServletRequest) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanTask/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanTask/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanTask/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanTask/doningTaskRecord]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.doningTaskRecord(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanTask/taskGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanTask/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_add(java.util.HashMap) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanTask/do_task_Record]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.do_task_Record(java.util.HashMap) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanTask/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanTask/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanTask/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanTask/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanXiada/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.getVersion(java.util.HashMap) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanXiada/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanXiada/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_cancel(java.util.HashMap) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanXiada/storesGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanXiada/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_add(java.util.HashMap) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanXiada/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanXiada/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanXiada/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanXiada/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ChufanXiada/chufanMealList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.chufanMealList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GiftApi/orderlist],methods=[POST]}" onto public void com.api.GiftController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GiftApi/orderlisthistory],methods=[POST]}" onto public void com.api.GiftController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GiftApi/giftlist],methods=[POST]}" onto public void com.api.GiftController.giftlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GiftApi/orderInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.orderInfo(com.framework.mapping.system.CdsOrderInfo) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GiftApi/viewgiftlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.viewgiftlog(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GiftApi/getTableGoods],methods=[GET]}" onto public void com.api.GiftController.getTableGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GiftApi/getBrandClass],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getBrandClass(com.framework.mapping.system.CdsClass) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GiftApi/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.saveGift(java.lang.String,com.framework.mapping.system.CdsGiftRegisterList) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GiftApi/getTreeGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getGoods() 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodAPI/getReportAnalyse],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.getReportAnalyse(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/GoodAPI/goodReport],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.goodReport(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/homeApi/viewData],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.HomeController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/getMealErpInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getMealErpInfo(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/addChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/getStoresInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getStoresInfo() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/getChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChufangTask(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/getChuErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChuErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/addChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/addMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMealErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/delMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delMealErpGoods(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/getErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/addErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/addMaterial],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMaterial(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/updateErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/saleSync],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.saleSync(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/getGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getGoodsInfo() throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/getErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoodsInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/delErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delErpGoodsInfo(com.framework.mapping.system.CdsErpGoodList) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/addGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/updateGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/business/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.businessMg(java.lang.String,com.framework.mapping.system.CdsBusinessUnit) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/userAndShop/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.usersMg(java.lang.String,java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/updateChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/updateChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ErpApi/addErpGoodsToGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoodsToGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlist],methods=[POST]}" onto public void com.api.OrderController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlisthistory],methods=[POST]}" onto public void com.api.OrderController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/orderSelectAPI/printOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/orderSelectAPI/sendShOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendShOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelorder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelorder(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelDwdsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelDwdsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelShsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelShsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/orderSelectAPI/vieworderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.vieworderlog(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/orderSelectAPI/viewsendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewsendlog(java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/orderSelectAPI/sendDwdOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendDwdOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistorysendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistorysendlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistoryorderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistoryorderlog(java.lang.String,java.lang.String) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/packApi/loginVerify],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.LoginVerify(com.framework.mapping.system.CdsStoresLogin) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/packApi/orderlist],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderList(java.util.HashMap) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/packApi/getOrderInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderInfo(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/packApi/optOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.optOrder(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/packApi/packJob],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.packJob(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/printAPI/printrEmedy],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrEmedy(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/printAPI/getConfigInfo],methods=[POST]}" onto public java.lang.String com.api.PrintController.getConfigInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/printAPI/printrSuccess],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrSuccess(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ReportAPI/report1],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report1(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/ReportAPI/report2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report2(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-15 17:58:51] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(4)-127.0.0.1 Mapped "{[/udeskAPI/orderlist],methods=[POST]}" onto public void com.api.UdeskAPIController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-15 17:58:52] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.initControllerAdviceCache(RequestMappingHandlerAdapter.java:534) RMI TCP Connection(4)-127.0.0.1 Looking for @ControllerAdvice: WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 17:58:48 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 17:58:52] org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:354) RMI TCP Connection(4)-127.0.0.1 Mapped URL path [/**] onto handler 'org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler#0' 
[INFO][2017-07-15 17:58:53] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(4)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-15 17:58:53] org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:311) RMI TCP Connection(4)-127.0.0.1 Established shared JMS Connection: ActiveMQConnection {id=ID:QH-20161019UENF-49964-1500112733367-1:1,clientId=null,started=false} 
[INFO][2017-07-15 17:58:53] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1040) ActiveMQ Task-1 Successfully connected to tcp://127.0.0.1:61616 
[INFO][2017-07-15 17:58:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) RMI TCP Connection(4)-127.0.0.1 sys_dict.getRecord: 
select * from cds_options where option_name=? 
[INFO][2017-07-15 17:58:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) RMI TCP Connection(4)-127.0.0.1 参数1:site_options
 
[INFO][2017-07-15 17:58:54] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:508) RMI TCP Connection(4)-127.0.0.1 FrameworkServlet 'core-controller': initialization completed in 5752 ms 
[INFO][2017-07-15 17:59:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-15 17:59:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:chenbin
 
[INFO][2017-07-15 17:59:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:59:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:351
参数2:1032
 
[INFO][2017-07-15 17:59:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:59:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:352
参数2:1032
 
[INFO][2017-07-15 17:59:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:59:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:375
参数2:1032
 
[INFO][2017-07-15 17:59:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:59:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:376
参数2:1032
 
[INFO][2017-07-15 17:59:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:59:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:355
参数2:1032
 
[INFO][2017-07-15 17:59:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-15 17:59:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:356
参数2:1032
 
[INFO][2017-07-15 17:59:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-15 17:59:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:9
 
[INFO][2017-07-15 17:59:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-15 17:59:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:9
参数2:2017-07-15
参数3:2017-07-15
参数4:9
参数5:2017-07-15
参数6:2017-07-15
参数7:9
参数8:2017-07-15
参数9:2017-07-15
参数10:9
参数11:2017-07-15
参数12:2017-07-15
参数13:9
参数14:2017-07-15
参数15:2017-07-15
参数16:9
参数17:2017-07-15
参数18:2017-07-15
 
[INFO][2017-07-15 17:59:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-15 17:59:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2017-07-15
参数2:2017-07-15
参数3:9
参数4:2017-07-14
参数5:2017-07-14
参数6:9
参数7:2017-07-08
参数8:2017-07-08
参数9:9
 
[INFO][2017-07-15 17:59:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:59:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:59:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:59:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:59:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-15 17:59:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-15 17:59:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-15 17:59:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:59:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-15 17:59:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-15 17:59:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:59:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:59:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:59:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-15 17:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-15 17:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 17:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-15 17:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-15 17:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-15 17:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:26
 
[INFO][2017-07-15 17:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 17:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 17:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:10
参数2:2
 
[INFO][2017-07-15 17:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-15 17:59:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-15 17:59:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43))  tmp_count 
[INFO][2017-07-15 17:59:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 17:59:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (38,39,40,43)) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-15 17:59:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-15 17:59:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:59:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:1279
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:26.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[INFO][2017-07-15 17:59:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-15 17:59:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:1280
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:2.0
参数12:27.9
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[INFO][2017-07-15 17:59:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-15 17:59:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:2
 
[INFO][2017-07-15 17:59:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:59:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 17:59:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-15 17:59:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 17:59:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:59:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-15 17:59:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:59:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-15 17:59:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-15 17:59:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-15 17:59:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:59:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
 
[INFO][2017-07-15 17:59:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-15 17:59:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:59:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-15 17:59:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-15 17:59:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-15 17:59:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227280992
 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227546890
 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:59:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-15 17:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-15 17:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:特制饮品
 
[INFO][2017-07-15 17:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227537241
 
[INFO][2017-07-15 17:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227537242
 
[INFO][2017-07-15 17:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227599564
 
[INFO][2017-07-15 17:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227683784
 
[INFO][2017-07-15 17:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227784895
 
[INFO][2017-07-15 17:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:59:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227772954
 
[INFO][2017-07-15 17:59:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:59:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227784897
 
[INFO][2017-07-15 17:59:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 17:59:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227772956
 
[INFO][2017-07-15 18:00:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-15 18:00:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:3
 
[INFO][2017-07-15 18:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-15 18:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:39
参数3:1227801642
参数4:null
参数5:1
参数6:null
参数7:3
 
[INFO][2017-07-15 18:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-15 18:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 18:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-15 18:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-15 18:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 18:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227280992
 
[INFO][2017-07-15 18:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 18:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227546890
 
[INFO][2017-07-15 18:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 18:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227537241
 
[INFO][2017-07-15 18:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 18:00:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227537242
 
[INFO][2017-07-15 18:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 18:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227599564
 
[INFO][2017-07-15 18:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 18:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227683784
 
[INFO][2017-07-15 18:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 18:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227784895
 
[INFO][2017-07-15 18:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 18:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227772954
 
[INFO][2017-07-15 18:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 18:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227784897
 
[INFO][2017-07-15 18:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 18:00:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227772956
 
[INFO][2017-07-15 18:00:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-15 18:00:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227801642
 
[INFO][2017-07-15 18:23:04] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing WebApplicationContext for namespace 'core-controller-servlet': startup date [Sat Jul 15 17:58:48 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-15 18:23:04] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-15 18:23:04] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:203) localhost-startStop-2 Shutting down ExecutorService 'taskExecutor' 
[INFO][2017-07-15 18:23:04] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing Root WebApplicationContext: startup date [Sat Jul 15 17:58:45 CST 2017]; root of context hierarchy 
[INFO][2017-07-15 18:23:04] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[WARN][2017-07-15 18:23:04] org.apache.activemq.transport.failover.FailoverTransport.handleTransportFailure(FailoverTransport.java:251) ActiveMQ Transport: tcp:///127.0.0.1:61616@49965 Transport (tcp://127.0.0.1:61616) failed, reason:  java.io.EOFException, not attempting to automatically reconnect 
[INFO][2017-07-17 09:23:17] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:305) RMI TCP Connection(2)-127.0.0.1 Root WebApplicationContext: initialization started 
[INFO][2017-07-17 09:23:17] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(2)-127.0.0.1 Refreshing Root WebApplicationContext: startup date [Mon Jul 17 09:23:17 CST 2017]; root of context hierarchy 
[INFO][2017-07-17 09:23:17] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(2)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/datasource-configurer.xml] 
[INFO][2017-07-17 09:23:18] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(2)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/ActiveMQ.xml] 
[INFO][2017-07-17 09:23:18] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(2)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/redis.xml] 
[INFO][2017-07-17 09:23:18] org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:172) RMI TCP Connection(2)-127.0.0.1 Loading properties file from ServletContext resource [/WEB-INF/jdbc_sqlserver.properties] 
[INFO][2017-07-17 09:23:20] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(2)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-17 09:23:20] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:345) RMI TCP Connection(2)-127.0.0.1 Root WebApplicationContext: initialization completed in 3448 ms 
[INFO][2017-07-17 09:23:21] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:489) RMI TCP Connection(2)-127.0.0.1 FrameworkServlet 'core-controller': initialization started 
[INFO][2017-07-17 09:23:21] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(2)-127.0.0.1 Refreshing WebApplicationContext for namespace 'core-controller-servlet': startup date [Mon Jul 17 09:23:21 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-17 09:23:21] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(2)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/core-controller-servlet.xml] 
[INFO][2017-07-17 09:23:23] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:165) RMI TCP Connection(2)-127.0.0.1 Initializing ExecutorService  'taskExecutor' 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/CdsOutside]}" onto public java.util.Map com.controller.ApiServerController.CdsOutside(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveElemeOrder]}" onto public java.lang.String com.controller.ApiServerController.ReceiveElemeOrder(com.opensdk.eleme.vo.MessageParam) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderPay() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderConfrim]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderConfrim() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderFulfillment]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderFulfillment() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderCancel]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderCancel() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrdersendstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrdersendstatus() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack2]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack2() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderSettlement]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderSettlement() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderShopstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderShopstatus() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ApiServer/ReceiveBaiduOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveBaiduOrderPay(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/print],methods=[GET]}" onto public java.lang.String com.controller.ClientController.print() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/comment],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/home],methods=[GET]}" onto public java.lang.String com.controller.ClientController.home(org.springframework.ui.Model) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/doorderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.doorderlist() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/business_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.business_data() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/good_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_data() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/good_analyse],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_analyse() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/report1],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report1() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/report2],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report2() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/comment_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment_data() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/member_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.member_data() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/pack_job],methods=[GET]}" onto public java.lang.String com.controller.ClientController.pack_job() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlist() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlisthistory() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/all_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlist() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/shop_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlist() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/all_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlisthistory() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Client/shop_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlisthistory() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/cf_meal_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_meal_set() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/scanner_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.scanner_set() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/business],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.business() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/goodsManage],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.goodsManage() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/erp],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.erp() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/cf_task_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_task_set() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/toggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.toggle(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/destroyprint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyprint(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/savePrint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePrint(com.framework.mapping.system.CdsPrints,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/GetScannerList],methods=[POST]}" onto public void com.controller.ClientSetController.GetScannerList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/GetPrintList],methods=[POST]}" onto public void com.controller.ClientSetController.print_set(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/print_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.print_set() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/saveScenner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveScenner(com.framework.mapping.system.CdsScanner,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/destroyScanner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyScanner(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/scnnerToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.scnnerToggle(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/electronic_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.electronic_set() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/dianwoda_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.dianwoda_set() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/GetDianwodaList],methods=[POST]}" onto public void com.controller.ClientSetController.GetDianwodaList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/saveDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveDianwoda(com.framework.mapping.system.CdsDianwodaPhone,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/destroyDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyDianwoda(com.framework.mapping.system.CdsDianwodaPhone) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/password_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.password_set() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/savePassword],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePassword(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/giftlist],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.giftlist() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/GetElectronicScaleList],methods=[POST]}" onto public void com.controller.ClientSetController.GetElectronicScaleList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/saveElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveElectronicScale(com.framework.mapping.system.CdsElectronicScale,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/destroyElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyElectronicScale(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ClientSet/electronicScaleToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.electronicScaleToggle(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Code/index]}" onto public void com.controller.CodeController.index(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus_bak]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus_bak() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/index],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.index() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/getUserName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.getUserName(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/updateErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErp(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/saveMsGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveMsGoods(java.util.HashMap,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/GetErpGoodsLists],methods=[POST]}" onto public void com.controller.ErpGoodsController.GetErpGoodsLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveErp(java.util.HashMap,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/userIndex],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.userIndex(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/getUserList],methods=[POST]}" onto public void com.controller.ErpGoodsController.getUserList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/MsGoods/updateErpCount],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErpCount(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/index],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.index() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/checkName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.checkName(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveErp(java.util.HashMap,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo2(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsInfo(java.util.HashMap,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/getSigna],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.getSigna() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsClass(java.util.HashMap,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/classIndex],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.classIndex() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoErp],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetErpInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/getPicAddress],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.getPicAddress(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetBrandTree() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsClassLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsClassLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/userExitOut]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.userExitOut() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/userLoginVerify]}" onto public java.lang.String com.controller.LoginController.userLoginVerify(com.framework.mapping.system.CdsUsers,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/adminLoginVerify]}" onto public java.lang.String com.controller.LoginController.adminLoginVerify(com.framework.mapping.system.SysUser,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/isLogon]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.isLogon() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/LoginVerify]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.LoginVerify(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/userLogin]}" onto public java.lang.String com.controller.LoginController.userLogin() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/adminLogin]}" onto public java.lang.String com.controller.LoginController.adminLogin() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/login/userLoginOut]}" onto public java.lang.String com.controller.LoginController.userLoginOut() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/main/index],methods=[GET]}" onto public java.lang.String com.controller.MainController.index() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.index() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetBrandTree(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetStoresTree() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetGoodsTree() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/queryGoods],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.queryGoods() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/saveStoresClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveStoresClass(java.util.HashMap) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/elemClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteMT(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindMT(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemClassList],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getElemClassList(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteElem(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindElem(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBind(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/sellStatus],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.sellStatus(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteClass(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getGood_ids],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getGood_ids(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getCombobox],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getCombobox(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/saveGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveGoods(java.util.HashMap) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteGoods(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/indexPt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexPt(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/indexElem],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexElem(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getElemGood(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/elemBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleUpdateFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleUpdateFood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleDeleteFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleDeleteFood(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/indexMt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexMt(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtDeleteGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtDeleteGood(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getMtGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getMtGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBindMt],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBindMt(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresGoodsList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetStoresGoodsList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/updateStoresGoods],methods=[POST]}" onto public void com.controller.PtGoodManageController.updateStoresGoods(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetGoodsClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindUpdate],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindUpdate(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindQuery(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindDelete],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindDelete(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/meituanClassQuery],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.meituanClassQuery(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassRemoveBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassRemoveBind(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/getStoresGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getStoresGoodsClass(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/eleClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.eleClassGoodsQuery(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.mtClassGoodsQuery(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/validateStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.validateStores(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/GetStoresList],methods=[POST]}" onto public void com.controller.StoresController.GetStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/stores_grid],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_grid() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_login() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Stores/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresGoodsManageController.index() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresGoodsManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresGoodsManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.index() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_login() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresManageController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/StoresManage/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/test],methods=[GET]}" onto public java.lang.String com.controller.TestController.test(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/orderTest],methods=[GET]}" onto public java.util.Map com.controller.TestController.orderTest(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/orderTest2],methods=[GET]}" onto public java.lang.String com.controller.TestController.orderTest2(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/test2],methods=[GET]}" onto public java.lang.String com.controller.TestController.test2(int) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/ordermessage],methods=[GET]}" onto public java.lang.String com.controller.TestController.ordermessage(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/sendCode],methods=[GET]}" onto public java.lang.String com.controller.TestController.sendCode() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/test3],methods=[GET]}" onto public java.lang.String com.controller.TestController.test3(java.lang.String,int) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Test/order],methods=[GET]}" onto public java.lang.String com.controller.TestController.test4(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/Udesk/orderlist],methods=[GET]}" onto public java.lang.String com.controller.UdeskController.doorderlist(javax.servlet.http.HttpServletRequest) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.getVersion(java.util.HashMap) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_cancel(java.util.HashMap) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/doningTaskRecord]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.doningTaskRecord(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/taskGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_add(java.util.HashMap) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/do_task_Record]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.do_task_Record(java.util.HashMap) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanTask/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.getVersion(java.util.HashMap) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_cancel(java.util.HashMap) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/storesGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_add(java.util.HashMap) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ChufanXiada/chufanMealList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.chufanMealList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/getTreeGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getGoods() 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/orderlist],methods=[POST]}" onto public void com.api.GiftController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/orderlisthistory],methods=[POST]}" onto public void com.api.GiftController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/giftlist],methods=[POST]}" onto public void com.api.GiftController.giftlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/orderInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.orderInfo(com.framework.mapping.system.CdsOrderInfo) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/viewgiftlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.viewgiftlog(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/getTableGoods],methods=[GET]}" onto public void com.api.GiftController.getTableGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/getBrandClass],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getBrandClass(com.framework.mapping.system.CdsClass) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GiftApi/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.saveGift(java.lang.String,com.framework.mapping.system.CdsGiftRegisterList) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodAPI/getReportAnalyse],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.getReportAnalyse(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/GoodAPI/goodReport],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.goodReport(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/homeApi/viewData],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.HomeController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getMealErpInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getMealErpInfo(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getStoresInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getStoresInfo() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChufangTask(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getChuErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChuErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMealErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/delMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delMealErpGoods(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addMaterial],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMaterial(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/updateErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/saleSync],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.saleSync(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getGoodsInfo() throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/getErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoodsInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/delErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delErpGoodsInfo(com.framework.mapping.system.CdsErpGoodList) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/updateGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/business/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.businessMg(java.lang.String,com.framework.mapping.system.CdsBusinessUnit) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/userAndShop/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.usersMg(java.lang.String,java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/updateChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/updateChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ErpApi/addErpGoodsToGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoodsToGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlist],methods=[POST]}" onto public void com.api.OrderController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlisthistory],methods=[POST]}" onto public void com.api.OrderController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/printOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/sendShOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendShOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelorder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelorder(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelDwdsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelDwdsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelShsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelShsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/vieworderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.vieworderlog(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/viewsendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewsendlog(java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/sendDwdOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendDwdOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistorysendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistorysendlog(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistoryorderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistoryorderlog(java.lang.String,java.lang.String) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/loginVerify],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.LoginVerify(com.framework.mapping.system.CdsStoresLogin) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/orderlist],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderList(java.util.HashMap) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/getOrderInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderInfo(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/optOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.optOrder(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/packApi/packJob],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.packJob(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/printAPI/printrEmedy],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrEmedy(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/printAPI/getConfigInfo],methods=[POST]}" onto public java.lang.String com.api.PrintController.getConfigInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/printAPI/printrSuccess],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrSuccess(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ReportAPI/report1],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report1(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/ReportAPI/report2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report2(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 09:23:25] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(2)-127.0.0.1 Mapped "{[/udeskAPI/orderlist],methods=[POST]}" onto public void com.api.UdeskAPIController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 09:23:27] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.initControllerAdviceCache(RequestMappingHandlerAdapter.java:534) RMI TCP Connection(2)-127.0.0.1 Looking for @ControllerAdvice: WebApplicationContext for namespace 'core-controller-servlet': startup date [Mon Jul 17 09:23:21 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-17 09:23:27] org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:354) RMI TCP Connection(2)-127.0.0.1 Mapped URL path [/**] onto handler 'org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler#0' 
[INFO][2017-07-17 09:23:27] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(2)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-17 09:23:28] org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:311) RMI TCP Connection(2)-127.0.0.1 Established shared JMS Connection: ActiveMQConnection {id=ID:QH-20161019UENF-50639-1500254607943-1:1,clientId=null,started=false} 
[INFO][2017-07-17 09:23:28] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1040) ActiveMQ Task-1 Successfully connected to tcp://127.0.0.1:61616 
[INFO][2017-07-17 09:23:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) RMI TCP Connection(2)-127.0.0.1 sys_dict.getRecord: 
select * from cds_options where option_name=? 
[INFO][2017-07-17 09:23:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) RMI TCP Connection(2)-127.0.0.1 参数1:site_options
 
[INFO][2017-07-17 09:23:29] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:508) RMI TCP Connection(2)-127.0.0.1 FrameworkServlet 'core-controller': initialization completed in 8040 ms 
[INFO][2017-07-17 09:28:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-17 09:28:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:chenbin
 
[INFO][2017-07-17 09:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 09:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:351
参数2:1032
 
[INFO][2017-07-17 09:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 09:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:352
参数2:1032
 
[INFO][2017-07-17 09:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 09:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:375
参数2:1032
 
[INFO][2017-07-17 09:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 09:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:376
参数2:1032
 
[INFO][2017-07-17 09:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 09:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:355
参数2:1032
 
[INFO][2017-07-17 09:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 09:28:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:356
参数2:1032
 
[INFO][2017-07-17 09:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-17 09:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:9
 
[INFO][2017-07-17 09:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-17 09:28:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:9
参数2:2017-07-17
参数3:2017-07-17
参数4:9
参数5:2017-07-17
参数6:2017-07-17
参数7:9
参数8:2017-07-17
参数9:2017-07-17
参数10:9
参数11:2017-07-17
参数12:2017-07-17
参数13:9
参数14:2017-07-17
参数15:2017-07-17
参数16:9
参数17:2017-07-17
参数18:2017-07-17
 
[INFO][2017-07-17 09:28:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-17 09:28:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2017-07-17
参数2:2017-07-17
参数3:9
参数4:2017-07-16
参数5:2017-07-16
参数6:9
参数7:2017-07-10
参数8:2017-07-10
参数9:9
 
[INFO][2017-07-17 09:29:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:29:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:29:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:29:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:29:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:29:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:29:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:29:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:29:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:29:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:29:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:29:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:29:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:29:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-17 09:29:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:29:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 09:29:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:35:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:35:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:35:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:35:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:35:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:35:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:35:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 09:35:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-17 09:35:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:35:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 09:35:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:35:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 09:35:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 09:35:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
 
[INFO][2017-07-17 09:35:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:35:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-17 09:35:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 09:35:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:2
 
[INFO][2017-07-17 09:35:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:35:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-17 09:35:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:35:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:35:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:35:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:35:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:35:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-17 09:35:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 09:35:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:35:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:35:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-17 09:35:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-17 09:35:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227280992
 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227683784
 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:35:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 09:35:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:35:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 09:35:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.deleteClass: 
delete from cds_stores_class  where stores_class_id=? 
[INFO][2017-07-17 09:35:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-17 09:36:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:36:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 09:36:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 3 
[INFO][2017-07-17 09:36:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 09:36:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.deleteClass: 
delete from cds_stores_class  where stores_class_id=? 
[INFO][2017-07-17 09:36:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:4
 
[INFO][2017-07-17 09:36:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:36:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:36:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:36:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:36:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.deleteClass: 
delete from cds_stores_class  where stores_class_id=? 
[INFO][2017-07-17 09:36:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:5
 
[INFO][2017-07-17 09:36:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:36:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:36:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 09:36:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:40:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:40:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:40:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:40:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:40:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:40:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:40:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 09:40:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 09:40:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:40:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:40:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:40:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:40:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 09:40:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:26
 
[INFO][2017-07-17 09:40:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:40:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:40:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:40:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:40:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:40:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:40:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 09:40:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 09:40:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:40:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-17 09:40:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:40:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-17 09:40:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 09:40:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
 
[INFO][2017-07-17 09:40:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.deleteRecord: 
DELETE FROM cds_stores_goods_list
         WHERE sgl_id = ? 
[INFO][2017-07-17 09:40:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:3338
 
[INFO][2017-07-17 09:40:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 09:40:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:2
 
[INFO][2017-07-17 09:40:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:40:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 09:40:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 09:40:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 09:40:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.deleteRecord: 
DELETE FROM cds_stores_goods_list
         WHERE sgl_id = ? 
[INFO][2017-07-17 09:40:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:3339
 
[INFO][2017-07-17 09:40:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 09:40:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:10
参数2:2
 
[INFO][2017-07-17 09:40:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:40:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:40:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-17 09:40:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:40:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:40:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:40:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:40:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:40:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:40:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-17 09:40:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 09:40:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:40:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:40:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-17 09:40:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id 
[INFO][2017-07-17 09:40:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetGoodsClassList: 
select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ) 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227280992
 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227683784
 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:40:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 09:41:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:41:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 09:41:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-17 09:41:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-17 09:41:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-17 09:41:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[ERROR][2017-07-17 09:41:21] com.framework.util.BeanUtil.createBean(BeanUtil.java:43) http-nio-8001-exec-1 Indexed or mapped properties are not supported on objects of type Map: rows[0] 
[INFO][2017-07-17 09:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_class(
          
            stores_brand_id
         , 
            class_id
         , 
            food_category_id
         , 
            meituan_cat_id
         , 
            type
         , 
            baidu_cat_id
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-17 09:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:39
参数3:null
参数4:null
参数5:1
参数6:null
 
[INFO][2017-07-17 09:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_class(
          
            stores_brand_id
         , 
            class_id
         , 
            food_category_id
         , 
            meituan_cat_id
         , 
            type
         , 
            baidu_cat_id
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-17 09:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:40
参数3:null
参数4:null
参数5:1
参数6:null
 
[INFO][2017-07-17 09:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_class(
          
            stores_brand_id
         , 
            class_id
         , 
            food_category_id
         , 
            meituan_cat_id
         , 
            type
         , 
            baidu_cat_id
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-17 09:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:43
参数3:null
参数4:null
参数5:1
参数6:null
 
[INFO][2017-07-17 09:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-17 09:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 3 
[INFO][2017-07-17 09:41:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-17 09:41:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.deleteClass: 
delete from cds_stores_class  where stores_class_id=? 
[INFO][2017-07-17 09:41:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:8
 
[INFO][2017-07-17 09:41:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:41:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-17 09:41:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:41:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-17 09:41:44] org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:96) http-nio-8001-exec-9 I/O exception (org.apache.http.NoHttpResponseException) caught when processing request to {}->http://v2.openapi.ele.me:80: The target server failed to respond 
[INFO][2017-07-17 09:41:44] org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:112) http-nio-8001-exec-9 Retrying request to {}->http://v2.openapi.ele.me:80 
[INFO][2017-07-17 09:41:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:41:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:6
 
[INFO][2017-07-17 09:41:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:41:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
参数2:39
参数3:1227826780
参数4:null
参数5:1
参数6:null
参数7:6
 
[INFO][2017-07-17 09:41:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:41:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 09:41:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:41:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 09:41:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:41:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227280992
 
[INFO][2017-07-17 09:41:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:41:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227683784
 
[INFO][2017-07-17 09:41:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:41:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227826780
 
[INFO][2017-07-17 09:44:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:44:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:44:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:44:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:44:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:44:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:44:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 09:44:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 09:44:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:44:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 09:44:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 09:44:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
 
[INFO][2017-07-17 09:44:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-17 09:44:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 09:44:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:44:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-17 09:44:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 09:44:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:2
 
[INFO][2017-07-17 09:44:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:44:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-17 09:44:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:44:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:44:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:44:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:44:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:44:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:44:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 09:44:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:44:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:44:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 09:44:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 09:44:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
 
[INFO][2017-07-17 09:44:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-17 09:44:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 09:44:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:44:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-17 09:44:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:44:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-17 09:44:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 09:44:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-17 09:44:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:44:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:44:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:44:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:44:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:44:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-17 09:44:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:44:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-17 09:44:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 09:44:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:44:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:44:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1227280992
 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:44:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1227683784
 
[INFO][2017-07-17 09:44:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:44:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 09:44:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:44:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1227826780
 
[INFO][2017-07-17 09:44:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:44:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:6
 
[INFO][2017-07-17 09:44:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:44:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
参数2:39
参数3:
参数4:null
参数5:1
参数6:null
参数7:6
 
[INFO][2017-07-17 09:44:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:44:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 09:44:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:44:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 09:44:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:44:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227280992
 
[INFO][2017-07-17 09:44:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:44:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227683784
 
[INFO][2017-07-17 09:45:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:45:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:6
 
[INFO][2017-07-17 09:45:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:45:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
参数2:39
参数3:1227817553
参数4:null
参数5:1
参数6:null
参数7:6
 
[INFO][2017-07-17 09:45:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:45:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 09:45:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:45:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 09:45:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:45:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227280992
 
[INFO][2017-07-17 09:45:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:45:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227683784
 
[INFO][2017-07-17 09:45:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:45:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227817553
 
[INFO][2017-07-17 09:46:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:46:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:46:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:46:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:46:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:46:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:46:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 09:46:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-17 09:46:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:46:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 09:46:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-17 09:46:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 09:46:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 09:46:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
 
[INFO][2017-07-17 09:46:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:46:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-17 09:46:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:46:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:46:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 09:46:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-17 09:46:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:46:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-17 09:46:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:46:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:46:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:46:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
 
[INFO][2017-07-17 09:46:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 09:46:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:46:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:46:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-17 09:46:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:46:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227280992
 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:46:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227683784
 
[INFO][2017-07-17 09:46:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:46:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 09:46:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:46:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227817553
 
[INFO][2017-07-17 09:46:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:46:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227280992
 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:46:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227683784
 
[INFO][2017-07-17 09:46:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:46:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 09:46:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:46:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227817553
 
[INFO][2017-07-17 09:46:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:46:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 09:46:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:46:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:46:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:46:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:46:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:46:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:46:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 09:46:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 09:46:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:46:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 09:46:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-17 09:46:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 09:46:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 09:46:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
 
[INFO][2017-07-17 09:46:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:46:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-17 09:46:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:46:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-17 09:46:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 09:46:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:2
 
[INFO][2017-07-17 09:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:46:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 09:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1
 
[INFO][2017-07-17 09:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:46:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227280992
 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227683784
 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:1227817553
 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:47:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 09:47:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:47:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:47:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:47:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 09:47:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 09:47:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:47:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 09:47:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-17 09:47:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 09:47:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 09:47:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:26
 
[INFO][2017-07-17 09:47:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-17 09:47:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 09:47:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:2
 
[INFO][2017-07-17 09:47:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:35] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-17 09:47:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_area
             


         WHERE parentid = ? 
         
            ORDER BY id 
[INFO][2017-07-17 09:47:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:9001
 
[INFO][2017-07-17 09:47:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE city = ? 
         
            ORDER BY stores_id 
[INFO][2017-07-17 09:47:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:9001
 
[INFO][2017-07-17 09:47:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:47:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.getStoresBrand: 
select count(0) from (select * from cds_stores_brand)  tmp_count 
[INFO][2017-07-17 09:47:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:47:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.getStoresBrand: 
select tmp.* from (select (row_number() Over(order by stores_brand_id asc)) as rownumber, * from cds_stores_brand) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 09:47:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:47:39] org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:96) http-nio-8001-exec-3 I/O exception (org.apache.http.NoHttpResponseException) caught when processing request to {}->http://v2.openapi.ele.me:80: The target server failed to respond 
[INFO][2017-07-17 09:47:39] org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:112) http-nio-8001-exec-3 Retrying request to {}->http://v2.openapi.ele.me:80 
[INFO][2017-07-17 09:47:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:47:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:47:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:47:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-17 09:47:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:47:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 09:47:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:47:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:47:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:47:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:47:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-17 09:47:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 09:47:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:47:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:47:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:47:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:47:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-17 09:47:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:47:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:47:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:47:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:47:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-17 09:47:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:47:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 09:47:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1
 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 09:47:52] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:47:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:47:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:47:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-17 09:47:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:
 
[INFO][2017-07-17 09:47:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:47:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsClassLists: 
select count(0) from (select * from  cds_class)  tmp_count 
[INFO][2017-07-17 09:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsClassLists: 
select tmp.* from (select (row_number() Over(order by listorder asc)) as rownumber, * from  cds_class) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-17 09:47:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:48:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsClassLists: 
select count(0) from (select * from  cds_class
         
         WHERE  (
                         brand_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:48:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-17 09:48:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_stores.GetGoodsClassLists: 
select tmp.* from (select (row_number() Over(order by listorder asc)) as rownumber, * from  cds_class
         
         WHERE  (
                         brand_id = ?
                      )) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-17 09:48:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1
 
[INFO][2017-07-17 09:48:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_stores.GetGoodsClassLists: 
select count(0) from (select * from  cds_class
         
         WHERE  (
                         brand_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:48:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-17 09:48:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_stores.GetGoodsClassLists: 
select tmp.* from (select (row_number() Over(order by listorder asc)) as rownumber, * from  cds_class
         
         WHERE  (
                         brand_id = ?
                      )) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-17 09:48:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-17 09:49:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_name = ?
            and
                brand_id = ? 
[INFO][2017-07-17 09:49:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:长度测试鹅鹅鹅鹅鹅鹅
参数2:2
 
[INFO][2017-07-17 09:50:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.insertRecord: 
INSERT INTO cds_class(
          
            class_name
         , 
            class_desc
         , 
            listorder
         , 
            brand_id
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-17 09:50:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:长度测试鹅鹅鹅鹅鹅鹅
参数2:333
参数3:10
参数4:2
 
[INFO][2017-07-17 09:50:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsClassLists: 
select count(0) from (select * from  cds_class
         
         WHERE  (
                         brand_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:50:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-17 09:50:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.GetGoodsClassLists: 
select tmp.* from (select (row_number() Over(order by listorder asc)) as rownumber, * from  cds_class
         
         WHERE  (
                         brand_id = ?
                      )) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-17 09:50:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-17 09:50:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:50:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:50:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:50:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:
 
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-17 09:50:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-17 09:50:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_area
             


         WHERE parentid = ? 
         
            ORDER BY id 
[INFO][2017-07-17 09:50:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:9001
 
[INFO][2017-07-17 09:50:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE city = ? 
         
            ORDER BY stores_id 
[INFO][2017-07-17 09:50:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:9001
 
[INFO][2017-07-17 09:50:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:50:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:50:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.getStoresBrand: 
select count(0) from (select * from cds_stores_brand)  tmp_count 
[INFO][2017-07-17 09:50:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:50:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.getStoresBrand: 
select tmp.* from (select (row_number() Over(order by stores_brand_id asc)) as rownumber, * from cds_stores_brand) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 09:50:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:50:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:50:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1
 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:50:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:50:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:50:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-17 09:50:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:50:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 09:50:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:50:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:50:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
 
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:2
 
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:50:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-17 09:50:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:50:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:50:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:50:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:50:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:50:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-17 09:50:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 09:50:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:50:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:50:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-17 09:50:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:50:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:50:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:50:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-17 09:50:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-17 09:50:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-17 09:50:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:50:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 09:50:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:50:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-17 09:50:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-17 09:50:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-17 09:50:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:50:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227280992
 
[INFO][2017-07-17 09:50:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:50:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 09:50:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:50:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 09:50:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:50:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227683784
 
[INFO][2017-07-17 09:50:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:50:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 09:50:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:50:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227817553
 
[INFO][2017-07-17 09:50:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?

                
            
            
                
                    and class_id not in (40,39))  tmp_count 
[INFO][2017-07-17 09:50:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-17 09:50:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?

                
            
            
                
                    and class_id not in (40,39)) tmp where tmp.rownumber between 1 and 3 
[INFO][2017-07-17 09:50:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[ERROR][2017-07-17 09:50:38] com.framework.util.BeanUtil.createBean(BeanUtil.java:43) http-nio-8001-exec-1 Indexed or mapped properties are not supported on objects of type Map: rows[0] 
[INFO][2017-07-17 09:50:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_class(
          
            stores_brand_id
         , 
            class_id
         , 
            food_category_id
         , 
            meituan_cat_id
         , 
            type
         , 
            baidu_cat_id
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-17 09:50:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:45
参数3:null
参数4:null
参数5:1
参数6:null
 
[INFO][2017-07-17 09:50:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:50:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-17 09:50:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 3 
[INFO][2017-07-17 09:50:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-17 09:50:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:50:46] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:9
 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:26
参数2:45
参数3:null
参数4:长度测试鹅鹅鹅鹅鹅鹅
参数5:1
参数6:null
参数7:9
 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 3 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:50:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:26
参数2:长度测试鹅鹅鹅鹅鹅鹅
 
[INFO][2017-07-17 09:50:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:50:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:9
 
[INFO][2017-07-17 09:50:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:50:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
参数2:45
参数3:null
参数4:
参数5:1
参数6:null
参数7:9
 
[INFO][2017-07-17 09:50:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:50:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 09:50:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:50:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 09:50:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 3 
[INFO][2017-07-17 09:50:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 09:50:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:50:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 09:50:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:50:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 09:50:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:50:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 09:51:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:51:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:51:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:51:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:51:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:51:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:51:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 09:51:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:51:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:51:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 09:51:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-17 09:51:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 09:51:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 09:51:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
 
[INFO][2017-07-17 09:51:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:51:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-17 09:51:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 09:51:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-17 09:51:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 09:51:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:10
参数2:2
 
[INFO][2017-07-17 09:55:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:55:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:
 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-17 09:55:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
 
[INFO][2017-07-17 09:55:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:55:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:55:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:55:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:55:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_stores.GetGoodsClassLists: 
select count(0) from (select * from  cds_class)  tmp_count 
[INFO][2017-07-17 09:55:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:55:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_stores.GetGoodsClassLists: 
select tmp.* from (select (row_number() Over(order by listorder asc)) as rownumber, * from  cds_class) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-17 09:55:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:55:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_name = ?
            and
                brand_id = ? 
[INFO][2017-07-17 09:55:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:胜多负少的萨芬的发达
参数2:2
 
[INFO][2017-07-17 09:55:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_name = ?
            and
                brand_id = ? 
[INFO][2017-07-17 09:55:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:胜多负少的萨芬的发达电风扇
参数2:2
 
[INFO][2017-07-17 09:56:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:
 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-17 09:56:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1
 
[INFO][2017-07-17 09:56:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:56:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:56:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:56:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 09:56:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:56:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-17 09:56:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
 
[INFO][2017-07-17 09:56:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:56:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 09:56:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 09:58:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:58:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 09:58:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 09:58:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 09:58:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:58:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1
 
[INFO][2017-07-17 09:58:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 09:58:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-17 09:58:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 09:58:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:58:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 3 
[INFO][2017-07-17 09:58:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 09:58:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:58:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 09:58:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-17 09:58:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-17 09:58:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:58:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 09:58:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 3 
[INFO][2017-07-17 09:58:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 09:58:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-17 09:58:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-17 09:58:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:58:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 09:58:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:58:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227280992
 
[INFO][2017-07-17 09:58:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:58:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 09:58:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:58:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227683784
 
[INFO][2017-07-17 09:58:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 09:58:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 09:58:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:58:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227817553
 
[INFO][2017-07-17 09:58:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:58:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:9
 
[INFO][2017-07-17 09:58:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:58:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
参数2:45
参数3:1227829839
参数4:
参数5:1
参数6:null
参数7:9
 
[INFO][2017-07-17 09:58:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:58:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 09:58:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 3 
[INFO][2017-07-17 09:58:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 09:58:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:58:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227280992
 
[INFO][2017-07-17 09:58:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:58:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227683784
 
[INFO][2017-07-17 09:58:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:58:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227817553
 
[INFO][2017-07-17 09:58:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:58:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1227829839
 
[INFO][2017-07-17 09:58:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:58:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:9
 
[INFO][2017-07-17 09:58:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:58:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:26
参数2:45
参数3:
参数4:
参数5:1
参数6:null
参数7:9
 
[INFO][2017-07-17 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 3 
[INFO][2017-07-17 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227280992
 
[INFO][2017-07-17 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227683784
 
[INFO][2017-07-17 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:58:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227817553
 
[INFO][2017-07-17 09:58:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.deleteClass: 
delete from cds_stores_class  where stores_class_id=? 
[INFO][2017-07-17 09:58:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:9
 
[INFO][2017-07-17 09:58:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:58:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:58:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:58:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 09:58:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:58:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:6
 
[INFO][2017-07-17 09:58:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-17 09:58:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:26
参数2:39
参数3:
参数4:null
参数5:1
参数6:null
参数7:6
 
[INFO][2017-07-17 09:58:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 09:58:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 09:58:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 09:58:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 09:58:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:58:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227280992
 
[INFO][2017-07-17 09:58:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 09:58:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:1227683784
 
[INFO][2017-07-17 10:03:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:03:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 10:03:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:03:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 10:03:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:03:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 10:03:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:03:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 10:03:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-17 10:03:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 10:03:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:03:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 10:03:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 10:03:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 10:03:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:03:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10  
[INFO][2017-07-17 10:03:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:03:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1
 
[INFO][2017-07-17 10:03:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 10:03:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 10:03:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:03:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 10:03:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:03:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1227280992
 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:03:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1227683784
 
[INFO][2017-07-17 10:06:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:06:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 10:06:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:06:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 10:06:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:06:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 10:06:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:06:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 10:06:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-17 10:06:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 10:06:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 10:06:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 10:06:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:06:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 10:06:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:06:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 10:06:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:06:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 10:06:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:06:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 10:06:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:06:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 10:06:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-17 10:06:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 10:06:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:06:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:26
 
[INFO][2017-07-17 10:06:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:06:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
 
[INFO][2017-07-17 10:06:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 10:06:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:2
 
[INFO][2017-07-17 10:06:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:06:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-17 10:06:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:06:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2  
[INFO][2017-07-17 10:06:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:06:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 10:06:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:06:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:1
 
[INFO][2017-07-17 10:06:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 10:06:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 10:06:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:06:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 10:06:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:06:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227280992
 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227683784
 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:06:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 10:08:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-17 10:08:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:6
 
[INFO][2017-07-17 10:08:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-17 10:08:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
参数2:39
参数3:1227821978
参数4:null
参数5:1
参数6:null
参数7:6
 
[INFO][2017-07-17 10:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 10:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 10:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227280992
 
[INFO][2017-07-17 10:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227683784
 
[INFO][2017-07-17 10:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:08:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227821978
 
[INFO][2017-07-17 10:08:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-17 10:08:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:6
 
[INFO][2017-07-17 10:08:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-17 10:08:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:26
参数2:39
参数3:
参数4:null
参数5:1
参数6:null
参数7:6
 
[INFO][2017-07-17 10:08:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:08:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 10:08:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:08:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 10:08:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:08:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227280992
 
[INFO][2017-07-17 10:08:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:08:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:1227683784
 
[INFO][2017-07-17 10:09:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:09:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 10:09:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:09:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 10:09:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:09:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 10:09:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:09:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-17 10:09:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:09:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-17 10:09:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-17 10:09:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-17 10:09:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:09:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:26
 
[INFO][2017-07-17 10:09:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:09:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-17 10:09:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 10:09:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:2
 
[INFO][2017-07-17 10:09:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:09:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-17 10:09:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:09:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
参数3:40
 
[INFO][2017-07-17 10:09:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-17 10:09:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
参数3:40
 
[INFO][2017-07-17 10:09:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:09:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-17 10:09:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-17 10:09:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-17 10:09:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:09:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
参数3:40
 
[INFO][2017-07-17 10:09:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-17 10:09:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
参数3:40
 
[INFO][2017-07-17 10:09:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:09:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-17 10:09:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-17 10:09:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-17 10:09:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:09:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
参数3:40
 
[INFO][2017-07-17 10:09:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-17 10:09:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
参数3:40
 
[INFO][2017-07-17 10:09:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:09:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-17 10:09:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-17 10:09:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-17 10:09:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:09:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4  
[INFO][2017-07-17 10:09:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:09:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 10:09:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:09:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:1
 
[INFO][2017-07-17 10:09:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 10:09:14] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 10:09:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:09:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-17 10:09:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:09:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 10:09:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.deleteClass: 
delete from cds_stores_class  where stores_class_id=? 
[INFO][2017-07-17 10:09:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:7
 
[INFO][2017-07-17 10:09:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 10:09:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 10:09:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:09:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1  
[INFO][2017-07-17 10:09:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-17 10:09:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:6
 
[INFO][2017-07-17 10:09:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-17 10:09:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
参数2:39
参数3:1227817662
参数4:null
参数5:1
参数6:null
参数7:6
 
[INFO][2017-07-17 10:09:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 10:09:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 10:09:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:09:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 10:09:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:09:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227280992
 
[INFO][2017-07-17 10:09:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:09:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227683784
 
[INFO][2017-07-17 10:09:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:09:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227817662
 
[INFO][2017-07-17 10:09:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-17 10:09:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:6
 
[INFO][2017-07-17 10:09:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-17 10:09:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
参数2:39
参数3:
参数4:null
参数5:1
参数6:null
参数7:6
 
[INFO][2017-07-17 10:09:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 10:09:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 10:09:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:09:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 10:09:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:09:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1227280992
 
[INFO][2017-07-17 10:09:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:09:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:1227683784
 
[INFO][2017-07-17 10:09:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:09:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 10:09:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:09:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 10:09:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:09:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 10:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-17 10:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-17 10:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-17 10:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
参数2:10
 
[INFO][2017-07-17 10:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:26
 
[INFO][2017-07-17 10:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
 
[INFO][2017-07-17 10:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 10:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-17 10:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:09:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
 
[INFO][2017-07-17 10:09:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (39,40))  tmp_count 
[INFO][2017-07-17 10:09:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-17 10:09:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (39,40)) tmp where tmp.rownumber between 1 and 7 
[INFO][2017-07-17 10:09:30] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-17 10:09:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:09:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 10:09:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:09:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 10:09:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:09:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3  
[INFO][2017-07-17 10:09:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:09:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
 
[INFO][2017-07-17 10:09:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:09:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 10:09:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-17 10:09:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 10:09:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:09:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:26
 
[INFO][2017-07-17 10:09:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:09:40] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
 
[INFO][2017-07-17 10:09:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 10:09:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:2
 
[INFO][2017-07-17 10:09:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:09:41] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-17 10:09:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:09:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-17 10:09:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-17 10:09:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-17 10:09:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (39))  tmp_count 
[INFO][2017-07-17 10:09:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-17 10:09:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
            
                
                     and c.class_id in (39)) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:09:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-17 10:09:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-17 10:09:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:1278
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:0.01
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[INFO][2017-07-17 10:09:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 10:09:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:10
参数2:2
 
[INFO][2017-07-17 10:09:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:09:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-17 10:09:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:09:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-17 10:09:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:09:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 10:09:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:09:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 10:10:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1278)
                
            
            
                
                     and c.class_id in (39))  tmp_count 
[INFO][2017-07-17 10:10:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-17 10:10:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_stores.GetGoodsInfoLists: 
select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1278)
                
            
            
                
                     and c.class_id in (39) 
[INFO][2017-07-17 10:10:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-17 10:10:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:10:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227280992
 
[INFO][2017-07-17 10:10:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:10:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:1227683784
 
[INFO][2017-07-17 10:10:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:10:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 10:10:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:10:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 10:10:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:10:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 10:10:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:10:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-17 10:10:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:10:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 10:10:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:10:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 10:10:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:10:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:26
 
[INFO][2017-07-17 10:10:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:10:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
 
[INFO][2017-07-17 10:10:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 10:10:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:10
参数2:2
 
[INFO][2017-07-17 10:10:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:10:22] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-17 10:10:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:10:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 10:10:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:10:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5  
[INFO][2017-07-17 10:10:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:10:23] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:1
 
[INFO][2017-07-17 10:10:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 10:10:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 10:10:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:10:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-17 10:10:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:10:24] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6  
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227280992
 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1227683784
 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:10:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 10:10:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-17 10:10:26] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:6
 
[INFO][2017-07-17 10:10:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-17 10:10:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:26
参数2:39
参数3:1227826943
参数4:null
参数5:1
参数6:null
参数7:6
 
[INFO][2017-07-17 10:10:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:10:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 10:10:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:10:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 10:10:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:10:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227280992
 
[INFO][2017-07-17 10:10:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:10:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227683784
 
[INFO][2017-07-17 10:10:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:10:27] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1227826943
 
[INFO][2017-07-17 10:10:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:10:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 10:10:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:10:32] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7  
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
 
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:2
 
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:10:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:2
 
[INFO][2017-07-17 10:13:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:13:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 10:13:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:13:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 10:13:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:13:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9  
[INFO][2017-07-17 10:13:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:13:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 10:13:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:13:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 10:13:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:13:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:26
 
[INFO][2017-07-17 10:13:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:13:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 10:13:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:13:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
 
[INFO][2017-07-17 10:13:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 10:13:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-6 参数1:10
参数2:2
 
[INFO][2017-07-17 10:13:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:13:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8 参数1:2
 
[INFO][2017-07-17 10:13:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-17 10:13:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:3340
 
[INFO][2017-07-17 10:13:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-17 10:13:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:10
参数2:1278
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:0.01
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:1235538293
参数19:null
参数20:null
参数21:3340
 
[INFO][2017-07-17 10:13:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:13:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-17 10:13:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:13:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-17 10:14:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-17 10:14:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:1235538293
 
[INFO][2017-07-17 10:14:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-17 10:14:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:1278
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:0.01
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:
参数19:null
参数20:null
参数21:3340
 
[INFO][2017-07-17 10:14:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:14:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 10:14:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:14:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 10:14:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-17 10:14:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:3340
 
[INFO][2017-07-17 10:14:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-17 10:14:33] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:1278
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:0.01
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:1235541334
参数19:null
参数20:null
参数21:3340
 
[INFO][2017-07-17 10:14:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:14:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 10:14:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:14:34] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 10:15:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:15:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 10:15:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:15:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 10:15:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:15:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-8  
[INFO][2017-07-17 10:15:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:15:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 10:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-17 10:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:26
 
[INFO][2017-07-17 10:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-17 10:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2
 
[INFO][2017-07-17 10:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 10:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-2 参数1:10
参数2:2
 
[INFO][2017-07-17 10:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:15:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-3 参数1:2
 
[INFO][2017-07-17 10:15:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE food_id = ? 
[INFO][2017-07-17 10:15:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:1235541334
 
[INFO][2017-07-17 10:15:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-7 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-17 10:15:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-7 参数1:10
参数2:1278
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:0.01
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:
参数19:null
参数20:null
参数21:3340
 
[INFO][2017-07-17 10:15:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:15:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 10:15:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-9 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:15:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 10:15:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-17 10:15:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:3340
 
[INFO][2017-07-17 10:15:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-10 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-17 10:15:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-10 参数1:10
参数2:1278
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:0.01
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:1235546147
参数19:null
参数20:null
参数21:3340
 
[INFO][2017-07-17 10:15:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:15:49] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 10:15:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-1 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:15:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 10:20:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-17 10:20:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:9
参数2:2017-07-17
参数3:2017-07-17
参数4:9
参数5:2017-07-17
参数6:2017-07-17
参数7:9
参数8:2017-07-17
参数9:2017-07-17
参数10:9
参数11:2017-07-17
参数12:2017-07-17
参数13:9
参数14:2017-07-17
参数15:2017-07-17
参数16:9
参数17:2017-07-17
参数18:2017-07-17
 
[INFO][2017-07-17 10:20:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-8001-exec-5 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-17 10:20:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-8001-exec-5 参数1:2017-07-17
参数2:2017-07-17
参数3:9
参数4:2017-07-16
参数5:2017-07-16
参数6:9
参数7:2017-07-10
参数8:2017-07-10
参数9:9
 
[INFO][2017-07-17 10:20:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-17 10:20:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:chenbin
 
[INFO][2017-07-17 10:20:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 10:20:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:351
参数2:1032
 
[INFO][2017-07-17 10:20:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 10:20:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:352
参数2:1032
 
[INFO][2017-07-17 10:20:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 10:20:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:375
参数2:1032
 
[INFO][2017-07-17 10:20:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 10:20:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:376
参数2:1032
 
[INFO][2017-07-17 10:20:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 10:20:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:355
参数2:1032
 
[INFO][2017-07-17 10:20:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 10:20:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:356
参数2:1032
 
[INFO][2017-07-17 10:20:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-17 10:20:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:9
 
[INFO][2017-07-17 10:20:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-17 10:20:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:9
参数2:2017-07-17
参数3:2017-07-17
参数4:9
参数5:2017-07-17
参数6:2017-07-17
参数7:9
参数8:2017-07-17
参数9:2017-07-17
参数10:9
参数11:2017-07-17
参数12:2017-07-17
参数13:9
参数14:2017-07-17
参数15:2017-07-17
参数16:9
参数17:2017-07-17
参数18:2017-07-17
 
[INFO][2017-07-17 10:20:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-17 10:20:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:2017-07-17
参数2:2017-07-17
参数3:9
参数4:2017-07-16
参数5:2017-07-16
参数6:9
参数7:2017-07-10
参数8:2017-07-10
参数9:9
 
[INFO][2017-07-17 10:21:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:21:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:1
参数2:9
 
[INFO][2017-07-17 10:21:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:21:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
参数2:9
 
[INFO][2017-07-17 10:21:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:21:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:9
 
[INFO][2017-07-17 10:21:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:21:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:1
参数2:9
 
[INFO][2017-07-17 10:21:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:21:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:25
 
[INFO][2017-07-17 10:21:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:21:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:9
 
[INFO][2017-07-17 10:21:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:21:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:9
 
[INFO][2017-07-17 10:21:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:21:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:25
 
[INFO][2017-07-17 10:21:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:21:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:1
参数2:9
 
[INFO][2017-07-17 10:21:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 10:21:08] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:1
参数2:9
 
[INFO][2017-07-17 10:21:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:21:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:9
 
[INFO][2017-07-17 10:21:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ) 
[INFO][2017-07-17 10:21:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:9
 
[INFO][2017-07-17 10:21:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:21:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-17 10:21:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 10:21:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:1
参数2:9
 
[INFO][2017-07-17 10:22:18] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing WebApplicationContext for namespace 'core-controller-servlet': startup date [Mon Jul 17 09:23:21 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-17 10:22:18] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-17 10:22:19] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:203) localhost-startStop-2 Shutting down ExecutorService 'taskExecutor' 
[INFO][2017-07-17 10:22:19] org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:987) localhost-startStop-2 Closing Root WebApplicationContext: startup date [Mon Jul 17 09:23:17 CST 2017]; root of context hierarchy 
[INFO][2017-07-17 10:22:19] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop(DefaultLifecycleProcessor.java:356) localhost-startStop-2 Stopping beans in phase 2147483647 
[INFO][2017-07-17 10:22:31] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:305) RMI TCP Connection(3)-127.0.0.1 Root WebApplicationContext: initialization started 
[INFO][2017-07-17 10:22:31] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(3)-127.0.0.1 Refreshing Root WebApplicationContext: startup date [Mon Jul 17 10:22:31 CST 2017]; root of context hierarchy 
[INFO][2017-07-17 10:22:31] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/datasource-configurer.xml] 
[INFO][2017-07-17 10:22:32] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/ActiveMQ.xml] 
[INFO][2017-07-17 10:22:32] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/redis.xml] 
[INFO][2017-07-17 10:22:32] org.springframework.core.io.support.PropertiesLoaderSupport.loadProperties(PropertiesLoaderSupport.java:172) RMI TCP Connection(3)-127.0.0.1 Loading properties file from ServletContext resource [/WEB-INF/jdbc_sqlserver.properties] 
[INFO][2017-07-17 10:22:34] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(3)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-17 10:22:34] org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:345) RMI TCP Connection(3)-127.0.0.1 Root WebApplicationContext: initialization completed in 2747 ms 
[INFO][2017-07-17 10:22:34] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:489) RMI TCP Connection(3)-127.0.0.1 FrameworkServlet 'core-controller': initialization started 
[INFO][2017-07-17 10:22:34] org.springframework.context.support.AbstractApplicationContext.prepareRefresh(AbstractApplicationContext.java:582) RMI TCP Connection(3)-127.0.0.1 Refreshing WebApplicationContext for namespace 'core-controller-servlet': startup date [Mon Jul 17 10:22:34 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-17 10:22:34] org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) RMI TCP Connection(3)-127.0.0.1 Loading XML bean definitions from ServletContext resource [/WEB-INF/core-controller-servlet.xml] 
[INFO][2017-07-17 10:22:36] org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:165) RMI TCP Connection(3)-127.0.0.1 Initializing ExecutorService  'taskExecutor' 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveElemeOrder]}" onto public java.lang.String com.controller.ApiServerController.ReceiveElemeOrder(com.opensdk.eleme.vo.MessageParam) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderPay() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderConfrim]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderConfrim() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderFulfillment]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderFulfillment() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderCancel]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderCancel() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrdersendstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrdersendstatus() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderBack2]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderBack2() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderSettlement]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderSettlement() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveMeiruanOrderShopstatus]}" onto public java.lang.String com.controller.ApiServerController.ReceiveMeiruanOrderShopstatus() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/ReceiveBaiduOrderPay]}" onto public java.lang.String com.controller.ApiServerController.ReceiveBaiduOrderPay(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ApiServer/CdsOutside]}" onto public java.util.Map com.controller.ApiServerController.CdsOutside(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/print],methods=[GET]}" onto public java.lang.String com.controller.ClientController.print() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/comment],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/home],methods=[GET]}" onto public java.lang.String com.controller.ClientController.home(org.springframework.ui.Model) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/all_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlisthistory() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/shop_orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlisthistory() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/doorderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.doorderlist() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/business_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.business_data() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/good_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_data() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/good_analyse],methods=[GET]}" onto public java.lang.String com.controller.ClientController.good_analyse() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/report1],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report1() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/report2],methods=[GET]}" onto public java.lang.String com.controller.ClientController.report2() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/comment_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.comment_data() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/member_data],methods=[GET]}" onto public java.lang.String com.controller.ClientController.member_data() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/pack_job],methods=[GET]}" onto public java.lang.String com.controller.ClientController.pack_job() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlist() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/orderlisthistory],methods=[GET]}" onto public java.lang.String com.controller.ClientController.orderlisthistory() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/all_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.all_orderlist() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Client/shop_orderlist],methods=[GET]}" onto public java.lang.String com.controller.ClientController.shop_orderlist() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetElectronicScaleList],methods=[POST]}" onto public void com.controller.ClientSetController.GetElectronicScaleList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveElectronicScale(com.framework.mapping.system.CdsElectronicScale,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyElectronicScale],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyElectronicScale(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/electronicScaleToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.electronicScaleToggle(com.framework.mapping.system.CdsElectronicScale) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/cf_meal_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_meal_set() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/scanner_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.scanner_set() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/business],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.business() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/goodsManage],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.goodsManage() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/erp],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.erp() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/cf_task_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.cf_task_set() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/toggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.toggle(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyprint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyprint(com.framework.mapping.system.CdsPrints) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/savePrint],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePrint(com.framework.mapping.system.CdsPrints,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetScannerList],methods=[POST]}" onto public void com.controller.ClientSetController.GetScannerList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/print_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.print_set() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetPrintList],methods=[POST]}" onto public void com.controller.ClientSetController.print_set(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveScenner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveScenner(com.framework.mapping.system.CdsScanner,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyScanner],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyScanner(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/scnnerToggle],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.scnnerToggle(com.framework.mapping.system.CdsScanner) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/electronic_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.electronic_set() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/dianwoda_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.dianwoda_set() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/GetDianwodaList],methods=[POST]}" onto public void com.controller.ClientSetController.GetDianwodaList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/saveDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.saveDianwoda(com.framework.mapping.system.CdsDianwodaPhone,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/destroyDianwoda],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.destroyDianwoda(com.framework.mapping.system.CdsDianwodaPhone) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/password_set],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.password_set() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/savePassword],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ClientSetController.savePassword(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ClientSet/giftlist],methods=[GET]}" onto public java.lang.String com.controller.ClientSetController.giftlist() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Code/index]}" onto public void com.controller.CodeController.index(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus_bak]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus_bak() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/DianWoDan/OrderStatus]}" onto public java.lang.String com.controller.DianWoDanController.OrderStatus() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/index],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.index() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/getUserName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.getUserName(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/updateErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErp(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/saveMsGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveMsGoods(java.util.HashMap,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/GetErpGoodsLists],methods=[POST]}" onto public void com.controller.ErpGoodsController.GetErpGoodsLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.saveErp(java.util.HashMap,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/userIndex],methods=[GET]}" onto public java.lang.String com.controller.ErpGoodsController.userIndex(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/getUserList],methods=[POST]}" onto public void com.controller.ErpGoodsController.getUserList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/MsGoods/updateErpCount],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.ErpGoodsController.updateErpCount(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/index],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.index() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/checkName],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.checkName(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsClassLists],methods=[POST]}" onto public void com.controller.GoodsInfoController.GetGoodsClassLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveErp],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveErp(java.util.HashMap,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo2(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsInfo(java.util.HashMap,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/updateGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.updateGoodsInfo(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/getSigna],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.getSigna() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/saveGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.GoodsInfoController.saveGoodsClass(java.util.HashMap,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/classIndex],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.classIndex() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetGoodsInfoErp],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetErpInfoLists(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/getPicAddress],methods=[GET]}" onto public java.lang.String com.controller.GoodsInfoController.getPicAddress(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodsInfo/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.GoodsInfoController.GetBrandTree() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userExitOut]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.userExitOut() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLoginVerify]}" onto public java.lang.String com.controller.LoginController.userLoginVerify(com.framework.mapping.system.CdsUsers,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/adminLoginVerify]}" onto public java.lang.String com.controller.LoginController.adminLoginVerify(com.framework.mapping.system.SysUser,org.springframework.ui.ModelMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/isLogon]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.isLogon() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/LoginVerify]}" onto public com.framework.mapping.JsonMessage com.controller.LoginController.LoginVerify(java.lang.String,java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLogin]}" onto public java.lang.String com.controller.LoginController.userLogin() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/adminLogin]}" onto public java.lang.String com.controller.LoginController.adminLogin() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/login/userLoginOut]}" onto public java.lang.String com.controller.LoginController.userLoginOut() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/main/index],methods=[GET]}" onto public java.lang.String com.controller.MainController.index() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.index() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresGoodsList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetStoresGoodsList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/updateStoresGoods],methods=[POST]}" onto public void com.controller.PtGoodManageController.updateStoresGoods(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetGoodsClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindUpdate],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindUpdate(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindQuery(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleGoodClassBindDelete],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleGoodClassBindDelete(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/meituanClassQuery],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.meituanClassQuery(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassRemoveBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassRemoveBind(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getStoresGoodsClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getStoresGoodsClass(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.eleClassGoodsQuery(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassGoodsQuery],methods=[POST]}" onto public java.util.List<com.alibaba.fastjson.JSONObject> com.controller.PtGoodManageController.mtClassGoodsQuery(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetBrandTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetBrandTree(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetStoresTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetStoresTree() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetGoodsTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.GetGoodsTree() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/queryGoods],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.queryGoods() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/GetClassList],methods=[POST]}" onto public void com.controller.PtGoodManageController.GetClassList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/saveStoresClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveStoresClass(java.util.HashMap) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/elemClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtClassBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtClassBind(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteMT(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindMT],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindMT(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemClassList],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getElemClassList(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteElem(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/reverseBindElem],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.reverseBindElem(java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBind],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBind(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/sellStatus],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.sellStatus(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteClass],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteClass(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getGood_ids],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getGood_ids(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getCombobox],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getCombobox(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/saveGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.saveGoods(java.util.HashMap) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/deleteGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.deleteGoods(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexPt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexPt(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexElem],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexElem(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getElemGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.getElemGood(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/elemBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.elemBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleUpdateFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleUpdateFood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/eleDeleteFood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.eleDeleteFood(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/indexMt],methods=[GET]}" onto public java.lang.String com.controller.PtGoodManageController.indexMt(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtBandGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtBandGood(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/mtDeleteGood],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.mtDeleteGood(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/getMtGoodTree],methods=[POST]}" onto public java.util.List com.controller.PtGoodManageController.getMtGoodTree(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/PtGoodsManage/checkBindMt],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.PtGoodManageController.checkBindMt(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/validateStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.validateStores(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/GetStoresList],methods=[POST]}" onto public void com.controller.StoresController.GetStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_grid],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_grid() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_login() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Stores/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresGoodsManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresGoodsManageController.index() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresGoodsManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresGoodsManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/index],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.index() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getstoresBrandList2],methods=[POST]}" onto public void com.controller.StoresManageController.getstoresBrandList2(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindQuery(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/meituanstoresBindQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.meituanstoresBindQuery(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresModeQuery],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresModeQuery(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/elestoresBindMode],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.elestoresBindMode(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_login_grid],methods=[POST]}" onto public void com.controller.StoresManageController.stores_login_grid(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/updateDispatchExtinfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.updateDispatchExtinfo(java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveBrand],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveBrand(java.util.HashMap,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/storesbrand_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.storesbrand_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveStoresLogin],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStoresLogin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_login],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_login() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/stores_list],methods=[GET]}" onto public java.lang.String com.controller.StoresManageController.stores_list(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/saveStores],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.controller.StoresManageController.saveStores(com.framework.mapping.system.CdsBrand,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/StoresManage/getStoresList],methods=[POST]}" onto public void com.controller.StoresManageController.getStoresList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test],methods=[GET]}" onto public java.lang.String com.controller.TestController.test(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/orderTest],methods=[GET]}" onto public java.util.Map com.controller.TestController.orderTest(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test2],methods=[GET]}" onto public java.lang.String com.controller.TestController.test2(int) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/orderTest2],methods=[GET]}" onto public java.lang.String com.controller.TestController.orderTest2(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/ordermessage],methods=[GET]}" onto public java.lang.String com.controller.TestController.ordermessage(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/sendCode],methods=[GET]}" onto public java.lang.String com.controller.TestController.sendCode() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/test3],methods=[GET]}" onto public java.lang.String com.controller.TestController.test3(java.lang.String,int) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Test/order],methods=[GET]}" onto public java.lang.String com.controller.TestController.test4(java.lang.String) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/Udesk/orderlist],methods=[GET]}" onto public java.lang.String com.controller.UdeskController.doorderlist(javax.servlet.http.HttpServletRequest) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.getVersion(java.util.HashMap) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_cancel(java.util.HashMap) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/doningTaskRecord]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.doningTaskRecord(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/taskGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.task_add(java.util.HashMap) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/do_task_Record]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.do_task_Record(java.util.HashMap) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanTask/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanTaskController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/getVersion]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.getVersion(java.util.HashMap) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/login]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.login(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/task_cancel]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_cancel(java.util.HashMap) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/storesGoods]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.storesGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/task_add]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.task_add(java.util.HashMap) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/productionList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.productionList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/recordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.recordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/taskrecordList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.taskrecordList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/reportList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.reportList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ChufanXiada/chufanMealList]}" onto public com.framework.mapping.JsonMessage com.api.ChufanXiadaController.chufanMealList(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getTreeGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getGoods() 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderlist],methods=[POST]}" onto public void com.api.GiftController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderlisthistory],methods=[POST]}" onto public void com.api.GiftController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/giftlist],methods=[POST]}" onto public void com.api.GiftController.giftlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/orderInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.orderInfo(com.framework.mapping.system.CdsOrderInfo) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/viewgiftlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.viewgiftlog(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getTableGoods],methods=[GET]}" onto public void com.api.GiftController.getTableGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/getBrandClass],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.getBrandClass(com.framework.mapping.system.CdsClass) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GiftApi/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GiftController.saveGift(java.lang.String,com.framework.mapping.system.CdsGiftRegisterList) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodAPI/getReportAnalyse],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.getReportAnalyse(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/GoodAPI/goodReport],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.GoodController.goodReport(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/homeApi/viewData],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.HomeController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addErpGoodsToGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoodsToGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getMealErpInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getMealErpInfo(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangTask(com.framework.mapping.system.CdsChufanTask) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getStoresInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getStoresInfo() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getChufangTask],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChufangTask(java.lang.Integer) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getChuErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getChuErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addChufangMeal],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addChufangMeal(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMealErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/delMealErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delMealErpGoods(com.framework.mapping.system.CdsChufanMeal) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getErpGoods],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoods(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addMaterial],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addMaterial(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateErpGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateErpGoods(com.framework.mapping.system.CdsMsGoods) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/saleSync],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.saleSync(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getGoodsInfo() throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/getErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.getErpGoodsInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/delErpGoodsInfo],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.delErpGoodsInfo(com.framework.mapping.system.CdsErpGoodList) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/addGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.addGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/updateGoods],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.updateGoods(com.framework.mapping.system.CdsGoodsInfo,org.springframework.web.multipart.MultipartFile) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/business/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.businessMg(java.lang.String,com.framework.mapping.system.CdsBusinessUnit) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ErpApi/userAndShop/{action}],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.KeFuController.usersMg(java.lang.String,java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistorysendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistorysendlog(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewhistoryorderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewhistoryorderlog(java.lang.String,java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlist],methods=[POST]}" onto public void com.api.OrderController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/orderlisthistory],methods=[POST]}" onto public void com.api.OrderController.orderlisthistory(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/printOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.printOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/sendShOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendShOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelorder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelorder(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelDwdsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelDwdsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/cancelShsend],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.cancelShsend(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/vieworderlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.vieworderlog(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/viewsendlog],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.viewsendlog(java.lang.String) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/orderSelectAPI/sendDwdOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.OrderController.sendDwdOrder(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/loginVerify],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.LoginVerify(com.framework.mapping.system.CdsStoresLogin) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/orderlist],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderList(java.util.HashMap) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/getOrderInfo],methods=[GET]}" onto public com.framework.mapping.JsonMessage com.api.PackController.getOrderInfo(com.framework.mapping.system.CdsOrderInfo) 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/optOrder],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.optOrder(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/packApi/packJob],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.PackController.packJob(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/printrEmedy],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrEmedy(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/getConfigInfo],methods=[POST]}" onto public java.lang.String com.api.PrintController.getConfigInfo(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/printAPI/printrSuccess],methods=[POST]}" onto public java.lang.String com.api.PrintController.printrSuccess(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ReportAPI/report1],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report1(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/ReportAPI/report2],methods=[POST]}" onto public com.framework.mapping.JsonMessage com.api.ReportController.report2(java.util.Map) throws java.lang.Exception 
[INFO][2017-07-17 10:22:37] org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.register(AbstractHandlerMethodMapping.java:543) RMI TCP Connection(3)-127.0.0.1 Mapped "{[/udeskAPI/orderlist],methods=[POST]}" onto public void com.api.UdeskAPIController.orderlist(java.util.HashMap) throws java.lang.Exception 
[INFO][2017-07-17 10:22:38] org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.initControllerAdviceCache(RequestMappingHandlerAdapter.java:534) RMI TCP Connection(3)-127.0.0.1 Looking for @ControllerAdvice: WebApplicationContext for namespace 'core-controller-servlet': startup date [Mon Jul 17 10:22:34 CST 2017]; parent: Root WebApplicationContext 
[INFO][2017-07-17 10:22:38] org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:354) RMI TCP Connection(3)-127.0.0.1 Mapped URL path [/**] onto handler 'org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler#0' 
[INFO][2017-07-17 10:22:39] org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:341) RMI TCP Connection(3)-127.0.0.1 Starting beans in phase 2147483647 
[INFO][2017-07-17 10:22:39] org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:311) RMI TCP Connection(3)-127.0.0.1 Established shared JMS Connection: ActiveMQConnection {id=ID:QH-20161019UENF-59914-1500258159160-1:1,clientId=null,started=false} 
[INFO][2017-07-17 10:22:39] org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:1040) ActiveMQ Task-1 Successfully connected to tcp://127.0.0.1:61616 
[INFO][2017-07-17 10:22:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) RMI TCP Connection(3)-127.0.0.1 sys_dict.getRecord: 
select * from cds_options where option_name=? 
[INFO][2017-07-17 10:22:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) RMI TCP Connection(3)-127.0.0.1 参数1:site_options
 
[INFO][2017-07-17 10:22:40] org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:508) RMI TCP Connection(3)-127.0.0.1 FrameworkServlet 'core-controller': initialization completed in 5430 ms 
[INFO][2017-07-17 10:23:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_users
             


         WHERE user_login = ? 
[INFO][2017-07-17 10:23:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:chenbin
 
[INFO][2017-07-17 10:23:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 10:23:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:351
参数2:1032
 
[INFO][2017-07-17 10:23:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 10:23:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:352
参数2:1032
 
[INFO][2017-07-17 10:23:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 10:23:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:375
参数2:1032
 
[INFO][2017-07-17 10:23:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 10:23:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:376
参数2:1032
 
[INFO][2017-07-17 10:23:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 10:23:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:355
参数2:1032
 
[INFO][2017-07-17 10:23:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_role_menu.getUserMenu: 
select distinct menu.* from (
            select id,parentid,app,model,action,name,status,listorder,app+'/'+model+'/'+action as rule_name,icon
            from cds_menu
            where parentid=? and status=1) menu
            left join cds_auth_access access on menu.rule_name = access.rule_name
            left join cds_role role on access.role_id = role.id
            left join cds_role_user ru on role.id = ru.role_id
            where ru.user_id=?
            order by listorder 
[INFO][2017-07-17 10:23:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:356
参数2:1032
 
[INFO][2017-07-17 10:23:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores
             


         WHERE stores_id = ? 
[INFO][2017-07-17 10:23:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:9
 
[INFO][2017-07-17 10:23:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_home.getdoActionCount: 
select 'doCount1' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 0
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dopackCount' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and (o.order_status = 1 or o.order_status = 2)  and o.pack_user_time is null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'dosendCount' as keyname, count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            AND (o.order_status = 1 or o.order_status = 2) and o.pack_user_time is not null
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount3' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 3
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount4' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 4
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59'
            union all
            select 'doCount99' as keyname,count(1) as docount
            from cds_order_info o
            where o.stores_id = ?
            and  o.order_status = 99
            and o.create_date >= ?
            and o.create_date <= ? + ' 23:59:59' 
[INFO][2017-07-17 10:23:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:9
参数2:2017-07-17
参数3:2017-07-17
参数4:9
参数5:2017-07-17
参数6:2017-07-17
参数7:9
参数8:2017-07-17
参数9:2017-07-17
参数10:9
参数11:2017-07-17
参数12:2017-07-17
参数13:9
参数14:2017-07-17
参数15:2017-07-17
参数16:9
参数17:2017-07-17
参数18:2017-07-17
 
[INFO][2017-07-17 10:23:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_home.getdoOrderCount: 
select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'curser' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'yesterday' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin

            union all
            select fromin,sum(sum1) as sum1,sum(order_count) as sum2,sum(sum1)/sum(order_count) as sum3,sum(income) as income,'last_week' as type
            from (
            select goods_prcie+ship_fee+box_price as sum1,income,fromin,1 as order_count from cds_order_info a
            WHERE a.create_date >= ? AND a.create_date <= ? + ' 23:59:59'
            and order_status !=99
            and a.stores_id =?
            ) temp
            group by temp.fromin 
[INFO][2017-07-17 10:23:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2017-07-17
参数2:2017-07-17
参数3:9
参数4:2017-07-16
参数5:2017-07-16
参数6:9
参数7:2017-07-10
参数8:2017-07-10
参数9:9
 
[INFO][2017-07-17 10:23:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:23:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:1
参数2:10
 
[INFO][2017-07-17 10:23:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:23:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 10:23:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:23:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:10
 
[INFO][2017-07-17 10:23:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:23:10] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:26
 
[INFO][2017-07-17 10:23:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-17 10:23:11] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:39
 
[INFO][2017-07-17 10:23:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:23:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:1
参数2:10
 
[INFO][2017-07-17 10:23:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 10:23:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:1
参数2:10
 
[INFO][2017-07-17 10:23:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:23:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 10:23:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:23:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 10:23:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:23:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-17 10:23:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:23:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-17 10:23:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:36] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-17 10:23:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-17 10:23:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:23:37] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-17 10:23:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:23:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-17 10:23:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:23:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-17 10:23:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-17 10:23:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:
 
[INFO][2017-07-17 10:23:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-17 10:23:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:1
 
[INFO][2017-07-17 10:23:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-17 10:23:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:1
 
[INFO][2017-07-17 10:23:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 10:23:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:1
 
[INFO][2017-07-17 10:23:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-17 10:23:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:1
 
[INFO][2017-07-17 10:23:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9  
[INFO][2017-07-17 10:23:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:39] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-17 10:23:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:42] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-17 10:23:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-17 10:23:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:23:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-17 10:23:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-17 10:23:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:43] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:1
 
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:1
 
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
 
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:23:44] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-17 10:23:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-17 10:23:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-17 10:23:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-17 10:23:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 10:23:45] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-17 10:23:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-17 10:23:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-17 10:23:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:23:47] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-17 10:23:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:23:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 10:23:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:23:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-17 10:23:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:23:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
参数2:10
 
[INFO][2017-07-17 10:23:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:23:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:26
 
[INFO][2017-07-17 10:23:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
 
[INFO][2017-07-17 10:23:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 10:23:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:10
参数2:2
 
[INFO][2017-07-17 10:23:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:23:48] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
 
[INFO][2017-07-17 10:23:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:23:50] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-17 10:23:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:23:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-17 10:23:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 10:23:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-17 10:23:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:23:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-17 10:23:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:23:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:1
 
[INFO][2017-07-17 10:23:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:23:51] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
 
[INFO][2017-07-17 10:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 10:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-17 10:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
 
[INFO][2017-07-17 10:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 10:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:2
参数2:10
 
[INFO][2017-07-17 10:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-17 10:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
 
[INFO][2017-07-17 10:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:1227280992
 
[INFO][2017-07-17 10:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:23:53] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 10:23:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:23:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:1227683784
 
[INFO][2017-07-17 10:23:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:23:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 10:23:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:23:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:1227826943
 
[INFO][2017-07-17 10:23:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:23:54] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 10:23:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?

                
            
            
                
                    and class_id not in (39))  tmp_count 
[INFO][2017-07-17 10:23:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
 
[INFO][2017-07-17 10:23:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?

                
            
            
                
                    and class_id not in (39)) tmp where tmp.rownumber between 1 and 4 
[INFO][2017-07-17 10:23:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
 
[ERROR][2017-07-17 10:24:06] com.framework.util.BeanUtil.createBean(BeanUtil.java:43) http-nio-80-exec-2 Indexed or mapped properties are not supported on objects of type Map: rows[0] 
[INFO][2017-07-17 10:24:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_class(
          
            stores_brand_id
         , 
            class_id
         , 
            food_category_id
         , 
            meituan_cat_id
         , 
            type
         , 
            baidu_cat_id
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-17 10:24:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:26
参数2:38
参数3:null
参数4:null
参数5:1
参数6:null
 
[INFO][2017-07-17 10:24:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:24:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 10:24:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:24:07] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 10:24:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:24:12] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-17 10:24:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:24:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-17 10:24:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 10:24:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-17 10:24:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:24:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-17 10:24:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:24:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:1
 
[INFO][2017-07-17 10:24:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:24:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:26
参数2:公告（仔细看哦~）
 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:2
参数2:10
 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetClassList: 
select tmp.* from (select (row_number() Over(order by class_id asc)) as rownumber, * from cds_class
         
         WHERE brand_id = ?) tmp where tmp.rownumber between 1 and 5 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:26
参数2:不背锅套餐
 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:26
参数2:再加一份米饭
 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ?
            and
                meituan_cat_id = ? 
[INFO][2017-07-17 10:24:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:26
参数2:特制饮品
 
[INFO][2017-07-17 10:24:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:24:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:1227280992
 
[INFO][2017-07-17 10:24:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:24:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:1227683784
 
[INFO][2017-07-17 10:24:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:24:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:1227826943
 
[INFO][2017-07-17 10:24:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_class_id = ? 
[INFO][2017-07-17 10:24:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:10
 
[INFO][2017-07-17 10:24:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.updateRecord: 
UPDATE cds_stores_class
         SET stores_brand_id = ?
            ,
                class_id = ?
            ,
                food_category_id = ?
            ,
                meituan_cat_id = ?
            ,
                type = ?
            ,
                baidu_cat_id = ? 
         WHERE stores_class_id = ? 
[INFO][2017-07-17 10:24:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:26
参数2:38
参数3:1227817758
参数4:null
参数5:1
参数6:null
参数7:10
 
[INFO][2017-07-17 10:24:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:24:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 10:24:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:24:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 10:24:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:24:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:1227280992
 
[INFO][2017-07-17 10:24:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:24:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:1227683784
 
[INFO][2017-07-17 10:24:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:24:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:1227826943
 
[INFO][2017-07-17 10:24:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE food_category_id = ? 
[INFO][2017-07-17 10:24:21] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:1227817758
 
[INFO][2017-07-17 10:25:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:25:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-17 10:25:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:25:13] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
参数2:10
参数3:39
 
[INFO][2017-07-17 10:25:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:25:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-17 10:25:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:25:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-17 10:25:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:25:15] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-17 10:25:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:25:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-17 10:25:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:25:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 10:25:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:25:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 10:25:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:25:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:26
 
[INFO][2017-07-17 10:25:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:25:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
 
[INFO][2017-07-17 10:25:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:25:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
 
[INFO][2017-07-17 10:25:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 10:25:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:10
参数2:2
 
[INFO][2017-07-17 10:25:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:25:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
参数2:10
参数3:38
 
[INFO][2017-07-17 10:25:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ) 
[INFO][2017-07-17 10:25:18] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
参数2:10
参数3:38
 
[INFO][2017-07-17 10:25:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1278)
                
            
            
                
                     and c.class_id in (39,38))  tmp_count 
[INFO][2017-07-17 10:25:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
 
[INFO][2017-07-17 10:25:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE  (
                         c.brand_id = ?
                      )
                
            

            

            
                
                     and a.good_id not in (1278)
                
            
            
                
                     and c.class_id in (39,38)) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:25:20] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:2
 
[INFO][2017-07-17 10:25:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.insertRecord: 
INSERT INTO cds_stores_goods_list(
          
            stores_id
         , 
            good_id
         , 
            brand_id
         , 
            good_number
         , 
            type
         , 
            elem_count
         , 
            mt_count
         , 
            wx_count
         , 
            box_count
         , 
            status
         , 
            box_price
         , 
            market_price
         , 
            unit
         , 
            default_standrad_id
         , 
            isdefault
         , 
            all_count
         , 
            stores_brand_id
         , 
            food_id
         , 
            mt_isband
         , 
            mt_image_hash
         
        ) VALUES(
          
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         
        ) 
[INFO][2017-07-17 10:25:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:10
参数2:1274
参数3:2
参数4:0
参数5:0
参数6:4950
参数7:4950
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:0.0
参数13:份
参数14:0
参数15:null
参数16:10000
参数17:26
参数18:null
参数19:null
参数20:null
 
[INFO][2017-07-17 10:25:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 10:25:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:10
参数2:2
 
[INFO][2017-07-17 10:25:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:25:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
参数2:10
参数3:38
 
[INFO][2017-07-17 10:25:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )
                
            
            
                
                    AND (
                         c.class_id = ?
                      )) tmp where tmp.rownumber between 1 and 1 
[INFO][2017-07-17 10:25:25] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
参数2:10
参数3:38
 
[INFO][2017-07-17 10:25:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:25:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:1
参数2:10
 
[INFO][2017-07-17 10:25:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:25:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:2
参数2:10
 
[INFO][2017-07-17 10:25:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:25:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:10
 
[INFO][2017-07-17 10:25:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:25:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:26
 
[INFO][2017-07-17 10:25:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-17 10:25:28] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:39
 
[INFO][2017-07-17 10:25:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE class_id = ? 
[INFO][2017-07-17 10:25:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:38
 
[INFO][2017-07-17 10:25:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:25:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:1
参数2:10
 
[INFO][2017-07-17 10:25:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 10:25:29] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:1
参数2:10
 
[INFO][2017-07-17 10:25:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:25:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-17 10:25:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:25:31] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-17 10:25:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-17 10:25:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:3341
 
[INFO][2017-07-17 10:25:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-17 10:25:38] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:10
参数2:1274
参数3:2
参数4:0
参数5:0
参数6:450
参数7:450
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:0.0
参数13:份
参数14:0
参数15:null
参数16:1000
参数17:26
参数18:null
参数19:null
参数20:null
参数21:3341
 
[INFO][2017-07-17 10:26:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-17 10:26:02] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:3340
 
[INFO][2017-07-17 10:26:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-17 10:26:03] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:10
参数2:1278
参数3:2
参数4:0
参数5:0
参数6:450
参数7:450
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:0.01
参数13:份
参数14:0
参数15:null
参数16:1000
参数17:26
参数18:1235546147
参数19:null
参数20:null
参数21:3340
 
[INFO][2017-07-17 10:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-17 10:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-17 10:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:26:55] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-17 10:26:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:26:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-17 10:26:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:26:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-17 10:26:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 cds_stores.GetGoodsInfoErp: 
select
                a.erp_good_id,
                m.good_id,
                c.class_nick_name,
                t.class_id,
                m.good_name,
                a.good_count
                from cds_erp_good_list a
                left join cds_ms_goods m on a.ms_good_id=m.good_id
                left join cds_goods_info g on a.good_id = g.good_id
                left join cds_class c on c.class_id = g.class_id
                left join cds_class_type t on m.class_id = t.class_id
                where a.good_id=? 
[INFO][2017-07-17 10:26:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6 参数1:
 
[INFO][2017-07-17 10:26:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_stores.GetGoodsInfoLists: 
select count(0) from (select a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?)  tmp_count 
[INFO][2017-07-17 10:26:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:1
 
[INFO][2017-07-17 10:26:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_stores.getMsGoodsPageRecord: 
select count(0) from (select * from  cds_ms_goods
         
         WHERE status = ?)  tmp_count 
[INFO][2017-07-17 10:26:56] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:1
 
[INFO][2017-07-17 10:26:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_stores.getMsGoodsPageRecord: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, * from  cds_ms_goods
         
         WHERE status = ?) tmp where tmp.rownumber between 1 and 10 
[INFO][2017-07-17 10:26:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:1
 
[INFO][2017-07-17 10:26:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-9 cds_stores.GetGoodsInfoLists: 
select tmp.* from (select (row_number() Over(order by good_id asc)) as rownumber, a.* ,c.brand_id,
                (select count(1) from cds_erp_good_list b where b.good_id=a.good_id) as good_count
                from cds_goods_info a
                left join cds_class c on c.class_id=a.class_id
         
         WHERE a.status = ?) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 10:26:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-9 参数1:1
 
[INFO][2017-07-17 10:26:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:26:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-17 10:26:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:26:57] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1  
[INFO][2017-07-17 10:26:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:26:58] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5  
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_goods_info
             


         WHERE status = ? 
         
            ORDER BY good_id 
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:1
 
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7  
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8  
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:26:59] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:1
 
[INFO][2017-07-17 10:27:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:27:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-17 10:27:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:27:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10  
[INFO][2017-07-17 10:27:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:27:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:2
 
[INFO][2017-07-17 10:27:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:27:00] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3  
[INFO][2017-07-17 10:27:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:27:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-17 10:27:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id)  tmp_count 
[INFO][2017-07-17 10:27:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-17 10:27:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id) tmp where tmp.rownumber between 1 and 15 
[INFO][2017-07-17 10:27:01] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-17 10:27:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class_type
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:27:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-17 10:27:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


          
         
            ORDER BY class_id 
[INFO][2017-07-17 10:27:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-17 10:27:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:27:04] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-17 10:27:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_brand
             


         WHERE brand_id = ?
            and
                stores_id = ? 
[INFO][2017-07-17 10:27:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
参数2:10
 
[INFO][2017-07-17 10:27:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:27:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 10:27:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:27:05] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-5 参数1:2
参数2:10
 
[INFO][2017-07-17 10:27:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_class
             


         WHERE stores_brand_id = ? 
         
            ORDER BY stores_class_id 
[INFO][2017-07-17 10:27:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:26
 
[INFO][2017-07-17 10:27:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-1 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:27:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-1 参数1:2
 
[INFO][2017-07-17 10:27:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-8 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE stores_id = ?
            and
                brand_id = ? 
         
            ORDER BY sgl_id 
[INFO][2017-07-17 10:27:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-8 参数1:10
参数2:2
 
[INFO][2017-07-17 10:27:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-10 baseSqlMap.getRecord: 
SELECT * FROM cds_class
             


         WHERE brand_id = ? 
         
            ORDER BY class_id 
[INFO][2017-07-17 10:27:06] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-10 参数1:2
 
[INFO][2017-07-17 10:27:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.getRecord: 
SELECT * FROM cds_stores_goods_list
             


         WHERE sgl_id = ? 
[INFO][2017-07-17 10:27:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:3341
 
[INFO][2017-07-17 10:27:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-7 baseSqlMap.updateRecord: 
UPDATE cds_stores_goods_list
         SET stores_id = ?
            ,
                good_id = ?
            ,
                brand_id = ?
            ,
                good_number = ?
            ,
                type = ?
            ,
                elem_count = ?
            ,
                mt_count = ?
            ,
                wx_count = ?
            ,
                box_count = ?
            ,
                status = ?
            ,
                box_price = ?
            ,
                market_price = ?
            ,
                unit = ?
            ,
                default_standrad_id = ?
            ,
                isdefault = ?
            ,
                all_count = ?
            ,
                stores_brand_id = ?
            ,
                food_id = ?
            ,
                mt_isband = ?
            ,
                mt_image_hash = ? 
         WHERE sgl_id = ? 
[INFO][2017-07-17 10:27:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-7 参数1:10
参数2:1274
参数3:2
参数4:0
参数5:0
参数6:450
参数7:450
参数8:100
参数9:1
参数10:0
参数11:0.0
参数12:0.0
参数13:份
参数14:0
参数15:null
参数16:1000
参数17:26
参数18:1235542064
参数19:null
参数20:null
参数21:3341
 
[INFO][2017-07-17 10:27:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select count(0) from (select  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:27:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 10:27:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-3 cds_ptstores_manage.GetStoresGoodsList: 
select tmp.* from (select (row_number() Over(order by a.sgl_id desc)) as rownumber,  a.sgl_id,
              b.good_name,
              b.image_hash,
              b.good_pic,
              a.stores_brand_id,
              b.good_info,
              a.mt_isband,
              d.food_category_id,
              d.meituan_cat_id,
              a.food_id,
              c.class_name,
              a.elem_count,
              a.mt_count,
              a.wx_count,
              a.all_count,
              a.market_price,
              a.unit,
              a.box_price,
              a.box_count,
              a.status
              from cds_stores_goods_list a
              left join cds_goods_info b on a.good_id=b.good_id
              left join cds_class c on b.class_id=c.class_id
              left join cds_stores_class d on c.class_id=d.class_id and a.stores_brand_id=d.stores_brand_id and b.class_id=d.class_id
         
         WHERE a.brand_id = ?

                
            
            
                
                    AND (
                         a.stores_id = ?
                      )) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:27:09] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-3 参数1:2
参数2:10
 
[INFO][2017-07-17 10:27:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-6 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:27:16] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-6  
[INFO][2017-07-17 10:27:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 baseSqlMap.getRecord: 
SELECT * FROM cds_brand
             


          
         
            ORDER BY brand_id 
[INFO][2017-07-17 10:27:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4  
[INFO][2017-07-17 10:27:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id)  tmp_count 
[INFO][2017-07-17 10:27:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-17 10:27:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select tmp.* from (select (row_number() Over(order by a.stores_class_id desc)) as rownumber,
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id) tmp where tmp.rownumber between 1 and 2 
[INFO][2017-07-17 10:27:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2  
[INFO][2017-07-17 10:27:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:27:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:1
 
[INFO][2017-07-17 10:27:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-4 cds_ptstores_manage.GetStoresTree: 
select (c.stores_id)as id ,(c.name)as text,'icon icon-367' as iconCls, a.elem_restaurant_id,a.meituan_restaurant_id,a.stores_brand_id from cds_stores_brand a
               left join cds_brand b on a.brand_id=b.brand_id
               left join cds_stores c on a.stores_id=c.stores_id
               where a.brand_id = ? 
[INFO][2017-07-17 10:27:17] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-4 参数1:2
 
[INFO][2017-07-17 10:27:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-2 cds_ptstores_manage.GetGoodsClassList: 
select count(0) from (select
              a.stores_class_id,
              c.class_id,
              c.class_name,
              c.listorder,
              a.stores_brand_id,
              b.elem_restaurant_id,
              b.meituan_restaurant_id,
              a.type,
              c.brand_id,
              d.name,
              a.food_category_id,
              a.meituan_cat_id
              from cds_stores_class a
              left join cds_stores_brand b on a.stores_brand_id = b.stores_brand_id
              left join cds_class c on a.class_id = c.class_id
              left join cds_stores d on b.stores_id=d.stores_id
         
         WHERE b.brand_id = ?

                
            
            
                
                    AND (
                         b.stores_id = ?
                      ))  tmp_count 
[INFO][2017-07-17 10:27:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:210) http-nio-80-exec-2 参数1:2
参数2:10
 
[INFO][2017-07-17 10:27:19] com.framework.inteceptor.MybatisPaginationInterceptor.printSql(MybatisPaginationInterceptor.java:164) http-nio-80-exec-5 cds_ptstores_manage.GetClassList: 
select count(0) from (select * from cds_class
         
         WHERE brand_id = ?)  tmp_count 
